import type { ActorHttpInvalidateListenable } from '@comunica/bus-http-invalidate';
import type { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';
import type { IActionRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';
import type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from '@comunica/bus-rdf-metadata-extract';
import type { IActionRdfUpdateHypermedia, IActorRdfUpdateHypermediaOutput } from '@comunica/bus-rdf-update-hypermedia';
import { ActorRdfUpdateQuadsDestination } from '@comunica/bus-rdf-update-quads';
import type { IActionRdfUpdateQuads, IActorRdfUpdateQuadsOutput, IQuadDestination } from '@comunica/bus-rdf-update-quads';
import type { Actor, IActorArgs, IActorTest, Mediator, ActionContext } from '@comunica/core';
import LRUCache = require('lru-cache');
/**
 * A comunica Hypermedia RDF Update Quads Actor.
 */
export declare class ActorRdfUpdateQuadsHypermedia extends ActorRdfUpdateQuadsDestination {
    readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;
    readonly mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>, IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;
    readonly mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;
    readonly mediatorRdfUpdateHypermedia: Mediator<Actor<IActionRdfUpdateHypermedia, IActorTest, IActorRdfUpdateHypermediaOutput>, IActionRdfUpdateHypermedia, IActorTest, IActorRdfUpdateHypermediaOutput>;
    readonly cacheSize: number;
    readonly cache?: LRUCache<string, Promise<IQuadDestination>>;
    readonly httpInvalidator: ActorHttpInvalidateListenable;
    constructor(args: IActorRdfUpdateQuadsHypermediaArgs);
    test(action: IActionRdfUpdateQuads): Promise<IActorTest>;
    getDestination(context: ActionContext): Promise<IQuadDestination>;
}
export interface IActorRdfUpdateQuadsHypermediaArgs extends IActorArgs<IActionRdfUpdateQuads, IActorTest, IActorRdfUpdateQuadsOutput> {
    cacheSize: number;
    httpInvalidator: ActorHttpInvalidateListenable;
    mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;
    mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>, IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;
    mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;
    mediatorRdfUpdateHypermedia: Mediator<Actor<IActionRdfUpdateHypermedia, IActorTest, IActorRdfUpdateHypermediaOutput>, IActionRdfUpdateHypermedia, IActorTest, IActorRdfUpdateHypermediaOutput>;
}
