import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';
import type { IActionRootRdfSerialize, IActorTestRootRdfSerialize, IActorOutputRootRdfSerialize } from '@comunica/bus-rdf-serialize';
import type { IQuadDestination } from '@comunica/bus-rdf-update-quads';
import type { Actor, IActorTest, Mediator } from '@comunica/core';
import type { ActionContext } from '@comunica/types';
import type { AsyncIterator } from 'asynciterator';
import type * as RDF from 'rdf-js';
/**
 * A quad destination that represents an LDP resource.
 */
export declare class QuadDestinationPatchSparqlUpdate implements IQuadDestination {
    private readonly url;
    private readonly context;
    private readonly mediatorHttp;
    private readonly mediatorRdfSerialize;
    constructor(url: string, context: ActionContext | undefined, mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>, IActionHttp, IActorTest, IActorHttpOutput>, mediatorRdfSerialize: Mediator<Actor<IActionRootRdfSerialize, IActorTestRootRdfSerialize, IActorOutputRootRdfSerialize>, IActionRootRdfSerialize, IActorTestRootRdfSerialize, IActorOutputRootRdfSerialize>);
    insert(quads: AsyncIterator<RDF.Quad>): Promise<void>;
    delete(quads: AsyncIterator<RDF.Quad>): Promise<void>;
    wrapSparqlUpdateRequest(type: 'INSERT' | 'DELETE', quads: AsyncIterator<RDF.Quad>): Promise<void>;
    deleteGraphs(graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[], requireExistence: boolean, dropGraphs: boolean): Promise<void>;
    createGraphs(graphs: RDF.NamedNode[], requireNonExistence: boolean): Promise<void>;
}
