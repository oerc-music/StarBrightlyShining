"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfUpdateQuads = exports.getDataDestinationContext = exports.getDataDestinationValue = exports.getDataDestinationType = exports.isDataDestinationRawType = exports.KEY_CONTEXT_DESTINATION = void 0;
const context_entries_1 = require("@comunica/context-entries");
const core_1 = require("@comunica/core");
/**
 * @type {string} Context entry for a data destination.
 * @value {IDataDestination} A destination.
 * @deprecated Import this constant from @comunica/context-entries.
 */
exports.KEY_CONTEXT_DESTINATION = context_entries_1.KeysRdfUpdateQuads.destination;
function isDataDestinationRawType(dataDestination) {
    return typeof dataDestination === 'string' || 'remove' in dataDestination;
}
exports.isDataDestinationRawType = isDataDestinationRawType;
function getDataDestinationType(dataDestination) {
    if (typeof dataDestination === 'string') {
        return '';
    }
    return 'remove' in dataDestination ? 'rdfjsStore' : dataDestination.type;
}
exports.getDataDestinationType = getDataDestinationType;
function getDataDestinationValue(dataDestination) {
    return isDataDestinationRawType(dataDestination) ? dataDestination : dataDestination.value;
}
exports.getDataDestinationValue = getDataDestinationValue;
function getDataDestinationContext(dataDestination, context) {
    if (typeof dataDestination === 'string' || 'remove' in dataDestination || !dataDestination.context) {
        return context;
    }
    return context.merge(dataDestination.context);
}
exports.getDataDestinationContext = getDataDestinationContext;
/**
 * A comunica actor for rdf-update-quads events.
 *
 * Actor types:
 * * Input:  IActionRdfUpdateQuads:      Quad insertion and deletion streams.
 * * Test:   <none>
 * * Output: IActorRdfUpdateQuadsOutput: A promise resolving when the update operation is done.
 *
 * @see IActionRdfUpdateQuads
 * @see IActorRdfUpdateQuadsOutput
 */
class ActorRdfUpdateQuads extends core_1.Actor {
    constructor(args) {
        super(args);
    }
    /**
     * Get the destination from the given context.
     * @param {ActionContext} context An optional context.
     * @return {IDataDestination} The destination or undefined.
     */
    getContextDestination(context) {
        return context ? context.get(exports.KEY_CONTEXT_DESTINATION) : undefined;
    }
    /**
     * Get the destination's raw URL value from the given context.
     * @param {IDataDestination} destination A destination.
     * @return {string} The URL or undefined.
     */
    getContextDestinationUrl(destination) {
        if (destination) {
            let fileUrl = getDataDestinationValue(destination);
            if (typeof fileUrl === 'string') {
                // Remove hashes from source
                const hashPosition = fileUrl.indexOf('#');
                if (hashPosition >= 0) {
                    fileUrl = fileUrl.slice(0, hashPosition);
                }
                return fileUrl;
            }
        }
    }
}
exports.ActorRdfUpdateQuads = ActorRdfUpdateQuads;
//# sourceMappingURL=ActorRdfUpdateQuads.js.map