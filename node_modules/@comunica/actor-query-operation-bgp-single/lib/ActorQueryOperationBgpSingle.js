"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperationBgpSingle = void 0;
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const context_entries_1 = require("@comunica/context-entries");
/**
 * A comunica Query Operation Actor for BGPs with a single pattern.
 */
class ActorQueryOperationBgpSingle extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args) {
        super(args, 'bgp');
    }
    async testOperation(pattern, context) {
        if (pattern.patterns.length !== 1) {
            throw new Error(`Actor ${this.name} can only operate on BGPs with a single pattern.`);
        }
        return true;
    }
    runOperation(pattern, context) {
        // If we have parent metadata, extract the single parent metadata entry.
        if (context && context.has(context_entries_1.KeysQueryOperation.bgpParentMetadata)) {
            const metadatas = context.get(context_entries_1.KeysQueryOperation.bgpParentMetadata);
            context = context.delete(context_entries_1.KeysQueryOperation.bgpParentMetadata);
            context = context.set(context_entries_1.KeysQueryOperation.patternParentMetadata, metadatas[0]);
        }
        return this.mediatorQueryOperation.mediate({ operation: pattern.patterns[0], context });
    }
}
exports.ActorQueryOperationBgpSingle = ActorQueryOperationBgpSingle;
//# sourceMappingURL=ActorQueryOperationBgpSingle.js.map