import { KeysQueryOperation } from '@comunica/context-entries';
import type { ActionContext, IActorArgs, IActorTest } from '@comunica/core';
import type { IActionQueryOperation, IActorQueryOperationOutput } from '@comunica/types';
import type { Algebra } from 'sparqlalgebrajs';
import { ActorQueryOperation } from './ActorQueryOperation';
/**
 * @type {string} Context entry for the current query operation.
 * @deprecated Import this constant from @comunica/context-entries.
 */
export declare const KEY_CONTEXT_QUERYOPERATION = KeysQueryOperation.operation;
/**
 * A base implementation for query operation actors for a specific operation type.
 */
export declare abstract class ActorQueryOperationTyped<O extends Algebra.Operation> extends ActorQueryOperation {
    readonly operationName: string;
    protected constructor(args: IActorArgs<IActionQueryOperation, IActorTest, IActorQueryOperationOutput>, operationName: string);
    test(action: IActionQueryOperation): Promise<IActorTest>;
    run(action: IActionQueryOperation): Promise<IActorQueryOperationOutput>;
    protected abstract testOperation(operation: O, context: ActionContext | undefined): Promise<IActorTest>;
    protected abstract runOperation(operation: O, context: ActionContext | undefined): Promise<IActorQueryOperationOutput>;
}
