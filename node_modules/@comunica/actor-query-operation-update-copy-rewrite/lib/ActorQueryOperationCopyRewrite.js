"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperationCopyRewrite = void 0;
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const sparqlalgebrajs_1 = require("sparqlalgebrajs");
/**
 * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor that
 * handles SPARQL copy operations.
 */
class ActorQueryOperationCopyRewrite extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args) {
        super(args, 'copy');
        this.factory = new sparqlalgebrajs_1.Factory();
    }
    async testOperation(pattern, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
    }
    runOperation(pattern, context) {
        // No-op if source === destination
        if ((typeof pattern.destination === 'string' && typeof pattern.source === 'string' &&
            pattern.destination === pattern.source) ||
            (typeof pattern.destination !== 'string' && typeof pattern.source !== 'string' &&
                pattern.destination.equals(pattern.source))) {
            return Promise.resolve({
                type: 'update',
                updateResult: Promise.resolve(),
            });
        }
        // COPY is equivalent to drop destination, and add
        const operation = this.factory.createCompositeUpdate([
            this.factory.createDrop(pattern.destination, true),
            this.factory.createAdd(pattern.source, pattern.destination, pattern.silent),
        ]);
        return this.mediatorQueryOperation.mediate({ operation, context });
    }
}
exports.ActorQueryOperationCopyRewrite = ActorQueryOperationCopyRewrite;
//# sourceMappingURL=ActorQueryOperationCopyRewrite.js.map