"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperationUpdateDeleteInsert = void 0;
const actor_query_operation_construct_1 = require("@comunica/actor-query-operation-construct");
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const asynciterator_1 = require("asynciterator");
/**
 * A comunica Update DeleteInsert Query Operation Actor.
 */
class ActorQueryOperationUpdateDeleteInsert extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args) {
        super(args, 'deleteinsert');
        this.blankNodeCounter = 0;
    }
    async testOperation(pattern, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
    }
    async runOperation(pattern, context) {
        // Evaluate the where clause
        const whereBindings = pattern.where ?
            bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation
                .mediate({ operation: pattern.where, context })).bindingsStream :
            new asynciterator_1.ArrayIterator([bus_query_operation_1.Bindings({})], { autoStart: false });
        // Construct triples using the result based on the pattern.
        let quadStreamInsert;
        let quadStreamDelete;
        if (pattern.insert) {
            // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls
            quadStreamInsert = new actor_query_operation_construct_1.BindingsToQuadsIterator(pattern.insert.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone(), false);
            this.blankNodeCounter++;
        }
        if (pattern.delete) {
            // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls
            quadStreamDelete = new actor_query_operation_construct_1.BindingsToQuadsIterator(pattern.delete.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone(), false);
            this.blankNodeCounter++;
        }
        // Evaluate the required modifications
        const { updateResult } = await this.mediatorUpdateQuads.mediate({
            quadStreamInsert,
            quadStreamDelete,
            context,
        });
        return {
            type: 'update',
            updateResult,
        };
    }
}
exports.ActorQueryOperationUpdateDeleteInsert = ActorQueryOperationUpdateDeleteInsert;
//# sourceMappingURL=ActorQueryOperationUpdateDeleteInsert.js.map