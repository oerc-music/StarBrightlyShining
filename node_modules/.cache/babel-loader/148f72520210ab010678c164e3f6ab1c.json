{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfUpdateQuadsHypermedia = void 0;\n\nconst bus_rdf_update_quads_1 = require(\"@comunica/bus-rdf-update-quads\");\n\nconst LRUCache = require(\"lru-cache\");\n/**\n * A comunica Hypermedia RDF Update Quads Actor.\n */\n\n\nclass ActorRdfUpdateQuadsHypermedia extends bus_rdf_update_quads_1.ActorRdfUpdateQuadsDestination {\n  constructor(args) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache({\n      max: this.cacheSize\n    }) : undefined;\n    const cache = this.cache;\n\n    if (cache) {\n      this.httpInvalidator.addInvalidateListener(({\n        url\n      }) => url ? cache.del(url) : cache.reset());\n    }\n  }\n\n  async test(action) {\n    const url = this.getContextDestinationUrl(this.getContextDestination(action.context));\n\n    if (!url) {\n      throw new Error(`Actor ${this.name} can only update quads against a single destination URL.`);\n    }\n\n    return true;\n  }\n\n  getDestination(context) {\n    const dataDestination = this.getContextDestination(context);\n    let url = this.getContextDestinationUrl(dataDestination); // Try to read from cache\n\n    if (this.cache && this.cache.has(url)) {\n      return this.cache.get(url);\n    } // Otherwise, call mediators\n\n\n    const ret = (async () => {\n      let metadata;\n      let exists;\n\n      try {\n        // Dereference destination URL\n        const rdfDereferenceOutput = await this.mediatorRdfDereference.mediate({\n          context,\n          url\n        });\n        url = rdfDereferenceOutput.url; // Determine the metadata\n\n        const rdfMetadataOuput = await this.mediatorMetadata.mediate({\n          context,\n          url,\n          quads: rdfDereferenceOutput.quads,\n          triples: rdfDereferenceOutput.triples\n        });\n        metadata = (await this.mediatorMetadataExtract.mediate({\n          context,\n          url,\n          metadata: rdfMetadataOuput.metadata,\n          headers: rdfDereferenceOutput.headers\n        })).metadata;\n        exists = true;\n      } catch (_a) {\n        metadata = {};\n        exists = false;\n      } // Obtain destination\n\n\n      const {\n        destination\n      } = await this.mediatorRdfUpdateHypermedia.mediate({\n        context,\n        url,\n        metadata,\n        exists,\n        forceDestinationType: bus_rdf_update_quads_1.getDataDestinationType(dataDestination)\n      });\n      return destination;\n    })();\n\n    if (this.cache) {\n      this.cache.set(url, ret);\n    }\n\n    return ret;\n  }\n\n}\n\nexports.ActorRdfUpdateQuadsHypermedia = ActorRdfUpdateQuadsHypermedia;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-update-quads-hypermedia/lib/ActorRdfUpdateQuadsHypermedia.js"],"names":["Object","defineProperty","exports","value","ActorRdfUpdateQuadsHypermedia","bus_rdf_update_quads_1","require","LRUCache","ActorRdfUpdateQuadsDestination","constructor","args","cache","cacheSize","max","undefined","httpInvalidator","addInvalidateListener","url","del","reset","test","action","getContextDestinationUrl","getContextDestination","context","Error","name","getDestination","dataDestination","has","get","ret","metadata","exists","rdfDereferenceOutput","mediatorRdfDereference","mediate","rdfMetadataOuput","mediatorMetadata","quads","triples","mediatorMetadataExtract","headers","_a","destination","mediatorRdfUpdateHypermedia","forceDestinationType","getDataDestinationType","set"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfUpdateQuadsHypermedia = void 0;\nconst bus_rdf_update_quads_1 = require(\"@comunica/bus-rdf-update-quads\");\nconst LRUCache = require(\"lru-cache\");\n/**\n * A comunica Hypermedia RDF Update Quads Actor.\n */\nclass ActorRdfUpdateQuadsHypermedia extends bus_rdf_update_quads_1.ActorRdfUpdateQuadsDestination {\n    constructor(args) {\n        super(args);\n        this.cache = this.cacheSize ? new LRUCache({ max: this.cacheSize }) : undefined;\n        const cache = this.cache;\n        if (cache) {\n            this.httpInvalidator.addInvalidateListener(({ url }) => url ? cache.del(url) : cache.reset());\n        }\n    }\n    async test(action) {\n        const url = this.getContextDestinationUrl(this.getContextDestination(action.context));\n        if (!url) {\n            throw new Error(`Actor ${this.name} can only update quads against a single destination URL.`);\n        }\n        return true;\n    }\n    getDestination(context) {\n        const dataDestination = this.getContextDestination(context);\n        let url = this.getContextDestinationUrl(dataDestination);\n        // Try to read from cache\n        if (this.cache && this.cache.has(url)) {\n            return this.cache.get(url);\n        }\n        // Otherwise, call mediators\n        const ret = (async () => {\n            let metadata;\n            let exists;\n            try {\n                // Dereference destination URL\n                const rdfDereferenceOutput = await this.mediatorRdfDereference\n                    .mediate({ context, url });\n                url = rdfDereferenceOutput.url;\n                // Determine the metadata\n                const rdfMetadataOuput = await this.mediatorMetadata.mediate({ context, url, quads: rdfDereferenceOutput.quads, triples: rdfDereferenceOutput.triples });\n                metadata = (await this.mediatorMetadataExtract.mediate({\n                    context,\n                    url,\n                    metadata: rdfMetadataOuput.metadata,\n                    headers: rdfDereferenceOutput.headers,\n                })).metadata;\n                exists = true;\n            }\n            catch (_a) {\n                metadata = {};\n                exists = false;\n            }\n            // Obtain destination\n            const { destination } = await this.mediatorRdfUpdateHypermedia.mediate({\n                context,\n                url,\n                metadata,\n                exists,\n                forceDestinationType: bus_rdf_update_quads_1.getDataDestinationType(dataDestination),\n            });\n            return destination;\n        })();\n        if (this.cache) {\n            this.cache.set(url, ret);\n        }\n        return ret;\n    }\n}\nexports.ActorRdfUpdateQuadsHypermedia = ActorRdfUpdateQuadsHypermedia;\n//# sourceMappingURL=ActorRdfUpdateQuadsHypermedia.js.map"]},"metadata":{},"sourceType":"script"}