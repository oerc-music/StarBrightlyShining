{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FetchDocumentLoader = void 0;\n\nrequire(\"cross-fetch/polyfill\");\n\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\n\nconst http_link_header_1 = require(\"http-link-header\");\n\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\n\n\nclass FetchDocumentLoader {\n  constructor(fetcher) {\n    this.fetcher = fetcher;\n  }\n\n  async load(url) {\n    const response = await (this.fetcher || fetch)(url, {\n      headers: new Headers({\n        accept: 'application/ld+json'\n      })\n    });\n\n    if (response.ok && response.headers) {\n      let mediaType = response.headers.get('Content-Type');\n\n      if (mediaType) {\n        const colonPos = mediaType.indexOf(';');\n\n        if (colonPos > 0) {\n          mediaType = mediaType.substr(0, colonPos);\n        }\n      }\n\n      if (mediaType === 'application/ld+json') {\n        // Return JSON-LD if proper content type was returned\n        return await response.json();\n      } else {\n        // Check for alternate link for a non-JSON-LD response\n        if (response.headers.has('Link')) {\n          let alternateUrl;\n          response.headers.forEach((value, key) => {\n            if (key === 'link') {\n              const linkHeader = http_link_header_1.parse(value);\n\n              for (const link of linkHeader.get('type', 'application/ld+json')) {\n                if (link.rel === 'alternate') {\n                  if (alternateUrl) {\n                    throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                  }\n\n                  alternateUrl = relative_to_absolute_iri_1.resolve(link.uri, url);\n                }\n              }\n            }\n          });\n\n          if (alternateUrl) {\n            return this.load(alternateUrl);\n          }\n        }\n\n        throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n      }\n    } else {\n      throw new Error(response.statusText || `Status code: ${response.status}`);\n    }\n  }\n\n}\n\nexports.FetchDocumentLoader = FetchDocumentLoader;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js"],"names":["Object","defineProperty","exports","value","FetchDocumentLoader","require","ErrorCoded_1","http_link_header_1","relative_to_absolute_iri_1","constructor","fetcher","load","url","response","fetch","headers","Headers","accept","ok","mediaType","get","colonPos","indexOf","substr","json","has","alternateUrl","forEach","key","linkHeader","parse","link","rel","Error","resolve","uri","ErrorCoded","ERROR_CODES","LOADING_DOCUMENT_FAILED","statusText","status"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACAC,OAAO,CAAC,sBAAD,CAAP;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMG,0BAA0B,GAAGH,OAAO,CAAC,0BAAD,CAA1C;AACA;AACA;AACA;;;AACA,MAAMD,mBAAN,CAA0B;AACtBK,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;;AACS,QAAJC,IAAI,CAACC,GAAD,EAAM;AACZ,UAAMC,QAAQ,GAAG,MAAM,CAAC,KAAKH,OAAL,IAAgBI,KAAjB,EAAwBF,GAAxB,EAA6B;AAAEG,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAAX,KAA7B,CAAvB;;AACA,QAAIJ,QAAQ,CAACK,EAAT,IAAeL,QAAQ,CAACE,OAA5B,EAAqC;AACjC,UAAII,SAAS,GAAGN,QAAQ,CAACE,OAAT,CAAiBK,GAAjB,CAAqB,cAArB,CAAhB;;AACA,UAAID,SAAJ,EAAe;AACX,cAAME,QAAQ,GAAGF,SAAS,CAACG,OAAV,CAAkB,GAAlB,CAAjB;;AACA,YAAID,QAAQ,GAAG,CAAf,EAAkB;AACdF,UAAAA,SAAS,GAAGA,SAAS,CAACI,MAAV,CAAiB,CAAjB,EAAoBF,QAApB,CAAZ;AACH;AACJ;;AACD,UAAIF,SAAS,KAAK,qBAAlB,EAAyC;AACrC;AACA,eAAQ,MAAMN,QAAQ,CAACW,IAAT,EAAd;AACH,OAHD,MAIK;AACD;AACA,YAAIX,QAAQ,CAACE,OAAT,CAAiBU,GAAjB,CAAqB,MAArB,CAAJ,EAAkC;AAC9B,cAAIC,YAAJ;AACAb,UAAAA,QAAQ,CAACE,OAAT,CAAiBY,OAAjB,CAAyB,CAACxB,KAAD,EAAQyB,GAAR,KAAgB;AACrC,gBAAIA,GAAG,KAAK,MAAZ,EAAoB;AAChB,oBAAMC,UAAU,GAAGtB,kBAAkB,CAACuB,KAAnB,CAAyB3B,KAAzB,CAAnB;;AACA,mBAAK,MAAM4B,IAAX,IAAmBF,UAAU,CAACT,GAAX,CAAe,MAAf,EAAuB,qBAAvB,CAAnB,EAAkE;AAC9D,oBAAIW,IAAI,CAACC,GAAL,KAAa,WAAjB,EAA8B;AAC1B,sBAAIN,YAAJ,EAAkB;AACd,0BAAM,IAAIO,KAAJ,CAAU,oDAAoDrB,GAA9D,CAAN;AACH;;AACDc,kBAAAA,YAAY,GAAGlB,0BAA0B,CAAC0B,OAA3B,CAAmCH,IAAI,CAACI,GAAxC,EAA6CvB,GAA7C,CAAf;AACH;AACJ;AACJ;AACJ,WAZD;;AAaA,cAAIc,YAAJ,EAAkB;AACd,mBAAO,KAAKf,IAAL,CAAUe,YAAV,CAAP;AACH;AACJ;;AACD,cAAM,IAAIpB,YAAY,CAAC8B,UAAjB,CAA6B,kCAAiCjB,SAAU,EAAxE,EAA2Eb,YAAY,CAAC+B,WAAb,CAAyBC,uBAApG,CAAN;AACH;AACJ,KAnCD,MAoCK;AACD,YAAM,IAAIL,KAAJ,CAAUpB,QAAQ,CAAC0B,UAAT,IAAwB,gBAAe1B,QAAQ,CAAC2B,MAAO,EAAjE,CAAN;AACH;AACJ;;AA7CqB;;AA+C1BtC,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchDocumentLoader = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\nclass FetchDocumentLoader {\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async load(url) {\n        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n        if (response.ok && response.headers) {\n            let mediaType = response.headers.get('Content-Type');\n            if (mediaType) {\n                const colonPos = mediaType.indexOf(';');\n                if (colonPos > 0) {\n                    mediaType = mediaType.substr(0, colonPos);\n                }\n            }\n            if (mediaType === 'application/ld+json') {\n                // Return JSON-LD if proper content type was returned\n                return (await response.json());\n            }\n            else {\n                // Check for alternate link for a non-JSON-LD response\n                if (response.headers.has('Link')) {\n                    let alternateUrl;\n                    response.headers.forEach((value, key) => {\n                        if (key === 'link') {\n                            const linkHeader = http_link_header_1.parse(value);\n                            for (const link of linkHeader.get('type', 'application/ld+json')) {\n                                if (link.rel === 'alternate') {\n                                    if (alternateUrl) {\n                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                                    }\n                                    alternateUrl = relative_to_absolute_iri_1.resolve(link.uri, url);\n                                }\n                            }\n                        }\n                    });\n                    if (alternateUrl) {\n                        return this.load(alternateUrl);\n                    }\n                }\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        else {\n            throw new Error(response.statusText || `Status code: ${response.status}`);\n        }\n    }\n}\nexports.FetchDocumentLoader = FetchDocumentLoader;\n//# sourceMappingURL=FetchDocumentLoader.js.map"]},"metadata":{},"sourceType":"script"}