{"ast":null,"code":"// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer'; // ## Constructor\n\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({\n      encoding: 'utf8',\n      writableObjectMode: true\n    }); // Set up writer with a dummy stream object\n\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => {\n        this.push(quad);\n        callback && callback();\n      },\n      end: callback => {\n        this.push(null);\n        callback && callback();\n      }\n    }, options); // Implement Transform methods on top of writer\n\n    this._transform = (quad, encoding, done) => {\n      writer.addQuad(quad, done);\n    };\n\n    this._flush = done => {\n      writer.end(done);\n    };\n  } // ### Serializes a stream of quads\n\n\n  import(stream) {\n    stream.on('data', quad => {\n      this.write(quad);\n    });\n    stream.on('end', () => {\n      this.end();\n    });\n    stream.on('error', error => {\n      this.emit('error', error);\n    });\n    stream.on('prefix', (prefix, iri) => {\n      this._writer.addPrefix(prefix, iri);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/n3/src/N3StreamWriter.js"],"names":["Transform","N3Writer","N3StreamWriter","constructor","options","encoding","writableObjectMode","writer","_writer","write","quad","callback","push","end","_transform","done","addQuad","_flush","import","stream","on","error","emit","prefix","iri","addPrefix"],"mappings":"AAAA;AACA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;;AACA,eAAe,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACpDG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAM;AAAEC,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,kBAAkB,EAAE;AAAxC,KAAN,EADmB,CAGnB;;AACA,UAAMC,MAAM,GAAG,KAAKC,OAAL,GAAe,IAAIP,QAAJ,CAAa;AACzCQ,MAAAA,KAAK,EAAE,CAACC,IAAD,EAAOL,QAAP,EAAiBM,QAAjB,KAA8B;AAAE,aAAKC,IAAL,CAAUF,IAAV;AAAiBC,QAAAA,QAAQ,IAAIA,QAAQ,EAApB;AAAyB,OADxC;AAEzCE,MAAAA,GAAG,EAAEF,QAAQ,IAAI;AAAE,aAAKC,IAAL,CAAU,IAAV;AAAiBD,QAAAA,QAAQ,IAAIA,QAAQ,EAApB;AAAyB;AAFpB,KAAb,EAG3BP,OAH2B,CAA9B,CAJmB,CASnB;;AACA,SAAKU,UAAL,GAAkB,CAACJ,IAAD,EAAOL,QAAP,EAAiBU,IAAjB,KAA0B;AAAER,MAAAA,MAAM,CAACS,OAAP,CAAeN,IAAf,EAAqBK,IAArB;AAA6B,KAA3E;;AACA,SAAKE,MAAL,GAAcF,IAAI,IAAI;AAAER,MAAAA,MAAM,CAACM,GAAP,CAAWE,IAAX;AAAmB,KAA3C;AACD,GAbmD,CAetD;;;AACEG,EAAAA,MAAM,CAACC,MAAD,EAAS;AACbA,IAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAoBV,IAAI,IAAI;AAAE,WAAKD,KAAL,CAAWC,IAAX;AAAmB,KAAjD;AACAS,IAAAA,MAAM,CAACC,EAAP,CAAU,KAAV,EAAoB,MAAM;AAAE,WAAKP,GAAL;AAAa,KAAzC;AACAM,IAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAoBC,KAAK,IAAI;AAAE,WAAKC,IAAL,CAAU,OAAV,EAAmBD,KAAnB;AAA4B,KAA3D;AACAF,IAAAA,MAAM,CAACC,EAAP,CAAU,QAAV,EAAoB,CAACG,MAAD,EAASC,GAAT,KAAiB;AAAE,WAAKhB,OAAL,CAAaiB,SAAb,CAAuBF,MAAvB,EAA+BC,GAA/B;AAAsC,KAA7E;AACA,WAAO,IAAP;AACD;;AAtBmD","sourcesContent":["// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}