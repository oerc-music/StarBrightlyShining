{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeValueHandlerObject = void 0;\n\nconst NodeValueHandlerAdapter_1 = require(\"./NodeValueHandlerAdapter\");\n/**\n * Converts GraphQL objects to triple patterns by converting keys to predicates and values to objects.\n */\n\n\nclass NodeValueHandlerObject extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {\n  constructor(util, settings) {\n    super('ObjectValue', util, settings);\n  }\n\n  handle(valueNode, fieldName, convertContext) {\n    // Convert object keys to predicates and values to objects, and link them both with a new blank node.\n    const subject = this.util.dataFactory.blankNode();\n    let auxiliaryObjectPatterns = [];\n\n    for (const field of valueNode.fields) {\n      const subValue = this.util.handleNodeValue(field.value, fieldName, convertContext);\n\n      for (const term of subValue.terms) {\n        auxiliaryObjectPatterns.push(this.util.createQuadPattern(subject, field.name, term, convertContext.graph, convertContext.context));\n      }\n\n      if (subValue.auxiliaryPatterns) {\n        auxiliaryObjectPatterns = auxiliaryObjectPatterns.concat(subValue.auxiliaryPatterns);\n      }\n    }\n\n    return {\n      terms: [subject],\n      auxiliaryPatterns: auxiliaryObjectPatterns\n    };\n  }\n\n}\n\nexports.NodeValueHandlerObject = NodeValueHandlerObject;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerObject.js"],"names":["Object","defineProperty","exports","value","NodeValueHandlerObject","NodeValueHandlerAdapter_1","require","NodeValueHandlerAdapter","constructor","util","settings","handle","valueNode","fieldName","convertContext","subject","dataFactory","blankNode","auxiliaryObjectPatterns","field","fields","subValue","handleNodeValue","term","terms","push","createQuadPattern","name","graph","context","auxiliaryPatterns","concat"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,2BAAD,CAAzC;AACA;AACA;AACA;;;AACA,MAAMF,sBAAN,SAAqCC,yBAAyB,CAACE,uBAA/D,CAAuF;AACnFC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAM,aAAN,EAAqBD,IAArB,EAA2BC,QAA3B;AACH;;AACDC,EAAAA,MAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,cAAvB,EAAuC;AACzC;AACA,UAAMC,OAAO,GAAG,KAAKN,IAAL,CAAUO,WAAV,CAAsBC,SAAtB,EAAhB;AACA,QAAIC,uBAAuB,GAAG,EAA9B;;AACA,SAAK,MAAMC,KAAX,IAAoBP,SAAS,CAACQ,MAA9B,EAAsC;AAClC,YAAMC,QAAQ,GAAG,KAAKZ,IAAL,CAAUa,eAAV,CAA0BH,KAAK,CAAChB,KAAhC,EAAuCU,SAAvC,EAAkDC,cAAlD,CAAjB;;AACA,WAAK,MAAMS,IAAX,IAAmBF,QAAQ,CAACG,KAA5B,EAAmC;AAC/BN,QAAAA,uBAAuB,CAACO,IAAxB,CAA6B,KAAKhB,IAAL,CAAUiB,iBAAV,CAA4BX,OAA5B,EAAqCI,KAAK,CAACQ,IAA3C,EAAiDJ,IAAjD,EAAuDT,cAAc,CAACc,KAAtE,EAA6Ed,cAAc,CAACe,OAA5F,CAA7B;AACH;;AACD,UAAIR,QAAQ,CAACS,iBAAb,EAAgC;AAC5BZ,QAAAA,uBAAuB,GAAGA,uBAAuB,CAACa,MAAxB,CAA+BV,QAAQ,CAACS,iBAAxC,CAA1B;AACH;AACJ;;AACD,WAAO;AAAEN,MAAAA,KAAK,EAAE,CAACT,OAAD,CAAT;AAAoBe,MAAAA,iBAAiB,EAAEZ;AAAvC,KAAP;AACH;;AAlBkF;;AAoBvFhB,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeValueHandlerObject = void 0;\nconst NodeValueHandlerAdapter_1 = require(\"./NodeValueHandlerAdapter\");\n/**\n * Converts GraphQL objects to triple patterns by converting keys to predicates and values to objects.\n */\nclass NodeValueHandlerObject extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {\n    constructor(util, settings) {\n        super('ObjectValue', util, settings);\n    }\n    handle(valueNode, fieldName, convertContext) {\n        // Convert object keys to predicates and values to objects, and link them both with a new blank node.\n        const subject = this.util.dataFactory.blankNode();\n        let auxiliaryObjectPatterns = [];\n        for (const field of valueNode.fields) {\n            const subValue = this.util.handleNodeValue(field.value, fieldName, convertContext);\n            for (const term of subValue.terms) {\n                auxiliaryObjectPatterns.push(this.util.createQuadPattern(subject, field.name, term, convertContext.graph, convertContext.context));\n            }\n            if (subValue.auxiliaryPatterns) {\n                auxiliaryObjectPatterns = auxiliaryObjectPatterns.concat(subValue.auxiliaryPatterns);\n            }\n        }\n        return { terms: [subject], auxiliaryPatterns: auxiliaryObjectPatterns };\n    }\n}\nexports.NodeValueHandlerObject = NodeValueHandlerObject;\n//# sourceMappingURL=NodeValueHandlerObject.js.map"]},"metadata":{},"sourceType":"script"}