{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfResolveQuadPatternHypermedia = void 0;\n\nconst actor_rdf_resolve_hypermedia_links_queue_fifo_1 = require(\"@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo\");\n\nconst bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\n\nconst LRUCache = require(\"lru-cache\");\n\nconst MediatedQuadSource_1 = require(\"./MediatedQuadSource\");\n/**\n * A comunica Hypermedia RDF Resolve Quad Pattern Actor.\n */\n\n\nclass ActorRdfResolveQuadPatternHypermedia extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {\n  constructor(args) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache({\n      max: this.cacheSize\n    }) : undefined;\n    const cache = this.cache;\n\n    if (cache) {\n      this.httpInvalidator.addInvalidateListener(({\n        url\n      }) => url ? cache.del(url) : cache.reset());\n    }\n  }\n\n  async test(action) {\n    const sources = this.hasContextSingleSource(action.context);\n\n    if (!sources) {\n      throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a single source.`);\n    }\n\n    return true;\n  }\n\n  getSource(context, operation) {\n    const contextSource = this.getContextSource(context);\n    const url = this.getContextSourceUrl(contextSource);\n    let source; // Try to read from cache\n\n    if (this.cache && this.cache.has(url)) {\n      source = this.cache.get(url);\n    } else {\n      // If not in cache, create a new source\n      source = new MediatedQuadSource_1.MediatedQuadSource(this.cacheSize, context, url, bus_rdf_resolve_quad_pattern_1.getDataSourceType(contextSource), {\n        mediatorMetadata: this.mediatorMetadata,\n        mediatorMetadataExtract: this.mediatorMetadataExtract,\n        mediatorRdfDereference: this.mediatorRdfDereference,\n        mediatorRdfResolveHypermedia: this.mediatorRdfResolveHypermedia,\n        mediatorRdfResolveHypermediaLinks: this.mediatorRdfResolveHypermediaLinks,\n        mediatorRdfResolveHypermediaLinksQueue: this.mediatorRdfResolveHypermediaLinksQueue || {\n          // TODO: remove backwards-compatibility in next major version\n          mediate: async () => ({\n            linkQueue: new actor_rdf_resolve_hypermedia_links_queue_fifo_1.LinkQueueFifo()\n          })\n        }\n      }); // Set in cache\n\n      if (this.cache) {\n        this.cache.set(url, source);\n      }\n    }\n\n    return Promise.resolve(source);\n  }\n\n}\n\nexports.ActorRdfResolveQuadPatternHypermedia = ActorRdfResolveQuadPatternHypermedia;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-resolve-quad-pattern-hypermedia/lib/ActorRdfResolveQuadPatternHypermedia.js"],"names":["Object","defineProperty","exports","value","ActorRdfResolveQuadPatternHypermedia","actor_rdf_resolve_hypermedia_links_queue_fifo_1","require","bus_rdf_resolve_quad_pattern_1","LRUCache","MediatedQuadSource_1","ActorRdfResolveQuadPatternSource","constructor","args","cache","cacheSize","max","undefined","httpInvalidator","addInvalidateListener","url","del","reset","test","action","sources","hasContextSingleSource","context","Error","name","getSource","operation","contextSource","getContextSource","getContextSourceUrl","source","has","get","MediatedQuadSource","getDataSourceType","mediatorMetadata","mediatorMetadataExtract","mediatorRdfDereference","mediatorRdfResolveHypermedia","mediatorRdfResolveHypermediaLinks","mediatorRdfResolveHypermediaLinksQueue","mediate","linkQueue","LinkQueueFifo","set","Promise","resolve"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oCAAR,GAA+C,KAAK,CAApD;;AACA,MAAMC,+CAA+C,GAAGC,OAAO,CAAC,yDAAD,CAA/D;;AACA,MAAMC,8BAA8B,GAAGD,OAAO,CAAC,wCAAD,CAA9C;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,sBAAD,CAApC;AACA;AACA;AACA;;;AACA,MAAMF,oCAAN,SAAmDG,8BAA8B,CAACG,gCAAlF,CAAmH;AAC/GC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACA,SAAKC,KAAL,GAAa,KAAKC,SAAL,GAAiB,IAAIN,QAAJ,CAAa;AAAEO,MAAAA,GAAG,EAAE,KAAKD;AAAZ,KAAb,CAAjB,GAAyDE,SAAtE;AACA,UAAMH,KAAK,GAAG,KAAKA,KAAnB;;AACA,QAAIA,KAAJ,EAAW;AACP,WAAKI,eAAL,CAAqBC,qBAArB,CAA2C,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAaA,GAAG,GAAGN,KAAK,CAACO,GAAN,CAAUD,GAAV,CAAH,GAAoBN,KAAK,CAACQ,KAAN,EAA/E;AACH;AACJ;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,UAAMC,OAAO,GAAG,KAAKC,sBAAL,CAA4BF,MAAM,CAACG,OAAnC,CAAhB;;AACA,QAAI,CAACF,OAAL,EAAc;AACV,YAAM,IAAIG,KAAJ,CAAW,SAAQ,KAAKC,IAAK,iEAA7B,CAAN;AACH;;AACD,WAAO,IAAP;AACH;;AACDC,EAAAA,SAAS,CAACH,OAAD,EAAUI,SAAV,EAAqB;AAC1B,UAAMC,aAAa,GAAG,KAAKC,gBAAL,CAAsBN,OAAtB,CAAtB;AACA,UAAMP,GAAG,GAAG,KAAKc,mBAAL,CAAyBF,aAAzB,CAAZ;AACA,QAAIG,MAAJ,CAH0B,CAI1B;;AACA,QAAI,KAAKrB,KAAL,IAAc,KAAKA,KAAL,CAAWsB,GAAX,CAAehB,GAAf,CAAlB,EAAuC;AACnCe,MAAAA,MAAM,GAAG,KAAKrB,KAAL,CAAWuB,GAAX,CAAejB,GAAf,CAAT;AACH,KAFD,MAGK;AACD;AACAe,MAAAA,MAAM,GAAG,IAAIzB,oBAAoB,CAAC4B,kBAAzB,CAA4C,KAAKvB,SAAjD,EAA4DY,OAA5D,EAAqEP,GAArE,EAA0EZ,8BAA8B,CAAC+B,iBAA/B,CAAiDP,aAAjD,CAA1E,EAA2I;AAChJQ,QAAAA,gBAAgB,EAAE,KAAKA,gBADyH;AAEhJC,QAAAA,uBAAuB,EAAE,KAAKA,uBAFkH;AAGhJC,QAAAA,sBAAsB,EAAE,KAAKA,sBAHmH;AAIhJC,QAAAA,4BAA4B,EAAE,KAAKA,4BAJ6G;AAKhJC,QAAAA,iCAAiC,EAAE,KAAKA,iCALwG;AAMhJC,QAAAA,sCAAsC,EAAE,KAAKA,sCAAL,IAA+C;AACnF;AACAC,UAAAA,OAAO,EAAE,aAAa;AAAEC,YAAAA,SAAS,EAAE,IAAIzC,+CAA+C,CAAC0C,aAApD;AAAb,WAAb;AAF0E;AANyD,OAA3I,CAAT,CAFC,CAaD;;AACA,UAAI,KAAKlC,KAAT,EAAgB;AACZ,aAAKA,KAAL,CAAWmC,GAAX,CAAe7B,GAAf,EAAoBe,MAApB;AACH;AACJ;;AACD,WAAOe,OAAO,CAACC,OAAR,CAAgBhB,MAAhB,CAAP;AACH;;AA3C8G;;AA6CnHhC,OAAO,CAACE,oCAAR,GAA+CA,oCAA/C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfResolveQuadPatternHypermedia = void 0;\nconst actor_rdf_resolve_hypermedia_links_queue_fifo_1 = require(\"@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo\");\nconst bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\nconst LRUCache = require(\"lru-cache\");\nconst MediatedQuadSource_1 = require(\"./MediatedQuadSource\");\n/**\n * A comunica Hypermedia RDF Resolve Quad Pattern Actor.\n */\nclass ActorRdfResolveQuadPatternHypermedia extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {\n    constructor(args) {\n        super(args);\n        this.cache = this.cacheSize ? new LRUCache({ max: this.cacheSize }) : undefined;\n        const cache = this.cache;\n        if (cache) {\n            this.httpInvalidator.addInvalidateListener(({ url }) => url ? cache.del(url) : cache.reset());\n        }\n    }\n    async test(action) {\n        const sources = this.hasContextSingleSource(action.context);\n        if (!sources) {\n            throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a single source.`);\n        }\n        return true;\n    }\n    getSource(context, operation) {\n        const contextSource = this.getContextSource(context);\n        const url = this.getContextSourceUrl(contextSource);\n        let source;\n        // Try to read from cache\n        if (this.cache && this.cache.has(url)) {\n            source = this.cache.get(url);\n        }\n        else {\n            // If not in cache, create a new source\n            source = new MediatedQuadSource_1.MediatedQuadSource(this.cacheSize, context, url, bus_rdf_resolve_quad_pattern_1.getDataSourceType(contextSource), {\n                mediatorMetadata: this.mediatorMetadata,\n                mediatorMetadataExtract: this.mediatorMetadataExtract,\n                mediatorRdfDereference: this.mediatorRdfDereference,\n                mediatorRdfResolveHypermedia: this.mediatorRdfResolveHypermedia,\n                mediatorRdfResolveHypermediaLinks: this.mediatorRdfResolveHypermediaLinks,\n                mediatorRdfResolveHypermediaLinksQueue: this.mediatorRdfResolveHypermediaLinksQueue || {\n                    // TODO: remove backwards-compatibility in next major version\n                    mediate: async () => ({ linkQueue: new actor_rdf_resolve_hypermedia_links_queue_fifo_1.LinkQueueFifo() }),\n                },\n            });\n            // Set in cache\n            if (this.cache) {\n                this.cache.set(url, source);\n            }\n        }\n        return Promise.resolve(source);\n    }\n}\nexports.ActorRdfResolveQuadPatternHypermedia = ActorRdfResolveQuadPatternHypermedia;\n//# sourceMappingURL=ActorRdfResolveQuadPatternHypermedia.js.map"]},"metadata":{},"sourceType":"script"}