{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\n\nclass ContextTree {\n  constructor() {\n    this.subTrees = {};\n  }\n\n  getContext(keys) {\n    if (keys.length > 0) {\n      const [head, ...tail] = keys;\n      const subTree = this.subTrees[head];\n\n      if (subTree) {\n        const subContext = subTree.getContext(tail);\n\n        if (subContext) {\n          return subContext.then(({\n            context,\n            depth\n          }) => ({\n            context,\n            depth: depth + 1\n          }));\n        }\n      }\n    }\n\n    return this.context ? this.context.then(context => ({\n      context,\n      depth: 0\n    })) : null;\n  }\n\n  setContext(keys, context) {\n    if (keys.length === 0) {\n      this.context = context;\n    } else {\n      const [head, ...tail] = keys;\n      let subTree = this.subTrees[head];\n\n      if (!subTree) {\n        subTree = this.subTrees[head] = new ContextTree();\n      }\n\n      subTree.setContext(tail, context);\n    }\n  }\n\n  removeContext(path) {\n    this.setContext(path, null);\n  }\n\n}\n\nexports.ContextTree = ContextTree;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/jsonld-streaming-parser/lib/ContextTree.js"],"names":["Object","defineProperty","exports","value","ContextTree","constructor","subTrees","getContext","keys","length","head","tail","subTree","subContext","then","context","depth","setContext","removeContext","path"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,WAAN,CAAkB;AACdC,EAAAA,WAAW,GAAG;AACV,SAAKC,QAAL,GAAgB,EAAhB;AACH;;AACDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,QAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AACjB,YAAM,CAACC,IAAD,EAAO,GAAGC,IAAV,IAAkBH,IAAxB;AACA,YAAMI,OAAO,GAAG,KAAKN,QAAL,CAAcI,IAAd,CAAhB;;AACA,UAAIE,OAAJ,EAAa;AACT,cAAMC,UAAU,GAAGD,OAAO,CAACL,UAAR,CAAmBI,IAAnB,CAAnB;;AACA,YAAIE,UAAJ,EAAgB;AACZ,iBAAOA,UAAU,CAACC,IAAX,CAAgB,CAAC;AAAEC,YAAAA,OAAF;AAAWC,YAAAA;AAAX,WAAD,MAAyB;AAAED,YAAAA,OAAF;AAAWC,YAAAA,KAAK,EAAEA,KAAK,GAAG;AAA1B,WAAzB,CAAhB,CAAP;AACH;AACJ;AACJ;;AACD,WAAO,KAAKD,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAmBC,OAAD,KAAc;AAAEA,MAAAA,OAAF;AAAWC,MAAAA,KAAK,EAAE;AAAlB,KAAd,CAAlB,CAAf,GAAyE,IAAhF;AACH;;AACDC,EAAAA,UAAU,CAACT,IAAD,EAAOO,OAAP,EAAgB;AACtB,QAAIP,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACnB,WAAKM,OAAL,GAAeA,OAAf;AACH,KAFD,MAGK;AACD,YAAM,CAACL,IAAD,EAAO,GAAGC,IAAV,IAAkBH,IAAxB;AACA,UAAII,OAAO,GAAG,KAAKN,QAAL,CAAcI,IAAd,CAAd;;AACA,UAAI,CAACE,OAAL,EAAc;AACVA,QAAAA,OAAO,GAAG,KAAKN,QAAL,CAAcI,IAAd,IAAsB,IAAIN,WAAJ,EAAhC;AACH;;AACDQ,MAAAA,OAAO,CAACK,UAAR,CAAmBN,IAAnB,EAAyBI,OAAzB;AACH;AACJ;;AACDG,EAAAA,aAAa,CAACC,IAAD,EAAO;AAChB,SAAKF,UAAL,CAAgBE,IAAhB,EAAsB,IAAtB;AACH;;AAhCa;;AAkClBjB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map"]},"metadata":{},"sourceType":"script"}