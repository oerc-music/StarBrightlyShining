{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntryHandlerKeywordId = void 0;\n\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\n\n\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n  constructor() {\n    super('@id');\n  }\n\n  isStackProcessor() {\n    return false;\n  }\n\n  async handle(parsingContext, util, key, keys, value, depth) {\n    if (typeof value !== 'string') {\n      parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n    } // Determine the canonical place for this id.\n    // For example, @nest parents should be ignored.\n\n\n    const depthProperties = await util.getPropertiesDepth(keys, depth); // Error if an @id for this node already existed.\n\n    if (parsingContext.idStack[depthProperties] !== undefined) {\n      if (parsingContext.idStack[depthProperties][0].listHead) {\n        // Error if an @list was already defined for this node\n        parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n      } else {\n        // Otherwise, the previous id was just because of an @id entry.\n        parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext.idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n      }\n    } // Save our @id on the stack\n\n\n    parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n  }\n\n}\n\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js"],"names":["Object","defineProperty","exports","value","EntryHandlerKeywordId","jsonld_context_parser_1","require","EntryHandlerKeyword_1","EntryHandlerKeyword","constructor","isStackProcessor","handle","parsingContext","util","key","keys","depth","emitError","ErrorCoded","ERROR_CODES","INVALID_ID_VALUE","depthProperties","getPropertiesDepth","idStack","undefined","listHead","INVALID_SET_OR_LIST_OBJECT","COLLIDING_KEYWORDS","nullableTermToArray","resourceToTerm","getContext"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC;;AACA,MAAMC,uBAAuB,GAAGC,OAAO,CAAC,uBAAD,CAAvC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;;;AACA,MAAMF,qBAAN,SAAoCG,qBAAqB,CAACC,mBAA1D,CAA8E;AAC1EC,EAAAA,WAAW,GAAG;AACV,UAAM,KAAN;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAP;AACH;;AACW,QAANC,MAAM,CAACC,cAAD,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCZ,KAAlC,EAAyCa,KAAzC,EAAgD;AACxD,QAAI,OAAOb,KAAP,KAAiB,QAArB,EAA+B;AAC3BS,MAAAA,cAAc,CAACK,SAAf,CAAyB,IAAIZ,uBAAuB,CAACa,UAA5B,CAAwC,sBAAqBf,KAAM,GAAnE,EAAuEE,uBAAuB,CAACc,WAAxB,CAAoCC,gBAA3G,CAAzB;AACH,KAHuD,CAIxD;AACA;;;AACA,UAAMC,eAAe,GAAG,MAAMR,IAAI,CAACS,kBAAL,CAAwBP,IAAxB,EAA8BC,KAA9B,CAA9B,CANwD,CAOxD;;AACA,QAAIJ,cAAc,CAACW,OAAf,CAAuBF,eAAvB,MAA4CG,SAAhD,EAA2D;AACvD,UAAIZ,cAAc,CAACW,OAAf,CAAuBF,eAAvB,EAAwC,CAAxC,EAA2CI,QAA/C,EAAyD;AACrD;AACAb,QAAAA,cAAc,CAACK,SAAf,CAAyB,IAAIZ,uBAAuB,CAACa,UAA5B,CAAwC,8DAA6DH,IAAI,CAACC,KAAK,GAAG,CAAT,CAAY,GAArH,EAAyHX,uBAAuB,CAACc,WAAxB,CAAoCO,0BAA7J,CAAzB;AACH,OAHD,MAIK;AACD;AACAd,QAAAA,cAAc,CAACK,SAAf,CAAyB,IAAIZ,uBAAuB,CAACa,UAA5B,CAAwC,yBAAwBN,cAAc,CAClGW,OADoF,CAC5EF,eAD4E,EAC3D,CAD2D,EACxDlB,KAAM,UAASA,KAAM,GAD7B,EACiCE,uBAAuB,CAACc,WAAxB,CAAoCQ,kBADrE,CAAzB;AAEH;AACJ,KAlBuD,CAmBxD;;;AACAf,IAAAA,cAAc,CAACW,OAAf,CAAuBF,eAAvB,IAA0CR,IAAI,CAACe,mBAAL,CAAyB,MAAMf,IAAI,CAACgB,cAAL,CAAoB,MAAMjB,cAAc,CAACkB,UAAf,CAA0Bf,IAA1B,CAA1B,EAA2DZ,KAA3D,CAA/B,CAA1C;AACH;;AA5ByE;;AA8B9ED,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map"]},"metadata":{},"sourceType":"script"}