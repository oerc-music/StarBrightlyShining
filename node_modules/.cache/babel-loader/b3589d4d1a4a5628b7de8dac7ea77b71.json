{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataFactory = void 0;\n\nconst BlankNode_1 = require(\"./BlankNode\");\n\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\n\nconst Literal_1 = require(\"./Literal\");\n\nconst NamedNode_1 = require(\"./NamedNode\");\n\nconst Quad_1 = require(\"./Quad\");\n\nconst Variable_1 = require(\"./Variable\");\n\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\n\nclass DataFactory {\n  constructor(options) {\n    this.blankNodeCounter = 0;\n    options = options || {};\n    this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n  }\n  /**\n   * @param value The IRI for the named node.\n   * @return A new instance of NamedNode.\n   * @see NamedNode\n   */\n\n\n  namedNode(value) {\n    return new NamedNode_1.NamedNode(value);\n  }\n  /**\n   * @param value The optional blank node identifier.\n   * @return A new instance of BlankNode.\n   *         If the `value` parameter is undefined a new identifier\n   *         for the blank node is generated for each call.\n   * @see BlankNode\n   */\n\n\n  blankNode(value) {\n    return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n  }\n  /**\n   * @param value              The literal value.\n   * @param languageOrDatatype The optional language or datatype.\n   *                           If `languageOrDatatype` is a NamedNode,\n   *                           then it is used for the value of `NamedNode.datatype`.\n   *                           Otherwise `languageOrDatatype` is used for the value\n   *                           of `NamedNode.language`.\n   * @return A new instance of Literal.\n   * @see Literal\n   */\n\n\n  literal(value, languageOrDatatype) {\n    return new Literal_1.Literal(value, languageOrDatatype);\n  }\n  /**\n   * This method is optional.\n   * @param value The variable name\n   * @return A new instance of Variable.\n   * @see Variable\n   */\n\n\n  variable(value) {\n    return new Variable_1.Variable(value);\n  }\n  /**\n   * @return An instance of DefaultGraph.\n   */\n\n\n  defaultGraph() {\n    return DefaultGraph_1.DefaultGraph.INSTANCE;\n  }\n  /**\n   * @param subject   The quad subject term.\n   * @param predicate The quad predicate term.\n   * @param object    The quad object term.\n   * @param graph     The quad graph term.\n   * @return A new instance of Quad.\n   * @see Quad\n   */\n\n\n  quad(subject, predicate, object, graph) {\n    return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n  }\n  /**\n   * Create a deep copy of the given term using this data factory.\n   * @param original An RDF term.\n   * @return A deep copy of the given term.\n   */\n\n\n  fromTerm(original) {\n    // TODO: remove nasty any casts when this TS bug has been fixed:\n    //  https://github.com/microsoft/TypeScript/issues/26933\n    switch (original.termType) {\n      case 'NamedNode':\n        return this.namedNode(original.value);\n\n      case 'BlankNode':\n        return this.blankNode(original.value);\n\n      case 'Literal':\n        if (original.language) {\n          return this.literal(original.value, original.language);\n        }\n\n        if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n          return this.literal(original.value, this.fromTerm(original.datatype));\n        }\n\n        return this.literal(original.value);\n\n      case 'Variable':\n        return this.variable(original.value);\n\n      case 'DefaultGraph':\n        return this.defaultGraph();\n\n      case 'Quad':\n        return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n    }\n  }\n  /**\n   * Create a deep copy of the given quad using this data factory.\n   * @param original An RDF quad.\n   * @return A deep copy of the given quad.\n   */\n\n\n  fromQuad(original) {\n    return this.fromTerm(original);\n  }\n  /**\n   * Reset the internal blank node counter.\n   */\n\n\n  resetBlankNodeCounter() {\n    this.blankNodeCounter = 0;\n  }\n\n}\n\nexports.DataFactory = DataFactory;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-data-factory/lib/DataFactory.js"],"names":["Object","defineProperty","exports","value","DataFactory","BlankNode_1","require","DefaultGraph_1","Literal_1","NamedNode_1","Quad_1","Variable_1","dataFactoryCounter","constructor","options","blankNodeCounter","blankNodePrefix","namedNode","NamedNode","blankNode","BlankNode","literal","languageOrDatatype","Literal","variable","Variable","defaultGraph","DefaultGraph","INSTANCE","quad","subject","predicate","object","graph","Quad","fromTerm","original","termType","language","datatype","equals","XSD_STRING","fromQuad","resetBlankNodeCounter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map"]},"metadata":{},"sourceType":"script"}