{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * All known term types.\n * @see RDF.Term\n * @type {[string , string , string , string , string, string]}\n */\n\nexports.TERM_TYPES = ['NamedNode', 'BlankNode', 'Literal', 'Variable', 'DefaultGraph', 'Quad'];\n/*\n * Utility methods for handling RDFJS terms.\n */\n\n/**\n * Create an array of unique terms from the given array.\n * @param {T[]} terms An array of RDFJS terms.\n * @return {T[]} A new array of unique RDFJS terms.\n */\n\nfunction uniqTerms(terms) {\n  return require('lodash.uniqwith')(terms, (termA, termB) => termA.equals(termB));\n}\n\nexports.uniqTerms = uniqTerms;\n/**\n * Find all terms of the given type in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @param {\"NamedNode\" | \"BlankNode\" | \"Literal\" | \"Variable\" | \"DefaultGraph\" | \"Quad\"} termType A term type.\n * @return {Term[]} A new array with elements from the given array only containing elements of the given type.\n */\n\nfunction getTermsOfType(terms, termType) {\n  return terms.filter(term => term.termType === termType);\n}\n\nexports.getTermsOfType = getTermsOfType;\n/**\n * Find all named nodes in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {NamedNode[]} A new array with elements from the given array only containing named nodes.\n */\n\nfunction getNamedNodes(terms) {\n  return getTermsOfType(terms, 'NamedNode');\n}\n\nexports.getNamedNodes = getNamedNodes;\n/**\n * Find all blank nodes in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {BlankNode[]} A new array with elements from the given array only containing blank nodes.\n */\n\nfunction getBlankNodes(terms) {\n  return getTermsOfType(terms, 'BlankNode');\n}\n\nexports.getBlankNodes = getBlankNodes;\n/**\n * Find all literals in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {Literal[]} A new array with elements from the given array only containing literals.\n */\n\nfunction getLiterals(terms) {\n  return getTermsOfType(terms, 'Literal');\n}\n\nexports.getLiterals = getLiterals;\n/**\n * Find all variables in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {Variable[]} A new array with elements from the given array only containing variables.\n */\n\nfunction getVariables(terms) {\n  return getTermsOfType(terms, 'Variable');\n}\n\nexports.getVariables = getVariables;\n/**\n * Find all default graphs in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {DefaultGraph[]} A new array with elements from the given array only containing default graphs.\n */\n\nfunction getDefaultGraphs(terms) {\n  return getTermsOfType(terms, 'DefaultGraph');\n}\n\nexports.getDefaultGraphs = getDefaultGraphs;\n/**\n * Find all quads in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {BaseQuad[]} A new array with elements from the given array only containing quads.\n */\n\nfunction getQuads(terms) {\n  return getTermsOfType(terms, 'Quad');\n}\n\nexports.getQuads = getQuads;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-terms/lib/TermUtil.js"],"names":["Object","defineProperty","exports","value","TERM_TYPES","uniqTerms","terms","require","termA","termB","equals","getTermsOfType","termType","filter","term","getNamedNodes","getBlankNodes","getLiterals","getVariables","getDefaultGraphs","getQuads"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACAD,OAAO,CAACE,UAAR,GAAqB,CAAC,WAAD,EAAc,WAAd,EAA2B,SAA3B,EAAsC,UAAtC,EAAkD,cAAlD,EAAkE,MAAlE,CAArB;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,SAAOC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,KAA3B,EAAkC,CAACE,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,MAAN,CAAaD,KAAb,CAApD,CAAP;AACH;;AACDP,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASM,cAAT,CAAwBL,KAAxB,EAA+BM,QAA/B,EAAyC;AACrC,SAAON,KAAK,CAACO,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACF,QAAL,KAAkBA,QAAzC,CAAP;AACH;;AACDV,OAAO,CAACS,cAAR,GAAyBA,cAAzB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,aAAT,CAAuBT,KAAvB,EAA8B;AAC1B,SAAOK,cAAc,CAACL,KAAD,EAAQ,WAAR,CAArB;AACH;;AACDJ,OAAO,CAACa,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBV,KAAvB,EAA8B;AAC1B,SAAOK,cAAc,CAACL,KAAD,EAAQ,WAAR,CAArB;AACH;;AACDJ,OAAO,CAACc,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBX,KAArB,EAA4B;AACxB,SAAOK,cAAc,CAACL,KAAD,EAAQ,SAAR,CAArB;AACH;;AACDJ,OAAO,CAACe,WAAR,GAAsBA,WAAtB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBZ,KAAtB,EAA6B;AACzB,SAAOK,cAAc,CAACL,KAAD,EAAQ,UAAR,CAArB;AACH;;AACDJ,OAAO,CAACgB,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0Bb,KAA1B,EAAiC;AAC7B,SAAOK,cAAc,CAACL,KAAD,EAAQ,cAAR,CAArB;AACH;;AACDJ,OAAO,CAACiB,gBAAR,GAA2BA,gBAA3B;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBd,KAAlB,EAAyB;AACrB,SAAOK,cAAc,CAACL,KAAD,EAAQ,MAAR,CAArB;AACH;;AACDJ,OAAO,CAACkB,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * All known term types.\n * @see RDF.Term\n * @type {[string , string , string , string , string, string]}\n */\nexports.TERM_TYPES = ['NamedNode', 'BlankNode', 'Literal', 'Variable', 'DefaultGraph', 'Quad'];\n/*\n * Utility methods for handling RDFJS terms.\n */\n/**\n * Create an array of unique terms from the given array.\n * @param {T[]} terms An array of RDFJS terms.\n * @return {T[]} A new array of unique RDFJS terms.\n */\nfunction uniqTerms(terms) {\n    return require('lodash.uniqwith')(terms, (termA, termB) => termA.equals(termB));\n}\nexports.uniqTerms = uniqTerms;\n/**\n * Find all terms of the given type in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @param {\"NamedNode\" | \"BlankNode\" | \"Literal\" | \"Variable\" | \"DefaultGraph\" | \"Quad\"} termType A term type.\n * @return {Term[]} A new array with elements from the given array only containing elements of the given type.\n */\nfunction getTermsOfType(terms, termType) {\n    return terms.filter((term) => term.termType === termType);\n}\nexports.getTermsOfType = getTermsOfType;\n/**\n * Find all named nodes in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {NamedNode[]} A new array with elements from the given array only containing named nodes.\n */\nfunction getNamedNodes(terms) {\n    return getTermsOfType(terms, 'NamedNode');\n}\nexports.getNamedNodes = getNamedNodes;\n/**\n * Find all blank nodes in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {BlankNode[]} A new array with elements from the given array only containing blank nodes.\n */\nfunction getBlankNodes(terms) {\n    return getTermsOfType(terms, 'BlankNode');\n}\nexports.getBlankNodes = getBlankNodes;\n/**\n * Find all literals in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {Literal[]} A new array with elements from the given array only containing literals.\n */\nfunction getLiterals(terms) {\n    return getTermsOfType(terms, 'Literal');\n}\nexports.getLiterals = getLiterals;\n/**\n * Find all variables in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {Variable[]} A new array with elements from the given array only containing variables.\n */\nfunction getVariables(terms) {\n    return getTermsOfType(terms, 'Variable');\n}\nexports.getVariables = getVariables;\n/**\n * Find all default graphs in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {DefaultGraph[]} A new array with elements from the given array only containing default graphs.\n */\nfunction getDefaultGraphs(terms) {\n    return getTermsOfType(terms, 'DefaultGraph');\n}\nexports.getDefaultGraphs = getDefaultGraphs;\n/**\n * Find all quads in the given array.\n * @param {Term[]} terms An array of RDFJS terms.\n * @return {BaseQuad[]} A new array with elements from the given array only containing quads.\n */\nfunction getQuads(terms) {\n    return getTermsOfType(terms, 'Quad');\n}\nexports.getQuads = getQuads;\n//# sourceMappingURL=TermUtil.js.map"]},"metadata":{},"sourceType":"script"}