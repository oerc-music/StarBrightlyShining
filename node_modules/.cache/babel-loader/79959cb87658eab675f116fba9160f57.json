{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto'); // Delimeter to separate object items form each other\n// when stringifying\n\n\nconst DELIM = '|';\n/**\n * Stringifies a JSON object (not any randon JS object).\n *\n * It should be noted that JS objects can have members of\n * specific type (e.g. function), that are not supported\n * by JSON.\n *\n * @param {Object} obj JSON object\n * @returns {String} stringified JSON object.\n */\n\nfunction stringify(obj) {\n  if (Array.isArray(obj)) {\n    let stringifiedArr = [];\n\n    for (let i = 0; i < obj.length; i++) {\n      stringifiedArr[i] = stringify(obj[i]);\n    }\n\n    return JSON.stringify(stringifiedArr);\n  } else if (typeof obj === 'object' && obj !== null) {\n    let acc = [];\n    let sortedKeys = Object.keys(obj).sort();\n\n    for (let i = 0; i < sortedKeys.length; i++) {\n      let k = sortedKeys[i];\n      acc[i] = `${k}:${stringify(obj[k])}`;\n    }\n\n    return acc.join(DELIM);\n  }\n\n  return obj;\n}\n/**\n * Creates hash of given JSON object.\n *\n * @param {Object} obj JSON object\n * @param {String} hashAlgorithm hash algorithm (e.g. SHA256)\n * @param {String} encoding hash encoding (e.g. base64) or none for buffer\n * @see #stringify\n */\n\n\nfunction digest(obj, hashAlgorithm, encoding) {\n  let hash = crypto.createHash(hashAlgorithm);\n  return hash.update(stringify(obj)).digest(encoding);\n}\n\nmodule.exports = {\n  stringify: stringify,\n  digest: digest\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/jsum/index.js"],"names":["crypto","require","DELIM","stringify","obj","Array","isArray","stringifiedArr","i","length","JSON","acc","sortedKeys","Object","keys","sort","k","join","digest","hashAlgorithm","encoding","hash","createHash","update","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;AACA;;;AACA,MAAMC,KAAK,GAAG,GAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtB,QAAIG,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCD,MAAAA,cAAc,CAACC,CAAD,CAAd,GAAoBL,SAAS,CAACC,GAAG,CAACI,CAAD,CAAJ,CAA7B;AACD;;AAED,WAAOE,IAAI,CAACP,SAAL,CAAeI,cAAf,CAAP;AACD,GAPD,MAOO,IAAI,OAAOH,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;AAClD,QAAIO,GAAG,GAAG,EAAV;AACA,QAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYV,GAAZ,EAAiBW,IAAjB,EAAjB;;AAEA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,UAAU,CAACH,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,UAAIQ,CAAC,GAAGJ,UAAU,CAACJ,CAAD,CAAlB;AACAG,MAAAA,GAAG,CAACH,CAAD,CAAH,GAAU,GAAEQ,CAAE,IAAGb,SAAS,CAACC,GAAG,CAACY,CAAD,CAAJ,CAAS,EAAnC;AACD;;AAED,WAAOL,GAAG,CAACM,IAAJ,CAASf,KAAT,CAAP;AACD;;AAED,SAAOE,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,MAAT,CAAiBd,GAAjB,EAAsBe,aAAtB,EAAqCC,QAArC,EAA+C;AAC7C,MAAIC,IAAI,GAAGrB,MAAM,CAACsB,UAAP,CAAkBH,aAAlB,CAAX;AACA,SAAOE,IAAI,CAACE,MAAL,CAAYpB,SAAS,CAACC,GAAD,CAArB,EAA4Bc,MAA5B,CAAmCE,QAAnC,CAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,SAAS,EAAEA,SADI;AAEfe,EAAAA,MAAM,EAAEA;AAFO,CAAjB","sourcesContent":["'use strict'\n\nconst crypto = require('crypto')\n\n// Delimeter to separate object items form each other\n// when stringifying\nconst DELIM = '|'\n\n/**\n * Stringifies a JSON object (not any randon JS object).\n *\n * It should be noted that JS objects can have members of\n * specific type (e.g. function), that are not supported\n * by JSON.\n *\n * @param {Object} obj JSON object\n * @returns {String} stringified JSON object.\n */\nfunction stringify (obj) {\n  if (Array.isArray(obj)) {\n    let stringifiedArr = []\n    for (let i = 0; i < obj.length; i++) {\n      stringifiedArr[i] = stringify(obj[i])\n    }\n\n    return JSON.stringify(stringifiedArr)\n  } else if (typeof obj === 'object' && obj !== null) {\n    let acc = []\n    let sortedKeys = Object.keys(obj).sort()\n\n    for (let i = 0; i < sortedKeys.length; i++) {\n      let k = sortedKeys[i]\n      acc[i] = `${k}:${stringify(obj[k])}`\n    }\n\n    return acc.join(DELIM)\n  }\n\n  return obj\n}\n\n/**\n * Creates hash of given JSON object.\n *\n * @param {Object} obj JSON object\n * @param {String} hashAlgorithm hash algorithm (e.g. SHA256)\n * @param {String} encoding hash encoding (e.g. base64) or none for buffer\n * @see #stringify\n */\nfunction digest (obj, hashAlgorithm, encoding) {\n  let hash = crypto.createHash(hashAlgorithm)\n  return hash.update(stringify(obj)).digest(encoding)\n}\n\nmodule.exports = {\n  stringify: stringify,\n  digest: digest\n}\n"]},"metadata":{},"sourceType":"script"}