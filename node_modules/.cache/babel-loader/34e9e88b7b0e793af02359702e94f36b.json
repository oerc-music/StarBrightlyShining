{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfMetadataExtractHydraCount = void 0;\n\nconst bus_rdf_metadata_extract_1 = require(\"@comunica/bus-rdf-metadata-extract\");\n/**\n * An RDF Metadata Extract Actor that extracts total items counts from a metadata stream based on the given predicates.\n */\n\n\nclass ActorRdfMetadataExtractHydraCount extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {\n  constructor(args) {\n    super(args);\n  }\n\n  async test(action) {\n    return true;\n  }\n\n  run(action) {\n    return new Promise((resolve, reject) => {\n      // Forward errors\n      action.metadata.on('error', reject); // Immediately resolve when a value has been found.\n\n      action.metadata.on('data', quad => {\n        if (this.predicates.includes(quad.predicate.value)) {\n          resolve({\n            metadata: {\n              totalItems: Number.parseInt(quad.object.value, 10)\n            }\n          });\n        }\n      }); // If no value has been found, assume infinity.\n\n      action.metadata.on('end', () => {\n        resolve({\n          metadata: {\n            totalItems: Number.POSITIVE_INFINITY\n          }\n        });\n      });\n    });\n  }\n\n}\n\nexports.ActorRdfMetadataExtractHydraCount = ActorRdfMetadataExtractHydraCount;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-metadata-extract-hydra-count/lib/ActorRdfMetadataExtractHydraCount.js"],"names":["Object","defineProperty","exports","value","ActorRdfMetadataExtractHydraCount","bus_rdf_metadata_extract_1","require","ActorRdfMetadataExtract","constructor","args","test","action","run","Promise","resolve","reject","metadata","on","quad","predicates","includes","predicate","totalItems","Number","parseInt","object","POSITIVE_INFINITY"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iCAAR,GAA4C,KAAK,CAAjD;;AACA,MAAMC,0BAA0B,GAAGC,OAAO,CAAC,oCAAD,CAA1C;AACA;AACA;AACA;;;AACA,MAAMF,iCAAN,SAAgDC,0BAA0B,CAACE,uBAA3E,CAAmG;AAC/FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACDC,EAAAA,GAAG,CAACD,MAAD,EAAS;AACR,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC;AACAJ,MAAAA,MAAM,CAACK,QAAP,CAAgBC,EAAhB,CAAmB,OAAnB,EAA4BF,MAA5B,EAFoC,CAGpC;;AACAJ,MAAAA,MAAM,CAACK,QAAP,CAAgBC,EAAhB,CAAmB,MAAnB,EAA2BC,IAAI,IAAI;AAC/B,YAAI,KAAKC,UAAL,CAAgBC,QAAhB,CAAyBF,IAAI,CAACG,SAAL,CAAelB,KAAxC,CAAJ,EAAoD;AAChDW,UAAAA,OAAO,CAAC;AAAEE,YAAAA,QAAQ,EAAE;AAAEM,cAAAA,UAAU,EAAEC,MAAM,CAACC,QAAP,CAAgBN,IAAI,CAACO,MAAL,CAAYtB,KAA5B,EAAmC,EAAnC;AAAd;AAAZ,WAAD,CAAP;AACH;AACJ,OAJD,EAJoC,CASpC;;AACAQ,MAAAA,MAAM,CAACK,QAAP,CAAgBC,EAAhB,CAAmB,KAAnB,EAA0B,MAAM;AAC5BH,QAAAA,OAAO,CAAC;AAAEE,UAAAA,QAAQ,EAAE;AAAEM,YAAAA,UAAU,EAAEC,MAAM,CAACG;AAArB;AAAZ,SAAD,CAAP;AACH,OAFD;AAGH,KAbM,CAAP;AAcH;;AAtB8F;;AAwBnGxB,OAAO,CAACE,iCAAR,GAA4CA,iCAA5C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfMetadataExtractHydraCount = void 0;\nconst bus_rdf_metadata_extract_1 = require(\"@comunica/bus-rdf-metadata-extract\");\n/**\n * An RDF Metadata Extract Actor that extracts total items counts from a metadata stream based on the given predicates.\n */\nclass ActorRdfMetadataExtractHydraCount extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {\n    constructor(args) {\n        super(args);\n    }\n    async test(action) {\n        return true;\n    }\n    run(action) {\n        return new Promise((resolve, reject) => {\n            // Forward errors\n            action.metadata.on('error', reject);\n            // Immediately resolve when a value has been found.\n            action.metadata.on('data', quad => {\n                if (this.predicates.includes(quad.predicate.value)) {\n                    resolve({ metadata: { totalItems: Number.parseInt(quad.object.value, 10) } });\n                }\n            });\n            // If no value has been found, assume infinity.\n            action.metadata.on('end', () => {\n                resolve({ metadata: { totalItems: Number.POSITIVE_INFINITY } });\n            });\n        });\n    }\n}\nexports.ActorRdfMetadataExtractHydraCount = ActorRdfMetadataExtractHydraCount;\n//# sourceMappingURL=ActorRdfMetadataExtractHydraCount.js.map"]},"metadata":{},"sourceType":"script"}