{"ast":null,"code":"var escapeForXML = require('./escapeForXML');\n\nvar Stream = require('stream').Stream;\n\nvar DEFAULT_INDENT = '    ';\n\nfunction xml(input, options) {\n  if (typeof options !== 'object') {\n    options = {\n      indent: options\n    };\n  }\n\n  var stream = options.stream ? new Stream() : null,\n      output = \"\",\n      interrupted = false,\n      indent = !options.indent ? '' : options.indent === true ? DEFAULT_INDENT : options.indent,\n      instant = true;\n\n  function delay(func) {\n    if (!instant) {\n      func();\n    } else {\n      process.nextTick(func);\n    }\n  }\n\n  function append(interrupt, out) {\n    if (out !== undefined) {\n      output += out;\n    }\n\n    if (interrupt && !interrupted) {\n      stream = stream || new Stream();\n      interrupted = true;\n    }\n\n    if (interrupt && interrupted) {\n      var data = output;\n      delay(function () {\n        stream.emit('data', data);\n      });\n      output = \"\";\n    }\n  }\n\n  function add(value, last) {\n    format(append, resolve(value, indent, indent ? 1 : 0), last);\n  }\n\n  function end() {\n    if (stream) {\n      var data = output;\n      delay(function () {\n        stream.emit('data', data);\n        stream.emit('end');\n        stream.readable = false;\n        stream.emit('close');\n      });\n    }\n  }\n\n  function addXmlDeclaration(declaration) {\n    var encoding = declaration.encoding || 'UTF-8',\n        attr = {\n      version: '1.0',\n      encoding: encoding\n    };\n\n    if (declaration.standalone) {\n      attr.standalone = declaration.standalone;\n    }\n\n    add({\n      '?xml': {\n        _attr: attr\n      }\n    });\n    output = output.replace('/>', '?>');\n  } // disable delay delayed\n\n\n  delay(function () {\n    instant = false;\n  });\n\n  if (options.declaration) {\n    addXmlDeclaration(options.declaration);\n  }\n\n  if (input && input.forEach) {\n    input.forEach(function (value, i) {\n      var last;\n      if (i + 1 === input.length) last = end;\n      add(value, last);\n    });\n  } else {\n    add(input, end);\n  }\n\n  if (stream) {\n    stream.readable = true;\n    return stream;\n  }\n\n  return output;\n}\n\nfunction element() {\n  var input = Array.prototype.slice.call(arguments),\n      self = {\n    _elem: resolve(input)\n  };\n\n  self.push = function (input) {\n    if (!this.append) {\n      throw new Error(\"not assigned to a parent!\");\n    }\n\n    var that = this;\n    var indent = this._elem.indent;\n    format(this.append, resolve(input, indent, this._elem.icount + (indent ? 1 : 0)), function () {\n      that.append(true);\n    });\n  };\n\n  self.close = function (input) {\n    if (input !== undefined) {\n      this.push(input);\n    }\n\n    if (this.end) {\n      this.end();\n    }\n  };\n\n  return self;\n}\n\nfunction create_indent(character, count) {\n  return new Array(count || 0).join(character || '');\n}\n\nfunction resolve(data, indent, indent_count) {\n  indent_count = indent_count || 0;\n  var indent_spaces = create_indent(indent, indent_count);\n  var name;\n  var values = data;\n  var interrupt = false;\n\n  if (typeof data === 'object') {\n    var keys = Object.keys(data);\n    name = keys[0];\n    values = data[name];\n\n    if (values && values._elem) {\n      values._elem.name = name;\n      values._elem.icount = indent_count;\n      values._elem.indent = indent;\n      values._elem.indents = indent_spaces;\n      values._elem.interrupt = values;\n      return values._elem;\n    }\n  }\n\n  var attributes = [],\n      content = [];\n  var isStringContent;\n\n  function get_attributes(obj) {\n    var keys = Object.keys(obj);\n    keys.forEach(function (key) {\n      attributes.push(attribute(key, obj[key]));\n    });\n  }\n\n  switch (typeof values) {\n    case 'object':\n      if (values === null) break;\n\n      if (values._attr) {\n        get_attributes(values._attr);\n      }\n\n      if (values._cdata) {\n        content.push(('<![CDATA[' + values._cdata).replace(/\\]\\]>/g, ']]]]><![CDATA[>') + ']]>');\n      }\n\n      if (values.forEach) {\n        isStringContent = false;\n        content.push('');\n        values.forEach(function (value) {\n          if (typeof value == 'object') {\n            var _name = Object.keys(value)[0];\n\n            if (_name == '_attr') {\n              get_attributes(value._attr);\n            } else {\n              content.push(resolve(value, indent, indent_count + 1));\n            }\n          } else {\n            //string\n            content.pop();\n            isStringContent = true;\n            content.push(escapeForXML(value));\n          }\n        });\n\n        if (!isStringContent) {\n          content.push('');\n        }\n      }\n\n      break;\n\n    default:\n      //string\n      content.push(escapeForXML(values));\n  }\n\n  return {\n    name: name,\n    interrupt: interrupt,\n    attributes: attributes,\n    content: content,\n    icount: indent_count,\n    indents: indent_spaces,\n    indent: indent\n  };\n}\n\nfunction format(append, elem, end) {\n  if (typeof elem != 'object') {\n    return append(false, elem);\n  }\n\n  var len = elem.interrupt ? 1 : elem.content.length;\n\n  function proceed() {\n    while (elem.content.length) {\n      var value = elem.content.shift();\n      if (value === undefined) continue;\n      if (interrupt(value)) return;\n      format(append, value);\n    }\n\n    append(false, (len > 1 ? elem.indents : '') + (elem.name ? '</' + elem.name + '>' : '') + (elem.indent && !end ? '\\n' : ''));\n\n    if (end) {\n      end();\n    }\n  }\n\n  function interrupt(value) {\n    if (value.interrupt) {\n      value.interrupt.append = append;\n      value.interrupt.end = proceed;\n      value.interrupt = false;\n      append(true);\n      return true;\n    }\n\n    return false;\n  }\n\n  append(false, elem.indents + (elem.name ? '<' + elem.name : '') + (elem.attributes.length ? ' ' + elem.attributes.join(' ') : '') + (len ? elem.name ? '>' : '' : elem.name ? '/>' : '') + (elem.indent && len > 1 ? '\\n' : ''));\n\n  if (!len) {\n    return append(false, elem.indent ? '\\n' : '');\n  }\n\n  if (!interrupt(elem)) {\n    proceed();\n  }\n}\n\nfunction attribute(key, value) {\n  return key + '=' + '\"' + escapeForXML(value) + '\"';\n}\n\nmodule.exports = xml;\nmodule.exports.element = module.exports.Element = element;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/xml/lib/xml.js"],"names":["escapeForXML","require","Stream","DEFAULT_INDENT","xml","input","options","indent","stream","output","interrupted","instant","delay","func","process","nextTick","append","interrupt","out","undefined","data","emit","add","value","last","format","resolve","end","readable","addXmlDeclaration","declaration","encoding","attr","version","standalone","_attr","replace","forEach","i","length","element","Array","prototype","slice","call","arguments","self","_elem","push","Error","that","icount","close","create_indent","character","count","join","indent_count","indent_spaces","name","values","keys","Object","indents","attributes","content","isStringContent","get_attributes","obj","key","attribute","_cdata","_name","pop","elem","len","proceed","shift","module","exports","Element"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAA/B;;AAEA,IAAIC,cAAc,GAAG,MAArB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoBC,OAApB,EAA6B;AAEzB,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7BA,IAAAA,OAAO,GAAG;AACNC,MAAAA,MAAM,EAAED;AADF,KAAV;AAGH;;AAED,MAAIE,MAAM,GAAQF,OAAO,CAACE,MAAR,GAAiB,IAAIN,MAAJ,EAAjB,GAAgC,IAAlD;AAAA,MACIO,MAAM,GAAQ,EADlB;AAAA,MAEIC,WAAW,GAAG,KAFlB;AAAA,MAGIH,MAAM,GAAQ,CAACD,OAAO,CAACC,MAAT,GAAkB,EAAlB,GACID,OAAO,CAACC,MAAR,KAAmB,IAAnB,GAA0BJ,cAA1B,GACIG,OAAO,CAACC,MALlC;AAAA,MAMII,OAAO,GAAO,IANlB;;AASA,WAASC,KAAT,CAAgBC,IAAhB,EAAsB;AAClB,QAAI,CAACF,OAAL,EAAc;AACVE,MAAAA,IAAI;AACP,KAFD,MAEO;AACHC,MAAAA,OAAO,CAACC,QAAR,CAAiBF,IAAjB;AACH;AACJ;;AAED,WAASG,MAAT,CAAiBC,SAAjB,EAA4BC,GAA5B,EAAiC;AAC7B,QAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACnBV,MAAAA,MAAM,IAAIS,GAAV;AACH;;AACD,QAAID,SAAS,IAAI,CAACP,WAAlB,EAA+B;AAC3BF,MAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIN,MAAJ,EAAnB;AACAQ,MAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAIO,SAAS,IAAIP,WAAjB,EAA8B;AAC1B,UAAIU,IAAI,GAAGX,MAAX;AACAG,MAAAA,KAAK,CAAC,YAAY;AAAEJ,QAAAA,MAAM,CAACa,IAAP,CAAY,MAAZ,EAAoBD,IAApB;AAA2B,OAA1C,CAAL;AACAX,MAAAA,MAAM,GAAG,EAAT;AACH;AACJ;;AAED,WAASa,GAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2B;AACvBC,IAAAA,MAAM,CAACT,MAAD,EAASU,OAAO,CAACH,KAAD,EAAQhB,MAAR,EAAgBA,MAAM,GAAG,CAAH,GAAO,CAA7B,CAAhB,EAAiDiB,IAAjD,CAAN;AACH;;AAED,WAASG,GAAT,GAAe;AACX,QAAInB,MAAJ,EAAY;AACR,UAAIY,IAAI,GAAGX,MAAX;AACAG,MAAAA,KAAK,CAAC,YAAY;AAChBJ,QAAAA,MAAM,CAACa,IAAP,CAAY,MAAZ,EAAoBD,IAApB;AACAZ,QAAAA,MAAM,CAACa,IAAP,CAAY,KAAZ;AACAb,QAAAA,MAAM,CAACoB,QAAP,GAAkB,KAAlB;AACApB,QAAAA,MAAM,CAACa,IAAP,CAAY,OAAZ;AACD,OALI,CAAL;AAMH;AACJ;;AAED,WAASQ,iBAAT,CAA2BC,WAA3B,EAAwC;AACpC,QAAIC,QAAQ,GAAGD,WAAW,CAACC,QAAZ,IAAwB,OAAvC;AAAA,QACIC,IAAI,GAAI;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBF,MAAAA,QAAQ,EAAEA;AAA5B,KADZ;;AAGA,QAAID,WAAW,CAACI,UAAhB,EAA4B;AACxBF,MAAAA,IAAI,CAACE,UAAL,GAAkBJ,WAAW,CAACI,UAA9B;AACH;;AAEDZ,IAAAA,GAAG,CAAC;AAAC,cAAQ;AAAEa,QAAAA,KAAK,EAAEH;AAAT;AAAT,KAAD,CAAH;AACAvB,IAAAA,MAAM,GAAGA,MAAM,CAAC2B,OAAP,CAAe,IAAf,EAAqB,IAArB,CAAT;AACH,GAlEwB,CAoEzB;;;AACAxB,EAAAA,KAAK,CAAC,YAAY;AAAED,IAAAA,OAAO,GAAG,KAAV;AAAiB,GAAhC,CAAL;;AAEA,MAAIL,OAAO,CAACwB,WAAZ,EAAyB;AACrBD,IAAAA,iBAAiB,CAACvB,OAAO,CAACwB,WAAT,CAAjB;AACH;;AAED,MAAIzB,KAAK,IAAIA,KAAK,CAACgC,OAAnB,EAA4B;AACxBhC,IAAAA,KAAK,CAACgC,OAAN,CAAc,UAAUd,KAAV,EAAiBe,CAAjB,EAAoB;AAC9B,UAAId,IAAJ;AACA,UAAIc,CAAC,GAAG,CAAJ,KAAUjC,KAAK,CAACkC,MAApB,EACIf,IAAI,GAAGG,GAAP;AACJL,MAAAA,GAAG,CAACC,KAAD,EAAQC,IAAR,CAAH;AACH,KALD;AAMH,GAPD,MAOO;AACHF,IAAAA,GAAG,CAACjB,KAAD,EAAQsB,GAAR,CAAH;AACH;;AAED,MAAInB,MAAJ,EAAY;AACRA,IAAAA,MAAM,CAACoB,QAAP,GAAkB,IAAlB;AACA,WAAOpB,MAAP;AACH;;AACD,SAAOC,MAAP;AACH;;AAED,SAAS+B,OAAT,GAAgC;AAC5B,MAAInC,KAAK,GAAGoC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAZ;AAAA,MACIC,IAAI,GAAG;AACHC,IAAAA,KAAK,EAAGrB,OAAO,CAACrB,KAAD;AADZ,GADX;;AAKAyC,EAAAA,IAAI,CAACE,IAAL,GAAY,UAAU3C,KAAV,EAAiB;AACzB,QAAI,CAAC,KAAKW,MAAV,EAAkB;AACd,YAAM,IAAIiC,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,QAAIC,IAAI,GAAG,IAAX;AACA,QAAI3C,MAAM,GAAG,KAAKwC,KAAL,CAAWxC,MAAxB;AACAkB,IAAAA,MAAM,CAAC,KAAKT,MAAN,EAAcU,OAAO,CACvBrB,KADuB,EAChBE,MADgB,EACR,KAAKwC,KAAL,CAAWI,MAAX,IAAqB5C,MAAM,GAAG,CAAH,GAAO,CAAlC,CADQ,CAArB,EAEF,YAAY;AAAE2C,MAAAA,IAAI,CAAClC,MAAL,CAAY,IAAZ;AAAmB,KAF/B,CAAN;AAGH,GATD;;AAWA8B,EAAAA,IAAI,CAACM,KAAL,GAAa,UAAU/C,KAAV,EAAiB;AAC1B,QAAIA,KAAK,KAAKc,SAAd,EAAyB;AACrB,WAAK6B,IAAL,CAAU3C,KAAV;AACH;;AACD,QAAI,KAAKsB,GAAT,EAAc;AACV,WAAKA,GAAL;AACH;AACJ,GAPD;;AASA,SAAOmB,IAAP;AACH;;AAED,SAASO,aAAT,CAAuBC,SAAvB,EAAkCC,KAAlC,EAAyC;AACrC,SAAQ,IAAId,KAAJ,CAAUc,KAAK,IAAI,CAAnB,EAAsBC,IAAtB,CAA2BF,SAAS,IAAI,EAAxC,CAAR;AACH;;AAED,SAAS5B,OAAT,CAAiBN,IAAjB,EAAuBb,MAAvB,EAA+BkD,YAA/B,EAA6C;AACzCA,EAAAA,YAAY,GAAGA,YAAY,IAAI,CAA/B;AACA,MAAIC,aAAa,GAAGL,aAAa,CAAC9C,MAAD,EAASkD,YAAT,CAAjC;AACA,MAAIE,IAAJ;AACA,MAAIC,MAAM,GAAGxC,IAAb;AACA,MAAIH,SAAS,GAAG,KAAhB;;AAEA,MAAI,OAAOG,IAAP,KAAgB,QAApB,EAA8B;AAC1B,QAAIyC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYzC,IAAZ,CAAX;AACAuC,IAAAA,IAAI,GAAGE,IAAI,CAAC,CAAD,CAAX;AACAD,IAAAA,MAAM,GAAGxC,IAAI,CAACuC,IAAD,CAAb;;AAEA,QAAIC,MAAM,IAAIA,MAAM,CAACb,KAArB,EAA4B;AACxBa,MAAAA,MAAM,CAACb,KAAP,CAAaY,IAAb,GAAoBA,IAApB;AACAC,MAAAA,MAAM,CAACb,KAAP,CAAaI,MAAb,GAAsBM,YAAtB;AACAG,MAAAA,MAAM,CAACb,KAAP,CAAaxC,MAAb,GAAsBA,MAAtB;AACAqD,MAAAA,MAAM,CAACb,KAAP,CAAagB,OAAb,GAAuBL,aAAvB;AACAE,MAAAA,MAAM,CAACb,KAAP,CAAa9B,SAAb,GAAyB2C,MAAzB;AACA,aAAOA,MAAM,CAACb,KAAd;AACH;AACJ;;AAED,MAAIiB,UAAU,GAAG,EAAjB;AAAA,MACIC,OAAO,GAAG,EADd;AAGA,MAAIC,eAAJ;;AAEA,WAASC,cAAT,CAAwBC,GAAxB,EAA4B;AACxB,QAAIP,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYO,GAAZ,CAAX;AACAP,IAAAA,IAAI,CAACxB,OAAL,CAAa,UAASgC,GAAT,EAAa;AACtBL,MAAAA,UAAU,CAAChB,IAAX,CAAgBsB,SAAS,CAACD,GAAD,EAAMD,GAAG,CAACC,GAAD,CAAT,CAAzB;AACH,KAFD;AAGH;;AAED,UAAO,OAAOT,MAAd;AACI,SAAK,QAAL;AACI,UAAIA,MAAM,KAAK,IAAf,EAAqB;;AAErB,UAAIA,MAAM,CAACzB,KAAX,EAAkB;AACdgC,QAAAA,cAAc,CAACP,MAAM,CAACzB,KAAR,CAAd;AACH;;AAED,UAAIyB,MAAM,CAACW,MAAX,EAAmB;AACfN,QAAAA,OAAO,CAACjB,IAAR,CACI,CAAC,cAAcY,MAAM,CAACW,MAAtB,EAA8BnC,OAA9B,CAAsC,QAAtC,EAAgD,iBAAhD,IAAqE,KADzE;AAGH;;AAED,UAAIwB,MAAM,CAACvB,OAAX,EAAoB;AAChB6B,QAAAA,eAAe,GAAG,KAAlB;AACAD,QAAAA,OAAO,CAACjB,IAAR,CAAa,EAAb;AACAY,QAAAA,MAAM,CAACvB,OAAP,CAAe,UAASd,KAAT,EAAgB;AAC3B,cAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC1B,gBAAIiD,KAAK,GAAGV,MAAM,CAACD,IAAP,CAAYtC,KAAZ,EAAmB,CAAnB,CAAZ;;AAEA,gBAAIiD,KAAK,IAAI,OAAb,EAAsB;AAClBL,cAAAA,cAAc,CAAC5C,KAAK,CAACY,KAAP,CAAd;AACH,aAFD,MAEO;AACH8B,cAAAA,OAAO,CAACjB,IAAR,CAAatB,OAAO,CAChBH,KADgB,EACThB,MADS,EACDkD,YAAY,GAAG,CADd,CAApB;AAEH;AACJ,WATD,MASO;AACH;AACAQ,YAAAA,OAAO,CAACQ,GAAR;AACAP,YAAAA,eAAe,GAAC,IAAhB;AACAD,YAAAA,OAAO,CAACjB,IAAR,CAAahD,YAAY,CAACuB,KAAD,CAAzB;AACH;AAEJ,SAjBD;;AAkBA,YAAI,CAAC2C,eAAL,EAAsB;AAClBD,UAAAA,OAAO,CAACjB,IAAR,CAAa,EAAb;AACH;AACJ;;AACL;;AAEA;AACI;AACAiB,MAAAA,OAAO,CAACjB,IAAR,CAAahD,YAAY,CAAC4D,MAAD,CAAzB;AA3CR;;AA+CA,SAAO;AACHD,IAAAA,IAAI,EAAQA,IADT;AAEH1C,IAAAA,SAAS,EAAGA,SAFT;AAGH+C,IAAAA,UAAU,EAAEA,UAHT;AAIHC,IAAAA,OAAO,EAAKA,OAJT;AAKHd,IAAAA,MAAM,EAAMM,YALT;AAMHM,IAAAA,OAAO,EAAKL,aANT;AAOHnD,IAAAA,MAAM,EAAMA;AAPT,GAAP;AASH;;AAED,SAASkB,MAAT,CAAgBT,MAAhB,EAAwB0D,IAAxB,EAA8B/C,GAA9B,EAAmC;AAE/B,MAAI,OAAO+C,IAAP,IAAe,QAAnB,EAA6B;AACzB,WAAO1D,MAAM,CAAC,KAAD,EAAQ0D,IAAR,CAAb;AACH;;AAED,MAAIC,GAAG,GAAGD,IAAI,CAACzD,SAAL,GAAiB,CAAjB,GAAqByD,IAAI,CAACT,OAAL,CAAa1B,MAA5C;;AAEA,WAASqC,OAAT,GAAoB;AAChB,WAAOF,IAAI,CAACT,OAAL,CAAa1B,MAApB,EAA4B;AACxB,UAAIhB,KAAK,GAAGmD,IAAI,CAACT,OAAL,CAAaY,KAAb,EAAZ;AAEA,UAAItD,KAAK,KAAKJ,SAAd,EAAyB;AACzB,UAAIF,SAAS,CAACM,KAAD,CAAb,EAAsB;AAEtBE,MAAAA,MAAM,CAACT,MAAD,EAASO,KAAT,CAAN;AACH;;AAEDP,IAAAA,MAAM,CAAC,KAAD,EAAQ,CAAC2D,GAAG,GAAG,CAAN,GAAUD,IAAI,CAACX,OAAf,GAAyB,EAA1B,KACPW,IAAI,CAACf,IAAL,GAAY,OAAOe,IAAI,CAACf,IAAZ,GAAmB,GAA/B,GAAqC,EAD9B,KAEPe,IAAI,CAACnE,MAAL,IAAe,CAACoB,GAAhB,GAAsB,IAAtB,GAA6B,EAFtB,CAAR,CAAN;;AAIA,QAAIA,GAAJ,EAAS;AACLA,MAAAA,GAAG;AACN;AACJ;;AAED,WAASV,SAAT,CAAmBM,KAAnB,EAA0B;AACvB,QAAIA,KAAK,CAACN,SAAV,EAAqB;AACjBM,MAAAA,KAAK,CAACN,SAAN,CAAgBD,MAAhB,GAAyBA,MAAzB;AACAO,MAAAA,KAAK,CAACN,SAAN,CAAgBU,GAAhB,GAAsBiD,OAAtB;AACArD,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAD,MAAAA,MAAM,CAAC,IAAD,CAAN;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACF;;AAEDA,EAAAA,MAAM,CAAC,KAAD,EAAQ0D,IAAI,CAACX,OAAL,IACPW,IAAI,CAACf,IAAL,GAAY,MAAMe,IAAI,CAACf,IAAvB,GAA8B,EADvB,KAEPe,IAAI,CAACV,UAAL,CAAgBzB,MAAhB,GAAyB,MAAMmC,IAAI,CAACV,UAAL,CAAgBR,IAAhB,CAAqB,GAArB,CAA/B,GAA2D,EAFpD,KAGPmB,GAAG,GAAID,IAAI,CAACf,IAAL,GAAY,GAAZ,GAAkB,EAAtB,GAA6Be,IAAI,CAACf,IAAL,GAAY,IAAZ,GAAmB,EAH5C,KAIPe,IAAI,CAACnE,MAAL,IAAeoE,GAAG,GAAG,CAArB,GAAyB,IAAzB,GAAgC,EAJzB,CAAR,CAAN;;AAMA,MAAI,CAACA,GAAL,EAAU;AACN,WAAO3D,MAAM,CAAC,KAAD,EAAQ0D,IAAI,CAACnE,MAAL,GAAc,IAAd,GAAqB,EAA7B,CAAb;AACH;;AAED,MAAI,CAACU,SAAS,CAACyD,IAAD,CAAd,EAAsB;AAClBE,IAAAA,OAAO;AACV;AACJ;;AAED,SAASN,SAAT,CAAmBD,GAAnB,EAAwB9C,KAAxB,EAA+B;AAC3B,SAAO8C,GAAG,GAAG,GAAN,GAAY,GAAZ,GAAkBrE,YAAY,CAACuB,KAAD,CAA9B,GAAwC,GAA/C;AACH;;AAEDuD,MAAM,CAACC,OAAP,GAAiB3E,GAAjB;AACA0E,MAAM,CAACC,OAAP,CAAevC,OAAf,GAAyBsC,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBxC,OAAlD","sourcesContent":["var escapeForXML = require('./escapeForXML');\nvar Stream = require('stream').Stream;\n\nvar DEFAULT_INDENT = '    ';\n\nfunction xml(input, options) {\n\n    if (typeof options !== 'object') {\n        options = {\n            indent: options\n        };\n    }\n\n    var stream      = options.stream ? new Stream() : null,\n        output      = \"\",\n        interrupted = false,\n        indent      = !options.indent ? ''\n                        : options.indent === true ? DEFAULT_INDENT\n                            : options.indent,\n        instant     = true;\n\n\n    function delay (func) {\n        if (!instant) {\n            func();\n        } else {\n            process.nextTick(func);\n        }\n    }\n\n    function append (interrupt, out) {\n        if (out !== undefined) {\n            output += out;\n        }\n        if (interrupt && !interrupted) {\n            stream = stream || new Stream();\n            interrupted = true;\n        }\n        if (interrupt && interrupted) {\n            var data = output;\n            delay(function () { stream.emit('data', data) });\n            output = \"\";\n        }\n    }\n\n    function add (value, last) {\n        format(append, resolve(value, indent, indent ? 1 : 0), last);\n    }\n\n    function end() {\n        if (stream) {\n            var data = output;\n            delay(function () {\n              stream.emit('data', data);\n              stream.emit('end');\n              stream.readable = false;\n              stream.emit('close');\n            });\n        }\n    }\n\n    function addXmlDeclaration(declaration) {\n        var encoding = declaration.encoding || 'UTF-8',\n            attr =  { version: '1.0', encoding: encoding };\n\n        if (declaration.standalone) {\n            attr.standalone = declaration.standalone\n        }\n\n        add({'?xml': { _attr: attr } });\n        output = output.replace('/>', '?>');\n    }\n\n    // disable delay delayed\n    delay(function () { instant = false });\n\n    if (options.declaration) {\n        addXmlDeclaration(options.declaration);\n    }\n\n    if (input && input.forEach) {\n        input.forEach(function (value, i) {\n            var last;\n            if (i + 1 === input.length)\n                last = end;\n            add(value, last);\n        });\n    } else {\n        add(input, end);\n    }\n\n    if (stream) {\n        stream.readable = true;\n        return stream;\n    }\n    return output;\n}\n\nfunction element (/*input, …*/) {\n    var input = Array.prototype.slice.call(arguments),\n        self = {\n            _elem:  resolve(input)\n        };\n\n    self.push = function (input) {\n        if (!this.append) {\n            throw new Error(\"not assigned to a parent!\");\n        }\n        var that = this;\n        var indent = this._elem.indent;\n        format(this.append, resolve(\n            input, indent, this._elem.icount + (indent ? 1 : 0)),\n            function () { that.append(true) });\n    };\n\n    self.close = function (input) {\n        if (input !== undefined) {\n            this.push(input);\n        }\n        if (this.end) {\n            this.end();\n        }\n    };\n\n    return self;\n}\n\nfunction create_indent(character, count) {\n    return (new Array(count || 0).join(character || ''))\n}\n\nfunction resolve(data, indent, indent_count) {\n    indent_count = indent_count || 0;\n    var indent_spaces = create_indent(indent, indent_count);\n    var name;\n    var values = data;\n    var interrupt = false;\n\n    if (typeof data === 'object') {\n        var keys = Object.keys(data);\n        name = keys[0];\n        values = data[name];\n\n        if (values && values._elem) {\n            values._elem.name = name;\n            values._elem.icount = indent_count;\n            values._elem.indent = indent;\n            values._elem.indents = indent_spaces;\n            values._elem.interrupt = values;\n            return values._elem;\n        }\n    }\n\n    var attributes = [],\n        content = [];\n\n    var isStringContent;\n\n    function get_attributes(obj){\n        var keys = Object.keys(obj);\n        keys.forEach(function(key){\n            attributes.push(attribute(key, obj[key]));\n        });\n    }\n\n    switch(typeof values) {\n        case 'object':\n            if (values === null) break;\n\n            if (values._attr) {\n                get_attributes(values._attr);\n            }\n\n            if (values._cdata) {\n                content.push(\n                    ('<![CDATA[' + values._cdata).replace(/\\]\\]>/g, ']]]]><![CDATA[>') + ']]>'\n                );\n            }\n\n            if (values.forEach) {\n                isStringContent = false;\n                content.push('');\n                values.forEach(function(value) {\n                    if (typeof value == 'object') {\n                        var _name = Object.keys(value)[0];\n\n                        if (_name == '_attr') {\n                            get_attributes(value._attr);\n                        } else {\n                            content.push(resolve(\n                                value, indent, indent_count + 1));\n                        }\n                    } else {\n                        //string\n                        content.pop();\n                        isStringContent=true;\n                        content.push(escapeForXML(value));\n                    }\n\n                });\n                if (!isStringContent) {\n                    content.push('');\n                }\n            }\n        break;\n\n        default:\n            //string\n            content.push(escapeForXML(values));\n\n    }\n\n    return {\n        name:       name,\n        interrupt:  interrupt,\n        attributes: attributes,\n        content:    content,\n        icount:     indent_count,\n        indents:    indent_spaces,\n        indent:     indent\n    };\n}\n\nfunction format(append, elem, end) {\n\n    if (typeof elem != 'object') {\n        return append(false, elem);\n    }\n\n    var len = elem.interrupt ? 1 : elem.content.length;\n\n    function proceed () {\n        while (elem.content.length) {\n            var value = elem.content.shift();\n\n            if (value === undefined) continue;\n            if (interrupt(value)) return;\n\n            format(append, value);\n        }\n\n        append(false, (len > 1 ? elem.indents : '')\n            + (elem.name ? '</' + elem.name + '>' : '')\n            + (elem.indent && !end ? '\\n' : ''));\n\n        if (end) {\n            end();\n        }\n    }\n\n    function interrupt(value) {\n       if (value.interrupt) {\n           value.interrupt.append = append;\n           value.interrupt.end = proceed;\n           value.interrupt = false;\n           append(true);\n           return true;\n       }\n       return false;\n    }\n\n    append(false, elem.indents\n        + (elem.name ? '<' + elem.name : '')\n        + (elem.attributes.length ? ' ' + elem.attributes.join(' ') : '')\n        + (len ? (elem.name ? '>' : '') : (elem.name ? '/>' : ''))\n        + (elem.indent && len > 1 ? '\\n' : ''));\n\n    if (!len) {\n        return append(false, elem.indent ? '\\n' : '');\n    }\n\n    if (!interrupt(elem)) {\n        proceed();\n    }\n}\n\nfunction attribute(key, value) {\n    return key + '=' + '\"' + escapeForXML(value) + '\"';\n}\n\nmodule.exports = xml;\nmodule.exports.element = module.exports.Element = element;\n"]},"metadata":{},"sourceType":"script"}