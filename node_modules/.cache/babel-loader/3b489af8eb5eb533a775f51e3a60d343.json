{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.order = exports.orderTypes = void 0;\n\nconst Transformation_1 = require(\"../Transformation\"); // Determine the relative numerical order of the two given terms.\n\n\nfunction orderTypes(litA, litB, isAscending) {\n  if (litA && litA.termType === 'Literal' && litB && litB.termType === 'Literal') {\n    const a = Transformation_1.transformLiteral(litA);\n    const b = Transformation_1.transformLiteral(litB);\n    return order(a, b, isAscending);\n  } else {\n    return 0;\n  }\n}\n\nexports.orderTypes = orderTypes; // Effective ordering\n\nfunction order(orderA, orderB, isAscending) {\n  if (orderA.typedValue === orderB.typedValue) {\n    return 0;\n  }\n\n  return orderA.typedValue > orderB.typedValue === isAscending ? 1 : -1;\n}\n\nexports.order = order;","map":{"version":3,"sources":["../../../lib/util/Ordering.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,gBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA,C,CAEA;;;AACA,SAAgB,UAAhB,CAA2B,IAA3B,EAAuD,IAAvD,EAAmF,WAAnF,EAAsG;AAClG,MAAI,IAAI,IAAI,IAAI,CAAC,QAAL,KAAkB,SAA1B,IAAuC,IAAvC,IAA+C,IAAI,CAAC,QAAL,KAAkB,SAArE,EAAgF;AAC5E,UAAM,CAAC,GAAG,gBAAA,CAAA,gBAAA,CAAiB,IAAjB,CAAV;AACA,UAAM,CAAC,GAAG,gBAAA,CAAA,gBAAA,CAAiB,IAAjB,CAAV;AACA,WAAO,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,WAAP,CAAZ;AACH,GAJD,MAIO;AACH,WAAO,CAAP;AACH;AACJ;;AARD,OAAA,CAAA,UAAA,GAAA,UAAA,C,CAUA;;AACA,SAAgB,KAAhB,CAAsB,MAAtB,EAA8C,MAA9C,EAAsE,WAAtE,EAAyF;AACrF,MAAI,MAAM,CAAC,UAAP,KAAsB,MAAM,CAAC,UAAjC,EAA6C;AACzC,WAAO,CAAP;AACH;;AACD,SAAO,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,UAA3B,KAA0C,WAA1C,GAAwD,CAAxD,GAA4D,CAAC,CAApE;AACH;;AALD,OAAA,CAAA,KAAA,GAAA,KAAA","sourcesContent":["import * as RDF from 'rdf-js';\nimport * as T from '../expressions/Term';\nimport { transformLiteral } from '../Transformation';\n\n// Determine the relative numerical order of the two given terms.\nexport function orderTypes(litA: RDF.Term | undefined, litB: RDF.Term | undefined, isAscending:boolean){\n    if (litA && litA.termType === 'Literal' && litB && litB.termType === 'Literal') {\n        const a = transformLiteral(litA);\n        const b = transformLiteral(litB);\n        return order(a, b, isAscending);\n    } else {\n        return 0;\n    }\n}\n\n// Effective ordering\nexport function order(orderA: T.Literal<any>, orderB: T.Literal<any>, isAscending:boolean){\n    if (orderA.typedValue === orderB.typedValue) {\n        return 0;\n    }\n    return orderA.typedValue > orderB.typedValue === isAscending ? 1 : -1;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}