{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlSerializeSparqlXml = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nconst xml = require(\"xml\");\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\n\n\nclass ActorSparqlSerializeSparqlXml extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n  constructor(args) {\n    super(args);\n  }\n  /**\n   * Converts an RDF term to its object-based XML representation.\n   * @param {RDF.Term} value An RDF term.\n   * @param {string} key A variable name, '?' must be included as a prefix.\n   * @return {any} An object-based XML tag.\n   */\n\n\n  static bindingToXmlBindings(value, key) {\n    let xmlValue;\n\n    if (value.termType === 'Literal') {\n      const literal = value;\n      xmlValue = {\n        literal: literal.value\n      };\n      const {\n        language\n      } = literal;\n      const {\n        datatype\n      } = literal;\n\n      if (language) {\n        xmlValue.literal = [{\n          _attr: {\n            'xml:lang': language\n          }\n        }, xmlValue.literal];\n      } else if (datatype && datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n        xmlValue.literal = [{\n          _attr: {\n            datatype: datatype.value\n          }\n        }, xmlValue.literal];\n      }\n    } else if (value.termType === 'BlankNode') {\n      xmlValue = {\n        bnode: value.value\n      };\n    } else {\n      xmlValue = {\n        uri: value.value\n      };\n    }\n\n    return {\n      binding: [{\n        _attr: {\n          name: key.slice(1)\n        }\n      }, xmlValue]\n    };\n  }\n\n  async testHandleChecked(action, context) {\n    if (!['bindings', 'boolean'].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or booleans.');\n    }\n\n    return true;\n  }\n\n  async runHandle(action, mediaType, context) {\n    const data = new stream_1.Readable();\n\n    data._read = () => {// Do nothing\n    }; // Write head\n\n\n    const root = xml.element({\n      _attr: {\n        xlmns: 'http://www.w3.org/2005/sparql-results#'\n      }\n    });\n    xml({\n      sparql: root\n    }, {\n      stream: true,\n      indent: '  ',\n      declaration: true\n    }).on('data', chunk => data.push(`${chunk}\\n`));\n\n    if (action.type === 'bindings' && action.variables.length > 0) {\n      root.push({\n        head: action.variables.map(variable => ({\n          variable: {\n            _attr: {\n              name: variable.slice(1)\n            }\n          }\n        }))\n      });\n    }\n\n    if (action.type === 'bindings') {\n      const results = xml.element({});\n      root.push({\n        results\n      });\n      const resultStream = action.bindingsStream; // Write bindings\n\n      resultStream.on('error', error => {\n        data.emit('error', error);\n      });\n      resultStream.on('data', bindings => {\n        // XML SPARQL results spec does not allow unbound variables and blank node bindings\n        const realBindings = bindings.filter((value, key) => Boolean(value) && key.startsWith('?'));\n        results.push({\n          result: realBindings.map(ActorSparqlSerializeSparqlXml.bindingToXmlBindings)\n        });\n      }); // Close streams\n\n      resultStream.on('end', () => {\n        results.close();\n        root.close();\n        setImmediate(() => data.push(null));\n      });\n    } else {\n      try {\n        root.push({\n          boolean: await action.booleanResult\n        });\n        root.close();\n        setImmediate(() => data.push(null));\n      } catch (error) {\n        setImmediate(() => data.emit('error', error));\n      }\n    }\n\n    return {\n      data\n    };\n  }\n\n}\n\nexports.ActorSparqlSerializeSparqlXml = ActorSparqlSerializeSparqlXml;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-serialize-sparql-xml/lib/ActorSparqlSerializeSparqlXml.js"],"names":["Object","defineProperty","exports","value","ActorSparqlSerializeSparqlXml","stream_1","require","bus_sparql_serialize_1","xml","ActorSparqlSerializeFixedMediaTypes","constructor","args","bindingToXmlBindings","key","xmlValue","termType","literal","language","datatype","_attr","bnode","uri","binding","name","slice","testHandleChecked","action","context","includes","type","Error","runHandle","mediaType","data","Readable","_read","root","element","xlmns","sparql","stream","indent","declaration","on","chunk","push","variables","length","head","map","variable","results","resultStream","bindingsStream","error","emit","bindings","realBindings","filter","Boolean","startsWith","result","close","setImmediate","boolean","booleanResult"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlSerializeSparqlXml = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\nconst xml = require(\"xml\");\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\nclass ActorSparqlSerializeSparqlXml extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n    constructor(args) {\n        super(args);\n    }\n    /**\n     * Converts an RDF term to its object-based XML representation.\n     * @param {RDF.Term} value An RDF term.\n     * @param {string} key A variable name, '?' must be included as a prefix.\n     * @return {any} An object-based XML tag.\n     */\n    static bindingToXmlBindings(value, key) {\n        let xmlValue;\n        if (value.termType === 'Literal') {\n            const literal = value;\n            xmlValue = { literal: literal.value };\n            const { language } = literal;\n            const { datatype } = literal;\n            if (language) {\n                xmlValue.literal = [{ _attr: { 'xml:lang': language } }, xmlValue.literal];\n            }\n            else if (datatype && datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n                xmlValue.literal = [{ _attr: { datatype: datatype.value } }, xmlValue.literal];\n            }\n        }\n        else if (value.termType === 'BlankNode') {\n            xmlValue = { bnode: value.value };\n        }\n        else {\n            xmlValue = { uri: value.value };\n        }\n        return { binding: [{ _attr: { name: key.slice(1) } }, xmlValue] };\n    }\n    async testHandleChecked(action, context) {\n        if (!['bindings', 'boolean'].includes(action.type)) {\n            throw new Error('This actor can only handle bindings streams or booleans.');\n        }\n        return true;\n    }\n    async runHandle(action, mediaType, context) {\n        const data = new stream_1.Readable();\n        data._read = () => {\n            // Do nothing\n        };\n        // Write head\n        const root = xml.element({ _attr: { xlmns: 'http://www.w3.org/2005/sparql-results#' } });\n        xml({ sparql: root }, { stream: true, indent: '  ', declaration: true })\n            .on('data', chunk => data.push(`${chunk}\\n`));\n        if (action.type === 'bindings' && action.variables.length > 0) {\n            root.push({ head: action.variables\n                    .map(variable => ({ variable: { _attr: { name: variable.slice(1) } } })) });\n        }\n        if (action.type === 'bindings') {\n            const results = xml.element({});\n            root.push({ results });\n            const resultStream = action.bindingsStream;\n            // Write bindings\n            resultStream.on('error', (error) => {\n                data.emit('error', error);\n            });\n            resultStream.on('data', (bindings) => {\n                // XML SPARQL results spec does not allow unbound variables and blank node bindings\n                const realBindings = bindings.filter((value, key) => Boolean(value) && key.startsWith('?'));\n                results.push({ result: realBindings.map(ActorSparqlSerializeSparqlXml.bindingToXmlBindings) });\n            });\n            // Close streams\n            resultStream.on('end', () => {\n                results.close();\n                root.close();\n                setImmediate(() => data.push(null));\n            });\n        }\n        else {\n            try {\n                root.push({ boolean: await action.booleanResult });\n                root.close();\n                setImmediate(() => data.push(null));\n            }\n            catch (error) {\n                setImmediate(() => data.emit('error', error));\n            }\n        }\n        return { data };\n    }\n}\nexports.ActorSparqlSerializeSparqlXml = ActorSparqlSerializeSparqlXml;\n//# sourceMappingURL=ActorSparqlSerializeSparqlXml.js.map"]},"metadata":{},"sourceType":"script"}