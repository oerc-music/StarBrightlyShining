{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectiveNodeHandlerOptional = void 0;\n\nconst DirectiveNodeHandlerAdapter_1 = require(\"./DirectiveNodeHandlerAdapter\");\n/**\n * A handler for optional directives.\n */\n\n\nclass DirectiveNodeHandlerOptional extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {\n  constructor(util, settings) {\n    super('optional', util, settings);\n  }\n\n  handle(directiveContext, convertContext) {\n    return {\n      operationOverrider: operation => this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), operation)\n    };\n  }\n\n}\n\nexports.DirectiveNodeHandlerOptional = DirectiveNodeHandlerOptional;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerOptional.js"],"names":["Object","defineProperty","exports","value","DirectiveNodeHandlerOptional","DirectiveNodeHandlerAdapter_1","require","DirectiveNodeHandlerAdapter","constructor","util","settings","handle","directiveContext","convertContext","operationOverrider","operation","operationFactory","createLeftJoin","createBgp"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,4BAAR,GAAuC,KAAK,CAA5C;;AACA,MAAMC,6BAA6B,GAAGC,OAAO,CAAC,+BAAD,CAA7C;AACA;AACA;AACA;;;AACA,MAAMF,4BAAN,SAA2CC,6BAA6B,CAACE,2BAAzE,CAAqG;AACjGC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAM,UAAN,EAAkBD,IAAlB,EAAwBC,QAAxB;AACH;;AACDC,EAAAA,MAAM,CAACC,gBAAD,EAAmBC,cAAnB,EAAmC;AACrC,WAAO;AACHC,MAAAA,kBAAkB,EAAGC,SAAD,IAAe,KAAKN,IAAL,CAAUO,gBAAV,CAA2BC,cAA3B,CAA0C,KAAKR,IAAL,CAAUO,gBAAV,CAA2BE,SAA3B,CAAqC,EAArC,CAA1C,EAAoFH,SAApF;AADhC,KAAP;AAGH;;AARgG;;AAUrGb,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DirectiveNodeHandlerOptional = void 0;\nconst DirectiveNodeHandlerAdapter_1 = require(\"./DirectiveNodeHandlerAdapter\");\n/**\n * A handler for optional directives.\n */\nclass DirectiveNodeHandlerOptional extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {\n    constructor(util, settings) {\n        super('optional', util, settings);\n    }\n    handle(directiveContext, convertContext) {\n        return {\n            operationOverrider: (operation) => this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), operation),\n        };\n    }\n}\nexports.DirectiveNodeHandlerOptional = DirectiveNodeHandlerOptional;\n//# sourceMappingURL=DirectiveNodeHandlerOptional.js.map"]},"metadata":{},"sourceType":"script"}