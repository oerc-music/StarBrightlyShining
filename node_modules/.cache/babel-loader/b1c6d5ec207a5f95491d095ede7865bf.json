{"ast":null,"code":"function fromTerm(original) {\n  if (!original) {\n    return null;\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value);\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph();\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value));\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value);\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject);\n    const predicate = this.fromTerm(original.predicate);\n    const object = this.fromTerm(original.object);\n    const graph = this.fromTerm(original.graph);\n    return this.quad(subject, predicate, object, graph);\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value);\n  }\n\n  throw new Error(`unknown termType ${original.termType}`);\n}\n\nmodule.exports = fromTerm;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@rdfjs/data-model/lib/fromTerm.js"],"names":["fromTerm","original","termType","blankNode","value","defaultGraph","literal","language","namedNode","datatype","subject","predicate","object","graph","quad","variable","Error","module","exports"],"mappings":"AAAA,SAASA,QAAT,CAAmBC,QAAnB,EAA6B;AAC3B,MAAI,CAACA,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,MAAIA,QAAQ,CAACC,QAAT,KAAsB,WAA1B,EAAuC;AACrC,WAAO,KAAKC,SAAL,CAAeF,QAAQ,CAACG,KAAxB,CAAP;AACD;;AAED,MAAIH,QAAQ,CAACC,QAAT,KAAsB,cAA1B,EAA0C;AACxC,WAAO,KAAKG,YAAL,EAAP;AACD;;AAED,MAAIJ,QAAQ,CAACC,QAAT,KAAsB,SAA1B,EAAqC;AACnC,WAAO,KAAKI,OAAL,CAAaL,QAAQ,CAACG,KAAtB,EAA6BH,QAAQ,CAACM,QAAT,IAAqB,KAAKC,SAAL,CAAeP,QAAQ,CAACQ,QAAT,CAAkBL,KAAjC,CAAlD,CAAP;AACD;;AAED,MAAIH,QAAQ,CAACC,QAAT,KAAsB,WAA1B,EAAuC;AACrC,WAAO,KAAKM,SAAL,CAAeP,QAAQ,CAACG,KAAxB,CAAP;AACD;;AAED,MAAIH,QAAQ,CAACC,QAAT,KAAsB,MAA1B,EAAkC;AAChC,UAAMQ,OAAO,GAAG,KAAKV,QAAL,CAAcC,QAAQ,CAACS,OAAvB,CAAhB;AACA,UAAMC,SAAS,GAAG,KAAKX,QAAL,CAAcC,QAAQ,CAACU,SAAvB,CAAlB;AACA,UAAMC,MAAM,GAAG,KAAKZ,QAAL,CAAcC,QAAQ,CAACW,MAAvB,CAAf;AACA,UAAMC,KAAK,GAAG,KAAKb,QAAL,CAAcC,QAAQ,CAACY,KAAvB,CAAd;AAEA,WAAO,KAAKC,IAAL,CAAUJ,OAAV,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,KAAtC,CAAP;AACD;;AAED,MAAIZ,QAAQ,CAACC,QAAT,KAAsB,UAA1B,EAAsC;AACpC,WAAO,KAAKa,QAAL,CAAcd,QAAQ,CAACG,KAAvB,CAAP;AACD;;AAED,QAAM,IAAIY,KAAJ,CAAW,oBAAmBf,QAAQ,CAACC,QAAS,EAAhD,CAAN;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBlB,QAAjB","sourcesContent":["function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n"]},"metadata":{},"sourceType":"script"}