{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfResolveHypermediaQpf = void 0;\n\nconst bus_rdf_resolve_hypermedia_1 = require(\"@comunica/bus-rdf-resolve-hypermedia\");\n\nconst RdfSourceQpf_1 = require(\"./RdfSourceQpf\");\n/**\n * A comunica QPF RDF Resolve Quad Pattern Actor.\n */\n\n\nclass ActorRdfResolveHypermediaQpf extends bus_rdf_resolve_hypermedia_1.ActorRdfResolveHypermedia {\n  constructor(args) {\n    super(args, 'qpf');\n  }\n\n  async testMetadata(action) {\n    const {\n      searchForm\n    } = this.createSource(action.metadata, action.context);\n\n    if (action.handledDatasets && action.handledDatasets[searchForm.dataset]) {\n      throw new Error(`Actor ${this.name} can only be applied for the first page of a QPF dataset.`);\n    }\n\n    return {\n      filterFactor: 1\n    };\n  }\n  /**\n   * Look for the search form\n   * @param {IActionRdfResolveHypermedia} the metadata to look for the form.\n   * @return {Promise<IActorRdfResolveHypermediaOutput>} A promise resolving to a hypermedia form.\n   */\n\n\n  async run(action) {\n    this.logInfo(action.context, `Identified as qpf source: ${action.url}`);\n    const source = this.createSource(action.metadata, action.context, action.quads);\n    return {\n      source,\n      dataset: source.searchForm.dataset\n    };\n  }\n\n  createSource(metadata, context, quads) {\n    return new RdfSourceQpf_1.RdfSourceQpf(this.mediatorMetadata, this.mediatorMetadataExtract, this.mediatorRdfDereference, this.subjectUri, this.predicateUri, this.objectUri, this.graphUri, metadata, context, quads);\n  }\n\n}\n\nexports.ActorRdfResolveHypermediaQpf = ActorRdfResolveHypermediaQpf;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-resolve-hypermedia-qpf/lib/ActorRdfResolveHypermediaQpf.js"],"names":["Object","defineProperty","exports","value","ActorRdfResolveHypermediaQpf","bus_rdf_resolve_hypermedia_1","require","RdfSourceQpf_1","ActorRdfResolveHypermedia","constructor","args","testMetadata","action","searchForm","createSource","metadata","context","handledDatasets","dataset","Error","name","filterFactor","run","logInfo","url","source","quads","RdfSourceQpf","mediatorMetadata","mediatorMetadataExtract","mediatorRdfDereference","subjectUri","predicateUri","objectUri","graphUri"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,4BAAR,GAAuC,KAAK,CAA5C;;AACA,MAAMC,4BAA4B,GAAGC,OAAO,CAAC,sCAAD,CAA5C;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,gBAAD,CAA9B;AACA;AACA;AACA;;;AACA,MAAMF,4BAAN,SAA2CC,4BAA4B,CAACG,yBAAxE,CAAkG;AAC9FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,KAAZ;AACH;;AACiB,QAAZC,YAAY,CAACC,MAAD,EAAS;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAiB,KAAKC,YAAL,CAAkBF,MAAM,CAACG,QAAzB,EAAmCH,MAAM,CAACI,OAA1C,CAAvB;;AACA,QAAIJ,MAAM,CAACK,eAAP,IAA0BL,MAAM,CAACK,eAAP,CAAuBJ,UAAU,CAACK,OAAlC,CAA9B,EAA0E;AACtE,YAAM,IAAIC,KAAJ,CAAW,SAAQ,KAAKC,IAAK,2DAA7B,CAAN;AACH;;AACD,WAAO;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACa,QAAHC,GAAG,CAACV,MAAD,EAAS;AACd,SAAKW,OAAL,CAAaX,MAAM,CAACI,OAApB,EAA8B,6BAA4BJ,MAAM,CAACY,GAAI,EAArE;AACA,UAAMC,MAAM,GAAG,KAAKX,YAAL,CAAkBF,MAAM,CAACG,QAAzB,EAAmCH,MAAM,CAACI,OAA1C,EAAmDJ,MAAM,CAACc,KAA1D,CAAf;AACA,WAAO;AAAED,MAAAA,MAAF;AAAUP,MAAAA,OAAO,EAAEO,MAAM,CAACZ,UAAP,CAAkBK;AAArC,KAAP;AACH;;AACDJ,EAAAA,YAAY,CAACC,QAAD,EAAWC,OAAX,EAAoBU,KAApB,EAA2B;AACnC,WAAO,IAAInB,cAAc,CAACoB,YAAnB,CAAgC,KAAKC,gBAArC,EAAuD,KAAKC,uBAA5D,EAAqF,KAAKC,sBAA1F,EAAkH,KAAKC,UAAvH,EAAmI,KAAKC,YAAxI,EAAsJ,KAAKC,SAA3J,EAAsK,KAAKC,QAA3K,EAAqLnB,QAArL,EAA+LC,OAA/L,EAAwMU,KAAxM,CAAP;AACH;;AAvB6F;;AAyBlGxB,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfResolveHypermediaQpf = void 0;\nconst bus_rdf_resolve_hypermedia_1 = require(\"@comunica/bus-rdf-resolve-hypermedia\");\nconst RdfSourceQpf_1 = require(\"./RdfSourceQpf\");\n/**\n * A comunica QPF RDF Resolve Quad Pattern Actor.\n */\nclass ActorRdfResolveHypermediaQpf extends bus_rdf_resolve_hypermedia_1.ActorRdfResolveHypermedia {\n    constructor(args) {\n        super(args, 'qpf');\n    }\n    async testMetadata(action) {\n        const { searchForm } = this.createSource(action.metadata, action.context);\n        if (action.handledDatasets && action.handledDatasets[searchForm.dataset]) {\n            throw new Error(`Actor ${this.name} can only be applied for the first page of a QPF dataset.`);\n        }\n        return { filterFactor: 1 };\n    }\n    /**\n     * Look for the search form\n     * @param {IActionRdfResolveHypermedia} the metadata to look for the form.\n     * @return {Promise<IActorRdfResolveHypermediaOutput>} A promise resolving to a hypermedia form.\n     */\n    async run(action) {\n        this.logInfo(action.context, `Identified as qpf source: ${action.url}`);\n        const source = this.createSource(action.metadata, action.context, action.quads);\n        return { source, dataset: source.searchForm.dataset };\n    }\n    createSource(metadata, context, quads) {\n        return new RdfSourceQpf_1.RdfSourceQpf(this.mediatorMetadata, this.mediatorMetadataExtract, this.mediatorRdfDereference, this.subjectUri, this.predicateUri, this.objectUri, this.graphUri, metadata, context, quads);\n    }\n}\nexports.ActorRdfResolveHypermediaQpf = ActorRdfResolveHypermediaQpf;\n//# sourceMappingURL=ActorRdfResolveHypermediaQpf.js.map"]},"metadata":{},"sourceType":"script"}