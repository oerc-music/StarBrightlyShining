{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationPathSeq = void 0;\n\nconst actor_abstract_path_1 = require(\"@comunica/actor-abstract-path\");\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst rdf_string_1 = require(\"rdf-string\");\n\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica Path Seq Query Operation Actor.\n */\n\n\nclass ActorQueryOperationPathSeq extends actor_abstract_path_1.ActorAbstractPath {\n  constructor(args) {\n    super(args, sparqlalgebrajs_1.Algebra.types.SEQ);\n  }\n\n  async runOperation(path, context) {\n    const predicate = path.predicate;\n    const variable = this.generateVariable(path);\n    const varName = rdf_string_1.termToString(variable);\n    const subOperations = (await Promise.all([this.mediatorQueryOperation.mediate({\n      context,\n      operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.left, variable, path.graph)\n    }), this.mediatorQueryOperation.mediate({\n      context,\n      operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(variable, predicate.right, path.object, path.graph)\n    })])).map(op => bus_query_operation_1.ActorQueryOperation.getSafeBindings(op));\n    const join = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorJoin.mediate({\n      entries: subOperations\n    })); // Remove the generated variable from the bindings\n\n    const bindingsStream = join.bindingsStream.transform({\n      transform(item, next, push) {\n        push(item.delete(varName));\n        next();\n      }\n\n    }); // Remove the generated variable from the list of variables\n\n    const variables = join.variables;\n    const indexOfVar = variables.indexOf(varName);\n    variables.splice(indexOfVar, 1);\n    return {\n      type: 'bindings',\n      bindingsStream,\n      variables,\n      canContainUndefs: false\n    };\n  }\n\n}\n\nexports.ActorQueryOperationPathSeq = ActorQueryOperationPathSeq;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-path-seq/lib/ActorQueryOperationPathSeq.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationPathSeq","actor_abstract_path_1","require","bus_query_operation_1","rdf_string_1","sparqlalgebrajs_1","ActorAbstractPath","constructor","args","Algebra","types","SEQ","runOperation","path","context","predicate","variable","generateVariable","varName","termToString","subOperations","Promise","all","mediatorQueryOperation","mediate","operation","FACTORY","createPath","subject","left","graph","right","object","map","op","ActorQueryOperation","getSafeBindings","join","mediatorJoin","entries","bindingsStream","transform","item","next","push","delete","variables","indexOfVar","indexOf","splice","type","canContainUndefs"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationPathSeq = void 0;\nconst actor_abstract_path_1 = require(\"@comunica/actor-abstract-path\");\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst rdf_string_1 = require(\"rdf-string\");\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica Path Seq Query Operation Actor.\n */\nclass ActorQueryOperationPathSeq extends actor_abstract_path_1.ActorAbstractPath {\n    constructor(args) {\n        super(args, sparqlalgebrajs_1.Algebra.types.SEQ);\n    }\n    async runOperation(path, context) {\n        const predicate = path.predicate;\n        const variable = this.generateVariable(path);\n        const varName = rdf_string_1.termToString(variable);\n        const subOperations = (await Promise.all([\n            this.mediatorQueryOperation.mediate({\n                context, operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.left, variable, path.graph),\n            }),\n            this.mediatorQueryOperation.mediate({\n                context, operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(variable, predicate.right, path.object, path.graph),\n            }),\n        ])).map(op => bus_query_operation_1.ActorQueryOperation.getSafeBindings(op));\n        const join = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorJoin.mediate({ entries: subOperations }));\n        // Remove the generated variable from the bindings\n        const bindingsStream = join.bindingsStream.transform({\n            transform(item, next, push) {\n                push(item.delete(varName));\n                next();\n            },\n        });\n        // Remove the generated variable from the list of variables\n        const variables = join.variables;\n        const indexOfVar = variables.indexOf(varName);\n        variables.splice(indexOfVar, 1);\n        return { type: 'bindings', bindingsStream, variables, canContainUndefs: false };\n    }\n}\nexports.ActorQueryOperationPathSeq = ActorQueryOperationPathSeq;\n//# sourceMappingURL=ActorQueryOperationPathSeq.js.map"]},"metadata":{},"sourceType":"script"}