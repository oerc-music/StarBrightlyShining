{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntryHandlerKeywordIncluded = void 0;\n\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\n\n\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n  constructor() {\n    super('@included');\n  }\n\n  async handle(parsingContext, util, key, keys, value, depth) {\n    if (typeof value !== 'object') {\n      parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n    }\n\n    const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n\n    if ('@value' in valueUnliased) {\n      parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n    }\n\n    if ('@list' in valueUnliased) {\n      parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n    }\n\n    parsingContext.emittedStack[depth] = false;\n  }\n\n}\n\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js"],"names":["Object","defineProperty","exports","value","EntryHandlerKeywordIncluded","jsonld_context_parser_1","require","EntryHandlerKeyword_1","EntryHandlerKeyword","constructor","handle","parsingContext","util","key","keys","depth","emitError","ErrorCoded","ERROR_CODES","INVALID_INCLUDED_VALUE","valueUnliased","unaliasKeywords","getContext","JSON","stringify","emittedStack"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,2BAAR,GAAsC,KAAK,CAA3C;;AACA,MAAMC,uBAAuB,GAAGC,OAAO,CAAC,uBAAD,CAAvC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;;;AACA,MAAMF,2BAAN,SAA0CG,qBAAqB,CAACC,mBAAhE,CAAoF;AAChFC,EAAAA,WAAW,GAAG;AACV,UAAM,WAAN;AACH;;AACW,QAANC,MAAM,CAACC,cAAD,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCX,KAAlC,EAAyCY,KAAzC,EAAgD;AACxD,QAAI,OAAOZ,KAAP,KAAiB,QAArB,EAA+B;AAC3BQ,MAAAA,cAAc,CAACK,SAAf,CAAyB,IAAIX,uBAAuB,CAACY,UAA5B,CAAwC,4BAA2Bd,KAAM,GAAzE,EAA6EE,uBAAuB,CAACa,WAAxB,CAAoCC,sBAAjH,CAAzB;AACH;;AACD,UAAMC,aAAa,GAAG,MAAMR,IAAI,CAACS,eAAL,CAAqBlB,KAArB,EAA4BW,IAA5B,EAAkCC,KAAlC,EAAyC,MAAMJ,cAAc,CAACW,UAAf,CAA0BR,IAA1B,CAA/C,CAA5B;;AACA,QAAI,YAAYM,aAAhB,EAA+B;AAC3BT,MAAAA,cAAc,CAACK,SAAf,CAAyB,IAAIX,uBAAuB,CAACY,UAA5B,CAAwC,2CAA0CM,IAAI,CAACC,SAAL,CAAerB,KAAf,CAAsB,GAAxG,EAA4GE,uBAAuB,CAACa,WAAxB,CAAoCC,sBAAhJ,CAAzB;AACH;;AACD,QAAI,WAAWC,aAAf,EAA8B;AAC1BT,MAAAA,cAAc,CAACK,SAAf,CAAyB,IAAIX,uBAAuB,CAACY,UAA5B,CAAwC,0CAAyCM,IAAI,CAACC,SAAL,CAAerB,KAAf,CAAsB,GAAvG,EAA2GE,uBAAuB,CAACa,WAAxB,CAAoCC,sBAA/I,CAAzB;AACH;;AACDR,IAAAA,cAAc,CAACc,YAAf,CAA4BV,KAA5B,IAAqC,KAArC;AACH;;AAhB+E;;AAkBpFb,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map"]},"metadata":{},"sourceType":"script"}