{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorHttpInvalidateListenable = void 0;\n\nconst ActorHttpInvalidate_1 = require(\"./ActorHttpInvalidate\");\n/**\n * An ActorHttpInvalidate actor that allows listeners to be attached.\n *\n * @see ActorHttpInvalidate\n */\n\n\nclass ActorHttpInvalidateListenable extends ActorHttpInvalidate_1.ActorHttpInvalidate {\n  constructor(args) {\n    super(args);\n    this.invalidateListeners = [];\n  }\n\n  addInvalidateListener(listener) {\n    this.invalidateListeners.push(listener);\n  }\n\n  async test(action) {\n    return true;\n  }\n\n  async run(action) {\n    for (const listener of this.invalidateListeners) {\n      listener(action);\n    }\n\n    return {};\n  }\n\n}\n\nexports.ActorHttpInvalidateListenable = ActorHttpInvalidateListenable;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidateListenable.js"],"names":["Object","defineProperty","exports","value","ActorHttpInvalidateListenable","ActorHttpInvalidate_1","require","ActorHttpInvalidate","constructor","args","invalidateListeners","addInvalidateListener","listener","push","test","action","run"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,6BAAR,GAAwC,KAAK,CAA7C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,6BAAN,SAA4CC,qBAAqB,CAACE,mBAAlE,CAAsF;AAClFC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACH;;AACDC,EAAAA,qBAAqB,CAACC,QAAD,EAAW;AAC5B,SAAKF,mBAAL,CAAyBG,IAAzB,CAA8BD,QAA9B;AACH;;AACS,QAAJE,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACD,MAAD,EAAS;AACd,SAAK,MAAMH,QAAX,IAAuB,KAAKF,mBAA5B,EAAiD;AAC7CE,MAAAA,QAAQ,CAACG,MAAD,CAAR;AACH;;AACD,WAAO,EAAP;AACH;;AAhBiF;;AAkBtFb,OAAO,CAACE,6BAAR,GAAwCA,6BAAxC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorHttpInvalidateListenable = void 0;\nconst ActorHttpInvalidate_1 = require(\"./ActorHttpInvalidate\");\n/**\n * An ActorHttpInvalidate actor that allows listeners to be attached.\n *\n * @see ActorHttpInvalidate\n */\nclass ActorHttpInvalidateListenable extends ActorHttpInvalidate_1.ActorHttpInvalidate {\n    constructor(args) {\n        super(args);\n        this.invalidateListeners = [];\n    }\n    addInvalidateListener(listener) {\n        this.invalidateListeners.push(listener);\n    }\n    async test(action) {\n        return true;\n    }\n    async run(action) {\n        for (const listener of this.invalidateListeners) {\n            listener(action);\n        }\n        return {};\n    }\n}\nexports.ActorHttpInvalidateListenable = ActorHttpInvalidateListenable;\n//# sourceMappingURL=ActorHttpInvalidateListenable.js.map"]},"metadata":{},"sourceType":"script"}