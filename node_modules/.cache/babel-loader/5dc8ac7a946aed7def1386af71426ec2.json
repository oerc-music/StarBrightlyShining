{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfUpdateQuads = exports.getDataDestinationContext = exports.getDataDestinationValue = exports.getDataDestinationType = exports.isDataDestinationRawType = exports.KEY_CONTEXT_DESTINATION = void 0;\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * @type {string} Context entry for a data destination.\n * @value {IDataDestination} A destination.\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\n\nexports.KEY_CONTEXT_DESTINATION = context_entries_1.KeysRdfUpdateQuads.destination;\n\nfunction isDataDestinationRawType(dataDestination) {\n  return typeof dataDestination === 'string' || 'remove' in dataDestination;\n}\n\nexports.isDataDestinationRawType = isDataDestinationRawType;\n\nfunction getDataDestinationType(dataDestination) {\n  if (typeof dataDestination === 'string') {\n    return '';\n  }\n\n  return 'remove' in dataDestination ? 'rdfjsStore' : dataDestination.type;\n}\n\nexports.getDataDestinationType = getDataDestinationType;\n\nfunction getDataDestinationValue(dataDestination) {\n  return isDataDestinationRawType(dataDestination) ? dataDestination : dataDestination.value;\n}\n\nexports.getDataDestinationValue = getDataDestinationValue;\n\nfunction getDataDestinationContext(dataDestination, context) {\n  if (typeof dataDestination === 'string' || 'remove' in dataDestination || !dataDestination.context) {\n    return context;\n  }\n\n  return context.merge(dataDestination.context);\n}\n\nexports.getDataDestinationContext = getDataDestinationContext;\n/**\n * A comunica actor for rdf-update-quads events.\n *\n * Actor types:\n * * Input:  IActionRdfUpdateQuads:      Quad insertion and deletion streams.\n * * Test:   <none>\n * * Output: IActorRdfUpdateQuadsOutput: A promise resolving when the update operation is done.\n *\n * @see IActionRdfUpdateQuads\n * @see IActorRdfUpdateQuadsOutput\n */\n\nclass ActorRdfUpdateQuads extends core_1.Actor {\n  constructor(args) {\n    super(args);\n  }\n  /**\n   * Get the destination from the given context.\n   * @param {ActionContext} context An optional context.\n   * @return {IDataDestination} The destination or undefined.\n   */\n\n\n  getContextDestination(context) {\n    return context ? context.get(exports.KEY_CONTEXT_DESTINATION) : undefined;\n  }\n  /**\n   * Get the destination's raw URL value from the given context.\n   * @param {IDataDestination} destination A destination.\n   * @return {string} The URL or undefined.\n   */\n\n\n  getContextDestinationUrl(destination) {\n    if (destination) {\n      let fileUrl = getDataDestinationValue(destination);\n\n      if (typeof fileUrl === 'string') {\n        // Remove hashes from source\n        const hashPosition = fileUrl.indexOf('#');\n\n        if (hashPosition >= 0) {\n          fileUrl = fileUrl.slice(0, hashPosition);\n        }\n\n        return fileUrl;\n      }\n    }\n  }\n\n}\n\nexports.ActorRdfUpdateQuads = ActorRdfUpdateQuads;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuads.js"],"names":["Object","defineProperty","exports","value","ActorRdfUpdateQuads","getDataDestinationContext","getDataDestinationValue","getDataDestinationType","isDataDestinationRawType","KEY_CONTEXT_DESTINATION","context_entries_1","require","core_1","KeysRdfUpdateQuads","destination","dataDestination","type","context","merge","Actor","constructor","args","getContextDestination","get","undefined","getContextDestinationUrl","fileUrl","hashPosition","indexOf","slice"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,yBAAR,GAAoCH,OAAO,CAACI,uBAAR,GAAkCJ,OAAO,CAACK,sBAAR,GAAiCL,OAAO,CAACM,wBAAR,GAAmCN,OAAO,CAACO,uBAAR,GAAkC,KAAK,CAA/M;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,2BAAD,CAAjC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;;;AACAT,OAAO,CAACO,uBAAR,GAAkCC,iBAAiB,CAACG,kBAAlB,CAAqCC,WAAvE;;AACA,SAASN,wBAAT,CAAkCO,eAAlC,EAAmD;AAC/C,SAAO,OAAOA,eAAP,KAA2B,QAA3B,IAAuC,YAAYA,eAA1D;AACH;;AACDb,OAAO,CAACM,wBAAR,GAAmCA,wBAAnC;;AACA,SAASD,sBAAT,CAAgCQ,eAAhC,EAAiD;AAC7C,MAAI,OAAOA,eAAP,KAA2B,QAA/B,EAAyC;AACrC,WAAO,EAAP;AACH;;AACD,SAAO,YAAYA,eAAZ,GAA8B,YAA9B,GAA6CA,eAAe,CAACC,IAApE;AACH;;AACDd,OAAO,CAACK,sBAAR,GAAiCA,sBAAjC;;AACA,SAASD,uBAAT,CAAiCS,eAAjC,EAAkD;AAC9C,SAAOP,wBAAwB,CAACO,eAAD,CAAxB,GAA4CA,eAA5C,GAA8DA,eAAe,CAACZ,KAArF;AACH;;AACDD,OAAO,CAACI,uBAAR,GAAkCA,uBAAlC;;AACA,SAASD,yBAAT,CAAmCU,eAAnC,EAAoDE,OAApD,EAA6D;AACzD,MAAI,OAAOF,eAAP,KAA2B,QAA3B,IAAuC,YAAYA,eAAnD,IAAsE,CAACA,eAAe,CAACE,OAA3F,EAAoG;AAChG,WAAOA,OAAP;AACH;;AACD,SAAOA,OAAO,CAACC,KAAR,CAAcH,eAAe,CAACE,OAA9B,CAAP;AACH;;AACDf,OAAO,CAACG,yBAAR,GAAoCA,yBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMD,mBAAN,SAAkCQ,MAAM,CAACO,KAAzC,CAA+C;AAC3CC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,qBAAqB,CAACL,OAAD,EAAU;AAC3B,WAAOA,OAAO,GAAGA,OAAO,CAACM,GAAR,CAAYrB,OAAO,CAACO,uBAApB,CAAH,GAAkDe,SAAhE;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,wBAAwB,CAACX,WAAD,EAAc;AAClC,QAAIA,WAAJ,EAAiB;AACb,UAAIY,OAAO,GAAGpB,uBAAuB,CAACQ,WAAD,CAArC;;AACA,UAAI,OAAOY,OAAP,KAAmB,QAAvB,EAAiC;AAC7B;AACA,cAAMC,YAAY,GAAGD,OAAO,CAACE,OAAR,CAAgB,GAAhB,CAArB;;AACA,YAAID,YAAY,IAAI,CAApB,EAAuB;AACnBD,UAAAA,OAAO,GAAGA,OAAO,CAACG,KAAR,CAAc,CAAd,EAAiBF,YAAjB,CAAV;AACH;;AACD,eAAOD,OAAP;AACH;AACJ;AACJ;;AA7B0C;;AA+B/CxB,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfUpdateQuads = exports.getDataDestinationContext = exports.getDataDestinationValue = exports.getDataDestinationType = exports.isDataDestinationRawType = exports.KEY_CONTEXT_DESTINATION = void 0;\nconst context_entries_1 = require(\"@comunica/context-entries\");\nconst core_1 = require(\"@comunica/core\");\n/**\n * @type {string} Context entry for a data destination.\n * @value {IDataDestination} A destination.\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_DESTINATION = context_entries_1.KeysRdfUpdateQuads.destination;\nfunction isDataDestinationRawType(dataDestination) {\n    return typeof dataDestination === 'string' || 'remove' in dataDestination;\n}\nexports.isDataDestinationRawType = isDataDestinationRawType;\nfunction getDataDestinationType(dataDestination) {\n    if (typeof dataDestination === 'string') {\n        return '';\n    }\n    return 'remove' in dataDestination ? 'rdfjsStore' : dataDestination.type;\n}\nexports.getDataDestinationType = getDataDestinationType;\nfunction getDataDestinationValue(dataDestination) {\n    return isDataDestinationRawType(dataDestination) ? dataDestination : dataDestination.value;\n}\nexports.getDataDestinationValue = getDataDestinationValue;\nfunction getDataDestinationContext(dataDestination, context) {\n    if (typeof dataDestination === 'string' || 'remove' in dataDestination || !dataDestination.context) {\n        return context;\n    }\n    return context.merge(dataDestination.context);\n}\nexports.getDataDestinationContext = getDataDestinationContext;\n/**\n * A comunica actor for rdf-update-quads events.\n *\n * Actor types:\n * * Input:  IActionRdfUpdateQuads:      Quad insertion and deletion streams.\n * * Test:   <none>\n * * Output: IActorRdfUpdateQuadsOutput: A promise resolving when the update operation is done.\n *\n * @see IActionRdfUpdateQuads\n * @see IActorRdfUpdateQuadsOutput\n */\nclass ActorRdfUpdateQuads extends core_1.Actor {\n    constructor(args) {\n        super(args);\n    }\n    /**\n     * Get the destination from the given context.\n     * @param {ActionContext} context An optional context.\n     * @return {IDataDestination} The destination or undefined.\n     */\n    getContextDestination(context) {\n        return context ? context.get(exports.KEY_CONTEXT_DESTINATION) : undefined;\n    }\n    /**\n     * Get the destination's raw URL value from the given context.\n     * @param {IDataDestination} destination A destination.\n     * @return {string} The URL or undefined.\n     */\n    getContextDestinationUrl(destination) {\n        if (destination) {\n            let fileUrl = getDataDestinationValue(destination);\n            if (typeof fileUrl === 'string') {\n                // Remove hashes from source\n                const hashPosition = fileUrl.indexOf('#');\n                if (hashPosition >= 0) {\n                    fileUrl = fileUrl.slice(0, hashPosition);\n                }\n                return fileUrl;\n            }\n        }\n    }\n}\nexports.ActorRdfUpdateQuads = ActorRdfUpdateQuads;\n//# sourceMappingURL=ActorRdfUpdateQuads.js.map"]},"metadata":{},"sourceType":"script"}