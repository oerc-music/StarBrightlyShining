{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MediatorNumber = void 0;\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * A mediator that can mediate over a single number field.\n *\n * It takes the required 'field' and 'type' parameters.\n * The 'field' parameter represents the field name of the test result field over which must be mediated.\n * The 'type' parameter\n */\n\n\nclass MediatorNumber extends core_1.Mediator {\n  constructor(args) {\n    super(args);\n    this.indexPicker = this.createIndexPicker();\n  }\n  /**\n   * @return {(tests: T[]) => number} A function that returns the index of the test result\n   *                                  that has been chosen by this mediator.\n   */\n\n\n  createIndexPicker() {\n    switch (this.type) {\n      case MediatorNumber.MIN:\n        return tests => tests.reduce((prev, curr, i) => {\n          const val = this.getOrDefault(curr[this.field], Number.POSITIVE_INFINITY);\n          return val !== null && (Number.isNaN(prev[0]) || prev[0] > val) ? [val, i] : prev;\n        }, [Number.NaN, -1])[1];\n\n      case MediatorNumber.MAX:\n        return tests => tests.reduce((prev, curr, i) => {\n          const val = this.getOrDefault(curr[this.field], Number.NEGATIVE_INFINITY);\n          return val !== null && (Number.isNaN(prev[0]) || prev[0] < val) ? [val, i] : prev;\n        }, [Number.NaN, -1])[1];\n\n      default:\n        throw new Error(`No valid \"type\" value was given, must be either ${MediatorNumber.MIN} or ${MediatorNumber.MAX}, but got: ${this.type}`);\n    }\n  }\n\n  getOrDefault(value, defaultValue) {\n    return value === undefined ? defaultValue : value;\n  }\n\n  async mediateWith(action, testResults) {\n    let promises = testResults.map(({\n      reply\n    }) => reply);\n    const errors = [];\n\n    if (this.ignoreErrors) {\n      const dummy = {};\n      dummy[this.field] = null;\n      promises = promises.map(promise => promise.catch(error => {\n        errors.push(error);\n        return dummy;\n      }));\n    }\n\n    const results = await Promise.all(promises);\n    const index = this.indexPicker(results);\n\n    if (index < 0) {\n      throw new Error(`All actors rejected their test in ${this.name}\\n${errors.map(error => error.message).join('\\n')}`);\n    }\n\n    return testResults[index].actor;\n  }\n\n}\n\nexports.MediatorNumber = MediatorNumber;\nMediatorNumber.MIN = 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/' + 'Mediator/Number/type/TypeMin';\nMediatorNumber.MAX = 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/' + 'Mediator/Number/type/TypeMax';","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/mediator-number/lib/MediatorNumber.js"],"names":["Object","defineProperty","exports","value","MediatorNumber","core_1","require","Mediator","constructor","args","indexPicker","createIndexPicker","type","MIN","tests","reduce","prev","curr","i","val","getOrDefault","field","Number","POSITIVE_INFINITY","isNaN","NaN","MAX","NEGATIVE_INFINITY","Error","defaultValue","undefined","mediateWith","action","testResults","promises","map","reply","errors","ignoreErrors","dummy","promise","catch","error","push","results","Promise","all","index","name","message","join","actor"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MediatorNumber = void 0;\nconst core_1 = require(\"@comunica/core\");\n/**\n * A mediator that can mediate over a single number field.\n *\n * It takes the required 'field' and 'type' parameters.\n * The 'field' parameter represents the field name of the test result field over which must be mediated.\n * The 'type' parameter\n */\nclass MediatorNumber extends core_1.Mediator {\n    constructor(args) {\n        super(args);\n        this.indexPicker = this.createIndexPicker();\n    }\n    /**\n     * @return {(tests: T[]) => number} A function that returns the index of the test result\n     *                                  that has been chosen by this mediator.\n     */\n    createIndexPicker() {\n        switch (this.type) {\n            case MediatorNumber.MIN:\n                return (tests) => tests.reduce((prev, curr, i) => {\n                    const val = this.getOrDefault(curr[this.field], Number.POSITIVE_INFINITY);\n                    return val !== null && (Number.isNaN(prev[0]) || prev[0] > val) ? [val, i] : prev;\n                }, [Number.NaN, -1])[1];\n            case MediatorNumber.MAX:\n                return (tests) => tests.reduce((prev, curr, i) => {\n                    const val = this.getOrDefault(curr[this.field], Number.NEGATIVE_INFINITY);\n                    return val !== null && (Number.isNaN(prev[0]) || prev[0] < val) ? [val, i] : prev;\n                }, [Number.NaN, -1])[1];\n            default:\n                throw new Error(`No valid \"type\" value was given, must be either ${MediatorNumber.MIN} or ${MediatorNumber.MAX}, but got: ${this.type}`);\n        }\n    }\n    getOrDefault(value, defaultValue) {\n        return value === undefined ? defaultValue : value;\n    }\n    async mediateWith(action, testResults) {\n        let promises = testResults.map(({ reply }) => reply);\n        const errors = [];\n        if (this.ignoreErrors) {\n            const dummy = {};\n            dummy[this.field] = null;\n            promises = promises.map(promise => promise.catch(error => {\n                errors.push(error);\n                return dummy;\n            }));\n        }\n        const results = await Promise.all(promises);\n        const index = this.indexPicker(results);\n        if (index < 0) {\n            throw new Error(`All actors rejected their test in ${this.name}\\n${errors.map(error => error.message).join('\\n')}`);\n        }\n        return testResults[index].actor;\n    }\n}\nexports.MediatorNumber = MediatorNumber;\nMediatorNumber.MIN = 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/' +\n    'Mediator/Number/type/TypeMin';\nMediatorNumber.MAX = 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/' +\n    'Mediator/Number/type/TypeMax';\n//# sourceMappingURL=MediatorNumber.js.map"]},"metadata":{},"sourceType":"script"}