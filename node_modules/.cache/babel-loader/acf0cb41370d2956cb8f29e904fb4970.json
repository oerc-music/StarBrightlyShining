{"ast":null,"code":"import update from 'immutability-helper';\nimport { CLEAR_CONSTITUENTS, CLEAR_ELEMENTS, ELEMENT_CLICKED, POP_ELEMENTS, SET_MODE, UI_CONSTITUENT_CLICKED } from '../actions/modalUI'; // terminology: \"constituents\" are items in the modal UI pane;\n// \"elements\" are selectable bits of content (e.g. score elements, annotation glyphs, ...)\n\nexport default function (state = {\n  constituents: new Set(),\n  elements: {},\n  mode: \"\"\n}, action) {\n  let newState;\n\n  switch (action.type) {\n    case UI_CONSTITUENT_CLICKED:\n      // console.log(\"UI constituent clicked: \", action.payload);\n      if (!state.constituents.has(action.payload)) {\n        newState = update(state, {\n          constituents: {\n            \"$add\": [action.payload]\n          }\n        });\n      }\n\n      return newState;\n\n    case SET_MODE:\n      // n.b. also clears out all selected constituents\n      // console.log(\"Setting mode: \", action.payload);\n      return update(state, {\n        mode: {\n          \"$set\": action.payload\n        }\n      });\n\n    case CLEAR_CONSTITUENTS:\n      // console.log(\"Clearing constituents\");\n      return update(state, {\n        constituents: {\n          \"$set\": new Set()\n        }\n      });\n\n    case CLEAR_ELEMENTS:\n      // console.log(\"Clearing elements\");\n      return update(state, {\n        elements: {\n          [action.payload]: {\n            \"$set\": []\n          }\n        }\n      });\n\n    case POP_ELEMENTS:\n      // console.log(\"Popping oldest element selection\");\n      const elements = state.elements[action.payload]; // console.log(\"State: \", state, \" Action: \", action)\n\n      return update(state, {\n        elements: {\n          [action.payload]: {\n            \"$set\": elements.slice(0, elements.length - 1)\n          }\n        }\n      });\n    // n.b. slice is non-mutating, so reducer-safe.\n\n    case ELEMENT_CLICKED:\n      // console.log(\"Element clicked:\", action);\n      newState = update(state, {});\n\n      if (!(action.payload.elementType in state.elements)) {\n        // if we don't yet have this element type, start recording it\n        return update(state, {\n          elements: {\n            \"$merge\": {\n              [action.payload.elementType]: [action.payload.elementId]\n            }\n          }\n        });\n      }\n\n      if (state.elements[action.payload.elementType].includes(action.payload.elementId)) {\n        // we already have this particular element,\n        // make it the only selection\n        return update(state, {\n          elements: {\n            [action.payload.elementType]: {\n              \"$set\": [action.payload.elementId]\n            }\n          }\n        });\n      } else {\n        // add this element as the new front of the list\n        // console.log(\"!!!\", action.payload)\n        return update(state, {\n          elements: {\n            [action.payload.elementType]: {\n              \"$unshift\": [action.payload.elementId]\n            }\n          }\n        });\n      }\n\n    default:\n      // console.log(\"reducer_modalUI: Unknown action: \", action);\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/meld-clients-core/lib/reducers/reducer_modalUI.js"],"names":["update","CLEAR_CONSTITUENTS","CLEAR_ELEMENTS","ELEMENT_CLICKED","POP_ELEMENTS","SET_MODE","UI_CONSTITUENT_CLICKED","state","constituents","Set","elements","mode","action","newState","type","has","payload","slice","length","elementType","elementId","includes"],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\nimport { CLEAR_CONSTITUENTS, CLEAR_ELEMENTS, ELEMENT_CLICKED, POP_ELEMENTS, SET_MODE, UI_CONSTITUENT_CLICKED } from '../actions/modalUI'; // terminology: \"constituents\" are items in the modal UI pane;\n// \"elements\" are selectable bits of content (e.g. score elements, annotation glyphs, ...)\n\nexport default function (state = {\n  constituents: new Set(),\n  elements: {},\n  mode: \"\"\n}, action) {\n  let newState;\n\n  switch (action.type) {\n    case UI_CONSTITUENT_CLICKED:\n      // console.log(\"UI constituent clicked: \", action.payload);\n      if (!state.constituents.has(action.payload)) {\n        newState = update(state, {\n          constituents: {\n            \"$add\": [action.payload]\n          }\n        });\n      }\n\n      return newState;\n\n    case SET_MODE:\n      // n.b. also clears out all selected constituents\n      // console.log(\"Setting mode: \", action.payload);\n      return update(state, {\n        mode: {\n          \"$set\": action.payload\n        }\n      });\n\n    case CLEAR_CONSTITUENTS:\n      // console.log(\"Clearing constituents\");\n      return update(state, {\n        constituents: {\n          \"$set\": new Set()\n        }\n      });\n\n    case CLEAR_ELEMENTS:\n      // console.log(\"Clearing elements\");\n      return update(state, {\n        elements: {\n          [action.payload]: {\n            \"$set\": []\n          }\n        }\n      });\n\n    case POP_ELEMENTS:\n      // console.log(\"Popping oldest element selection\");\n      const elements = state.elements[action.payload]; // console.log(\"State: \", state, \" Action: \", action)\n\n      return update(state, {\n        elements: {\n          [action.payload]: {\n            \"$set\": elements.slice(0, elements.length - 1)\n          }\n        }\n      });\n    // n.b. slice is non-mutating, so reducer-safe.\n\n    case ELEMENT_CLICKED:\n      // console.log(\"Element clicked:\", action);\n      newState = update(state, {});\n\n      if (!(action.payload.elementType in state.elements)) {\n        // if we don't yet have this element type, start recording it\n        return update(state, {\n          elements: {\n            \"$merge\": {\n              [action.payload.elementType]: [action.payload.elementId]\n            }\n          }\n        });\n      }\n\n      if (state.elements[action.payload.elementType].includes(action.payload.elementId)) {\n        // we already have this particular element,\n        // make it the only selection\n        return update(state, {\n          elements: {\n            [action.payload.elementType]: {\n              \"$set\": [action.payload.elementId]\n            }\n          }\n        });\n      } else {\n        // add this element as the new front of the list\n        // console.log(\"!!!\", action.payload)\n        return update(state, {\n          elements: {\n            [action.payload.elementType]: {\n              \"$unshift\": [action.payload.elementId]\n            }\n          }\n        });\n      }\n\n    default:\n      // console.log(\"reducer_modalUI: Unknown action: \", action);\n      return state;\n  }\n}\n;"]},"metadata":{},"sourceType":"module"}