{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationCopyRewrite = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor that\n * handles SPARQL copy operations.\n */\n\n\nclass ActorQueryOperationCopyRewrite extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'copy');\n    this.factory = new sparqlalgebrajs_1.Factory();\n  }\n\n  async testOperation(pattern, context) {\n    bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  runOperation(pattern, context) {\n    // No-op if source === destination\n    if (typeof pattern.destination === 'string' && typeof pattern.source === 'string' && pattern.destination === pattern.source || typeof pattern.destination !== 'string' && typeof pattern.source !== 'string' && pattern.destination.equals(pattern.source)) {\n      return Promise.resolve({\n        type: 'update',\n        updateResult: Promise.resolve()\n      });\n    } // COPY is equivalent to drop destination, and add\n\n\n    const operation = this.factory.createCompositeUpdate([this.factory.createDrop(pattern.destination, true), this.factory.createAdd(pattern.source, pattern.destination, pattern.silent)]);\n    return this.mediatorQueryOperation.mediate({\n      operation,\n      context\n    });\n  }\n\n}\n\nexports.ActorQueryOperationCopyRewrite = ActorQueryOperationCopyRewrite;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-update-copy-rewrite/lib/ActorQueryOperationCopyRewrite.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationCopyRewrite","bus_query_operation_1","require","sparqlalgebrajs_1","ActorQueryOperationTypedMediated","constructor","args","factory","Factory","testOperation","pattern","context","ActorQueryOperation","throwOnReadOnly","runOperation","destination","source","equals","Promise","resolve","type","updateResult","operation","createCompositeUpdate","createDrop","createAdd","silent","mediatorQueryOperation","mediate"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,8BAAR,GAAyC,KAAK,CAA9C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,iBAAD,CAAjC;AACA;AACA;AACA;AACA;;;AACA,MAAMF,8BAAN,SAA6CC,qBAAqB,CAACG,gCAAnE,CAAoG;AAChGC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,MAAZ;AACA,SAAKC,OAAL,GAAe,IAAIJ,iBAAiB,CAACK,OAAtB,EAAf;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClCV,IAAAA,qBAAqB,CAACW,mBAAtB,CAA0CC,eAA1C,CAA0DF,OAA1D;AACA,WAAO,IAAP;AACH;;AACDG,EAAAA,YAAY,CAACJ,OAAD,EAAUC,OAAV,EAAmB;AAC3B;AACA,QAAK,OAAOD,OAAO,CAACK,WAAf,KAA+B,QAA/B,IAA2C,OAAOL,OAAO,CAACM,MAAf,KAA0B,QAArE,IACDN,OAAO,CAACK,WAAR,KAAwBL,OAAO,CAACM,MADhC,IAEC,OAAON,OAAO,CAACK,WAAf,KAA+B,QAA/B,IAA2C,OAAOL,OAAO,CAACM,MAAf,KAA0B,QAArE,IACGN,OAAO,CAACK,WAAR,CAAoBE,MAApB,CAA2BP,OAAO,CAACM,MAAnC,CAHR,EAGqD;AACjD,aAAOE,OAAO,CAACC,OAAR,CAAgB;AACnBC,QAAAA,IAAI,EAAE,QADa;AAEnBC,QAAAA,YAAY,EAAEH,OAAO,CAACC,OAAR;AAFK,OAAhB,CAAP;AAIH,KAV0B,CAW3B;;;AACA,UAAMG,SAAS,GAAG,KAAKf,OAAL,CAAagB,qBAAb,CAAmC,CACjD,KAAKhB,OAAL,CAAaiB,UAAb,CAAwBd,OAAO,CAACK,WAAhC,EAA6C,IAA7C,CADiD,EAEjD,KAAKR,OAAL,CAAakB,SAAb,CAAuBf,OAAO,CAACM,MAA/B,EAAuCN,OAAO,CAACK,WAA/C,EAA4DL,OAAO,CAACgB,MAApE,CAFiD,CAAnC,CAAlB;AAIA,WAAO,KAAKC,sBAAL,CAA4BC,OAA5B,CAAoC;AAAEN,MAAAA,SAAF;AAAaX,MAAAA;AAAb,KAApC,CAAP;AACH;;AA1B+F;;AA4BpGb,OAAO,CAACE,8BAAR,GAAyCA,8BAAzC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationCopyRewrite = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor that\n * handles SPARQL copy operations.\n */\nclass ActorQueryOperationCopyRewrite extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'copy');\n        this.factory = new sparqlalgebrajs_1.Factory();\n    }\n    async testOperation(pattern, context) {\n        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n        return true;\n    }\n    runOperation(pattern, context) {\n        // No-op if source === destination\n        if ((typeof pattern.destination === 'string' && typeof pattern.source === 'string' &&\n            pattern.destination === pattern.source) ||\n            (typeof pattern.destination !== 'string' && typeof pattern.source !== 'string' &&\n                pattern.destination.equals(pattern.source))) {\n            return Promise.resolve({\n                type: 'update',\n                updateResult: Promise.resolve(),\n            });\n        }\n        // COPY is equivalent to drop destination, and add\n        const operation = this.factory.createCompositeUpdate([\n            this.factory.createDrop(pattern.destination, true),\n            this.factory.createAdd(pattern.source, pattern.destination, pattern.silent),\n        ]);\n        return this.mediatorQueryOperation.mediate({ operation, context });\n    }\n}\nexports.ActorQueryOperationCopyRewrite = ActorQueryOperationCopyRewrite;\n//# sourceMappingURL=ActorQueryOperationCopyRewrite.js.map"]},"metadata":{},"sourceType":"script"}