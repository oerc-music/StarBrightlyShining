{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Aggregate = void 0;\n\nconst Expressions_1 = require(\"./Expressions\");\n\nclass Aggregate {\n  constructor(name, expression) {\n    this.name = name;\n    this.expression = expression;\n    this.expressionType = Expressions_1.ExpressionType.Aggregate;\n  }\n\n}\n\nexports.Aggregate = Aggregate;","map":{"version":3,"sources":["../../../lib/expressions/Aggregate.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAKA,MAAa,SAAb,CAAsB;AAGpB,EAAA,WAAA,CACS,IADT,EAES,UAFT,EAE4C;AADnC,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,UAAA,GAAA,UAAA;AAJT,SAAA,cAAA,GAA2C,aAAA,CAAA,cAAA,CAAe,SAA1D;AAKK;;AANe;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourcesContent":["import { Algebra as Alg } from 'sparqlalgebrajs';\n\nimport {\n  AggregateExpression,\n  ExpressionType,\n} from './Expressions';\n\nexport class Aggregate implements AggregateExpression {\n  expressionType: ExpressionType.Aggregate = ExpressionType.Aggregate;\n\n  constructor(\n    public name: string,\n    public expression: Alg.AggregateExpression,\n  ) { }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}