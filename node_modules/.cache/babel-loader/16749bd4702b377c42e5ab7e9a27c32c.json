{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfResolveQuadPattern = exports.getDataSourceContext = exports.getDataSourceValue = exports.getDataSourceType = exports.isDataSourceRawType = exports.KEY_CONTEXT_SOURCE = exports.KEY_CONTEXT_SOURCES = void 0;\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * @type {string} Context entry for data sources.\n * @value {DataSources} An array of sources.\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\n\nexports.KEY_CONTEXT_SOURCES = context_entries_1.KeysRdfResolveQuadPattern.sources;\n/**\n * @type {string} Context entry for a data source.\n * @value {IDataSource} A source.\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_SOURCE = context_entries_1.KeysRdfResolveQuadPattern.source;\n\nfunction isDataSourceRawType(dataSource) {\n  return typeof dataSource === 'string' || 'match' in dataSource;\n}\n\nexports.isDataSourceRawType = isDataSourceRawType;\n\nfunction getDataSourceType(dataSource) {\n  if (typeof dataSource === 'string') {\n    return '';\n  }\n\n  return 'match' in dataSource ? 'rdfjsSource' : dataSource.type;\n}\n\nexports.getDataSourceType = getDataSourceType;\n\nfunction getDataSourceValue(dataSource) {\n  return isDataSourceRawType(dataSource) ? dataSource : dataSource.value;\n}\n\nexports.getDataSourceValue = getDataSourceValue;\n\nfunction getDataSourceContext(dataSource, context) {\n  if (typeof dataSource === 'string' || 'match' in dataSource || !dataSource.context) {\n    return context;\n  }\n\n  return context.merge(dataSource.context);\n}\n\nexports.getDataSourceContext = getDataSourceContext;\n/**\n * A comunica actor for rdf-resolve-quad-pattern events.\n *\n * Actor types:\n * * Input:  IActionRdfResolveQuadPattern:      A quad pattern and an optional context.\n * * Test:   <none>\n * * Output: IActorRdfResolveQuadPatternOutput: The resulting quad stream and optional metadata.\n *\n * @see IActionRdfResolveQuadPattern\n * @see IActorRdfResolveQuadPatternOutput\n */\n\nclass ActorRdfResolveQuadPattern extends core_1.Actor {\n  constructor(args) {\n    super(args);\n  }\n  /**\n   * Get the sources from the given context.\n   * @param {ActionContext} context An optional context.\n   * @return {IDataSource[]} The array of sources or undefined.\n   */\n\n\n  getContextSources(context) {\n    return context ? context.get(context_entries_1.KeysRdfResolveQuadPattern.sources) : undefined;\n  }\n  /**\n   * Get the source from the given context.\n   * @param {ActionContext} context An optional context.\n   * @return {IDataSource} The source or undefined.\n   */\n\n\n  getContextSource(context) {\n    return context ? context.get(context_entries_1.KeysRdfResolveQuadPattern.source) : undefined;\n  }\n  /**\n   * Get the source's raw URL value from the given context.\n   * @param {IDataSource} source A source.\n   * @return {string} The URL or null.\n   */\n\n\n  getContextSourceUrl(source) {\n    if (source) {\n      let fileUrl = getDataSourceValue(source);\n\n      if (typeof fileUrl === 'string') {\n        // Remove hashes from source\n        const hashPosition = fileUrl.indexOf('#');\n\n        if (hashPosition >= 0) {\n          fileUrl = fileUrl.slice(0, hashPosition);\n        }\n\n        return fileUrl;\n      }\n    }\n  }\n  /**\n   * Check if the given context has a single source.\n   * @param {ActionContext} context An optional context.\n   * @return {boolean} If the given context has a single source of the given type.\n   */\n\n\n  hasContextSingleSource(context) {\n    const source = this.getContextSource(context);\n    return Boolean(source && (isDataSourceRawType(source) || source.value));\n  }\n  /**\n   * Check if the given context has a single source of the given type.\n   * @param {string} requiredType The required source type name.\n   * @param {ActionContext} context An optional context.\n   * @return {boolean} If the given context has a single source of the given type.\n   */\n\n\n  hasContextSingleSourceOfType(requiredType, context) {\n    const source = this.getContextSource(context);\n    return Boolean(source && getDataSourceType(source) === requiredType && getDataSourceValue(source));\n  }\n\n}\n\nexports.ActorRdfResolveQuadPattern = ActorRdfResolveQuadPattern;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/ActorRdfResolveQuadPattern.js"],"names":["Object","defineProperty","exports","value","ActorRdfResolveQuadPattern","getDataSourceContext","getDataSourceValue","getDataSourceType","isDataSourceRawType","KEY_CONTEXT_SOURCE","KEY_CONTEXT_SOURCES","context_entries_1","require","core_1","KeysRdfResolveQuadPattern","sources","source","dataSource","type","context","merge","Actor","constructor","args","getContextSources","get","undefined","getContextSource","getContextSourceUrl","fileUrl","hashPosition","indexOf","slice","hasContextSingleSource","Boolean","hasContextSingleSourceOfType","requiredType"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfResolveQuadPattern = exports.getDataSourceContext = exports.getDataSourceValue = exports.getDataSourceType = exports.isDataSourceRawType = exports.KEY_CONTEXT_SOURCE = exports.KEY_CONTEXT_SOURCES = void 0;\nconst context_entries_1 = require(\"@comunica/context-entries\");\nconst core_1 = require(\"@comunica/core\");\n/**\n * @type {string} Context entry for data sources.\n * @value {DataSources} An array of sources.\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_SOURCES = context_entries_1.KeysRdfResolveQuadPattern.sources;\n/**\n * @type {string} Context entry for a data source.\n * @value {IDataSource} A source.\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_SOURCE = context_entries_1.KeysRdfResolveQuadPattern.source;\nfunction isDataSourceRawType(dataSource) {\n    return typeof dataSource === 'string' || 'match' in dataSource;\n}\nexports.isDataSourceRawType = isDataSourceRawType;\nfunction getDataSourceType(dataSource) {\n    if (typeof dataSource === 'string') {\n        return '';\n    }\n    return 'match' in dataSource ? 'rdfjsSource' : dataSource.type;\n}\nexports.getDataSourceType = getDataSourceType;\nfunction getDataSourceValue(dataSource) {\n    return isDataSourceRawType(dataSource) ? dataSource : dataSource.value;\n}\nexports.getDataSourceValue = getDataSourceValue;\nfunction getDataSourceContext(dataSource, context) {\n    if (typeof dataSource === 'string' || 'match' in dataSource || !dataSource.context) {\n        return context;\n    }\n    return context.merge(dataSource.context);\n}\nexports.getDataSourceContext = getDataSourceContext;\n/**\n * A comunica actor for rdf-resolve-quad-pattern events.\n *\n * Actor types:\n * * Input:  IActionRdfResolveQuadPattern:      A quad pattern and an optional context.\n * * Test:   <none>\n * * Output: IActorRdfResolveQuadPatternOutput: The resulting quad stream and optional metadata.\n *\n * @see IActionRdfResolveQuadPattern\n * @see IActorRdfResolveQuadPatternOutput\n */\nclass ActorRdfResolveQuadPattern extends core_1.Actor {\n    constructor(args) {\n        super(args);\n    }\n    /**\n     * Get the sources from the given context.\n     * @param {ActionContext} context An optional context.\n     * @return {IDataSource[]} The array of sources or undefined.\n     */\n    getContextSources(context) {\n        return context ? context.get(context_entries_1.KeysRdfResolveQuadPattern.sources) : undefined;\n    }\n    /**\n     * Get the source from the given context.\n     * @param {ActionContext} context An optional context.\n     * @return {IDataSource} The source or undefined.\n     */\n    getContextSource(context) {\n        return context ? context.get(context_entries_1.KeysRdfResolveQuadPattern.source) : undefined;\n    }\n    /**\n     * Get the source's raw URL value from the given context.\n     * @param {IDataSource} source A source.\n     * @return {string} The URL or null.\n     */\n    getContextSourceUrl(source) {\n        if (source) {\n            let fileUrl = getDataSourceValue(source);\n            if (typeof fileUrl === 'string') {\n                // Remove hashes from source\n                const hashPosition = fileUrl.indexOf('#');\n                if (hashPosition >= 0) {\n                    fileUrl = fileUrl.slice(0, hashPosition);\n                }\n                return fileUrl;\n            }\n        }\n    }\n    /**\n     * Check if the given context has a single source.\n     * @param {ActionContext} context An optional context.\n     * @return {boolean} If the given context has a single source of the given type.\n     */\n    hasContextSingleSource(context) {\n        const source = this.getContextSource(context);\n        return Boolean(source && (isDataSourceRawType(source) || source.value));\n    }\n    /**\n     * Check if the given context has a single source of the given type.\n     * @param {string} requiredType The required source type name.\n     * @param {ActionContext} context An optional context.\n     * @return {boolean} If the given context has a single source of the given type.\n     */\n    hasContextSingleSourceOfType(requiredType, context) {\n        const source = this.getContextSource(context);\n        return Boolean(source && getDataSourceType(source) === requiredType && getDataSourceValue(source));\n    }\n}\nexports.ActorRdfResolveQuadPattern = ActorRdfResolveQuadPattern;\n//# sourceMappingURL=ActorRdfResolveQuadPattern.js.map"]},"metadata":{},"sourceType":"script"}