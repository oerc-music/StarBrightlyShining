{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationBgpSingle = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n/**\n * A comunica Query Operation Actor for BGPs with a single pattern.\n */\n\n\nclass ActorQueryOperationBgpSingle extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'bgp');\n  }\n\n  async testOperation(pattern, context) {\n    if (pattern.patterns.length !== 1) {\n      throw new Error(`Actor ${this.name} can only operate on BGPs with a single pattern.`);\n    }\n\n    return true;\n  }\n\n  runOperation(pattern, context) {\n    // If we have parent metadata, extract the single parent metadata entry.\n    if (context && context.has(context_entries_1.KeysQueryOperation.bgpParentMetadata)) {\n      const metadatas = context.get(context_entries_1.KeysQueryOperation.bgpParentMetadata);\n      context = context.delete(context_entries_1.KeysQueryOperation.bgpParentMetadata);\n      context = context.set(context_entries_1.KeysQueryOperation.patternParentMetadata, metadatas[0]);\n    }\n\n    return this.mediatorQueryOperation.mediate({\n      operation: pattern.patterns[0],\n      context\n    });\n  }\n\n}\n\nexports.ActorQueryOperationBgpSingle = ActorQueryOperationBgpSingle;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-bgp-single/lib/ActorQueryOperationBgpSingle.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationBgpSingle","bus_query_operation_1","require","context_entries_1","ActorQueryOperationTypedMediated","constructor","args","testOperation","pattern","context","patterns","length","Error","name","runOperation","has","KeysQueryOperation","bgpParentMetadata","metadatas","get","delete","set","patternParentMetadata","mediatorQueryOperation","mediate","operation"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,4BAAR,GAAuC,KAAK,CAA5C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,2BAAD,CAAjC;AACA;AACA;AACA;;;AACA,MAAMF,4BAAN,SAA2CC,qBAAqB,CAACG,gCAAjE,CAAkG;AAC9FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,KAAZ;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClC,QAAID,OAAO,CAACE,QAAR,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,YAAM,IAAIC,KAAJ,CAAW,SAAQ,KAAKC,IAAK,kDAA7B,CAAN;AACH;;AACD,WAAO,IAAP;AACH;;AACDC,EAAAA,YAAY,CAACN,OAAD,EAAUC,OAAV,EAAmB;AAC3B;AACA,QAAIA,OAAO,IAAIA,OAAO,CAACM,GAAR,CAAYZ,iBAAiB,CAACa,kBAAlB,CAAqCC,iBAAjD,CAAf,EAAoF;AAChF,YAAMC,SAAS,GAAGT,OAAO,CAACU,GAAR,CAAYhB,iBAAiB,CAACa,kBAAlB,CAAqCC,iBAAjD,CAAlB;AACAR,MAAAA,OAAO,GAAGA,OAAO,CAACW,MAAR,CAAejB,iBAAiB,CAACa,kBAAlB,CAAqCC,iBAApD,CAAV;AACAR,MAAAA,OAAO,GAAGA,OAAO,CAACY,GAAR,CAAYlB,iBAAiB,CAACa,kBAAlB,CAAqCM,qBAAjD,EAAwEJ,SAAS,CAAC,CAAD,CAAjF,CAAV;AACH;;AACD,WAAO,KAAKK,sBAAL,CAA4BC,OAA5B,CAAoC;AAAEC,MAAAA,SAAS,EAAEjB,OAAO,CAACE,QAAR,CAAiB,CAAjB,CAAb;AAAkCD,MAAAA;AAAlC,KAApC,CAAP;AACH;;AAlB6F;;AAoBlGX,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationBgpSingle = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst context_entries_1 = require(\"@comunica/context-entries\");\n/**\n * A comunica Query Operation Actor for BGPs with a single pattern.\n */\nclass ActorQueryOperationBgpSingle extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'bgp');\n    }\n    async testOperation(pattern, context) {\n        if (pattern.patterns.length !== 1) {\n            throw new Error(`Actor ${this.name} can only operate on BGPs with a single pattern.`);\n        }\n        return true;\n    }\n    runOperation(pattern, context) {\n        // If we have parent metadata, extract the single parent metadata entry.\n        if (context && context.has(context_entries_1.KeysQueryOperation.bgpParentMetadata)) {\n            const metadatas = context.get(context_entries_1.KeysQueryOperation.bgpParentMetadata);\n            context = context.delete(context_entries_1.KeysQueryOperation.bgpParentMetadata);\n            context = context.set(context_entries_1.KeysQueryOperation.patternParentMetadata, metadatas[0]);\n        }\n        return this.mediatorQueryOperation.mediate({ operation: pattern.patterns[0], context });\n    }\n}\nexports.ActorQueryOperationBgpSingle = ActorQueryOperationBgpSingle;\n//# sourceMappingURL=ActorQueryOperationBgpSingle.js.map"]},"metadata":{},"sourceType":"script"}