{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfJoinMultiSmallest = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst bus_rdf_join_1 = require(\"@comunica/bus-rdf-join\");\n/**\n * A Multi Smallest RDF Join Actor.\n * It accepts 3 or more streams, joins the smallest two, and joins the result with the remaining streams.\n */\n\n\nclass ActorRdfJoinMultiSmallest extends bus_rdf_join_1.ActorRdfJoin {\n  constructor(args) {\n    super(args, 3, true);\n  }\n\n  static getSmallestPatternId(totalItems) {\n    let smallestId = -1;\n    let smallestCount = Number.POSITIVE_INFINITY;\n\n    for (const [i, count] of totalItems.entries()) {\n      if (count <= smallestCount) {\n        smallestCount = count;\n        smallestId = i;\n      }\n    }\n\n    return smallestId;\n  }\n\n  async getOutput(action) {\n    const entries = action.entries.slice(); // Determine the two smallest streams by estimated count\n\n    const entriesTotalItems = (await Promise.all(action.entries.map(x => bus_query_operation_1.getMetadata(x)))).map(metadata => 'totalItems' in metadata ? metadata.totalItems : Number.POSITIVE_INFINITY);\n    const smallestIndex1 = ActorRdfJoinMultiSmallest.getSmallestPatternId(entriesTotalItems);\n    const smallestItem1 = entries.splice(smallestIndex1, 1)[0];\n    const smallestCount1 = entriesTotalItems.splice(smallestIndex1, 1);\n    const smallestIndex2 = ActorRdfJoinMultiSmallest.getSmallestPatternId(entriesTotalItems);\n    const smallestItem2 = entries.splice(smallestIndex2, 1)[0];\n    const smallestCount2 = entriesTotalItems.splice(smallestIndex2, 1); // Join the two selected streams, and then join the result with the remaining streams\n\n    const firstEntry = await this.mediatorJoin.mediate({\n      entries: [smallestItem1, smallestItem2]\n    });\n    entries.push(firstEntry);\n    return await this.mediatorJoin.mediate({\n      entries\n    });\n  }\n\n  async getIterations(action) {\n    return (await Promise.all(action.entries.map(x => bus_query_operation_1.getMetadata(x)))).reduce((acc, value) => acc * value.totalItems, 1);\n  }\n\n}\n\nexports.ActorRdfJoinMultiSmallest = ActorRdfJoinMultiSmallest;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-join-multi-smallest/lib/ActorRdfJoinMultiSmallest.js"],"names":["Object","defineProperty","exports","value","ActorRdfJoinMultiSmallest","bus_query_operation_1","require","bus_rdf_join_1","ActorRdfJoin","constructor","args","getSmallestPatternId","totalItems","smallestId","smallestCount","Number","POSITIVE_INFINITY","i","count","entries","getOutput","action","slice","entriesTotalItems","Promise","all","map","x","getMetadata","metadata","smallestIndex1","smallestItem1","splice","smallestCount1","smallestIndex2","smallestItem2","smallestCount2","firstEntry","mediatorJoin","mediate","push","getIterations","reduce","acc"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfJoinMultiSmallest = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst bus_rdf_join_1 = require(\"@comunica/bus-rdf-join\");\n/**\n * A Multi Smallest RDF Join Actor.\n * It accepts 3 or more streams, joins the smallest two, and joins the result with the remaining streams.\n */\nclass ActorRdfJoinMultiSmallest extends bus_rdf_join_1.ActorRdfJoin {\n    constructor(args) {\n        super(args, 3, true);\n    }\n    static getSmallestPatternId(totalItems) {\n        let smallestId = -1;\n        let smallestCount = Number.POSITIVE_INFINITY;\n        for (const [i, count] of totalItems.entries()) {\n            if (count <= smallestCount) {\n                smallestCount = count;\n                smallestId = i;\n            }\n        }\n        return smallestId;\n    }\n    async getOutput(action) {\n        const entries = action.entries.slice();\n        // Determine the two smallest streams by estimated count\n        const entriesTotalItems = (await Promise.all(action.entries.map(x => bus_query_operation_1.getMetadata(x))))\n            .map(metadata => 'totalItems' in metadata ? metadata.totalItems : Number.POSITIVE_INFINITY);\n        const smallestIndex1 = ActorRdfJoinMultiSmallest.getSmallestPatternId(entriesTotalItems);\n        const smallestItem1 = entries.splice(smallestIndex1, 1)[0];\n        const smallestCount1 = entriesTotalItems.splice(smallestIndex1, 1);\n        const smallestIndex2 = ActorRdfJoinMultiSmallest.getSmallestPatternId(entriesTotalItems);\n        const smallestItem2 = entries.splice(smallestIndex2, 1)[0];\n        const smallestCount2 = entriesTotalItems.splice(smallestIndex2, 1);\n        // Join the two selected streams, and then join the result with the remaining streams\n        const firstEntry = await this.mediatorJoin.mediate({ entries: [smallestItem1, smallestItem2] });\n        entries.push(firstEntry);\n        return await this.mediatorJoin.mediate({ entries });\n    }\n    async getIterations(action) {\n        return (await Promise.all(action.entries.map(x => bus_query_operation_1.getMetadata(x))))\n            .reduce((acc, value) => acc * value.totalItems, 1);\n    }\n}\nexports.ActorRdfJoinMultiSmallest = ActorRdfJoinMultiSmallest;\n//# sourceMappingURL=ActorRdfJoinMultiSmallest.js.map"]},"metadata":{},"sourceType":"script"}