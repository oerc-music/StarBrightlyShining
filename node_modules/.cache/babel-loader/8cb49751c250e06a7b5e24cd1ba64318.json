{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NamedOperators = exports.SetFunctions = exports.SetFunction = exports.Operators = exports.SpecialOperators = exports.RegularOperators = exports.SpecialOperator = exports.RegularOperator = exports.decategorize = exports.type = exports.PrimitiveNumericTypes = exports.commonTerms = exports.DerivedIntegerTypeURLs = exports.NumericTypeURLs = exports.DerivedIntegerTypeURL = exports.NumericTypeURL = exports.make = exports.TypeURL = exports.EVB_ERR_STR = exports.FALSE_STR = exports.TRUE_STR = void 0; // tslint:disable:variable-name\n\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\n\nconst immutable_1 = require(\"immutable\");\n\nconst DF = new rdf_data_factory_1.DataFactory();\nexports.TRUE_STR = '\"true\"^^xsd:boolean';\nexports.FALSE_STR = '\"false\"^^xsd:boolean';\nexports.EVB_ERR_STR = '\"not an dateTime\"^^xsd:dateTime'; // TODO: Consider inlining all with 'const enum'\n\nvar TypeURL;\n\n(function (TypeURL) {\n  TypeURL[\"XSD_ANY_URI\"] = \"http://www.w3.org/2001/XMLSchema#anyURI\";\n  TypeURL[\"XSD_STRING\"] = \"http://www.w3.org/2001/XMLSchema#string\";\n  TypeURL[\"RDF_LANG_STRING\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\";\n  TypeURL[\"XSD_BOOLEAN\"] = \"http://www.w3.org/2001/XMLSchema#boolean\";\n  TypeURL[\"XSD_DATE_TIME\"] = \"http://www.w3.org/2001/XMLSchema#dateTime\";\n  TypeURL[\"XSD_DATE\"] = \"http://www.w3.org/2001/XMLSchema#date\"; // Numeric types\n\n  TypeURL[\"XSD_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#integer\";\n  TypeURL[\"XSD_DECIMAL\"] = \"http://www.w3.org/2001/XMLSchema#decimal\";\n  TypeURL[\"XSD_FLOAT\"] = \"http://www.w3.org/2001/XMLSchema#float\";\n  TypeURL[\"XSD_DOUBLE\"] = \"http://www.w3.org/2001/XMLSchema#double\"; // Derived numeric types\n\n  TypeURL[\"XSD_NON_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonPositiveInteger\";\n  TypeURL[\"XSD_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#negativeInteger\";\n  TypeURL[\"XSD_LONG\"] = \"http://www.w3.org/2001/XMLSchema#long\";\n  TypeURL[\"XSD_INT\"] = \"http://www.w3.org/2001/XMLSchema#int\";\n  TypeURL[\"XSD_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#short\";\n  TypeURL[\"XSD_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#byte\";\n  TypeURL[\"XSD_NON_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\";\n  TypeURL[\"XSD_UNSIGNED_LONG\"] = \"http://www.w3.org/2001/XMLSchema#unsignedLong\";\n  TypeURL[\"XSD_UNSIGNED_INT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedInt\";\n  TypeURL[\"XSD_UNSIGNED_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedShort\";\n  TypeURL[\"XSD_UNSIGNED_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#unsignedByte\";\n  TypeURL[\"XSD_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#positiveInteger\"; // Other types\n\n  TypeURL[\"XSD_DAYTIME_DURATION\"] = \"http://www.w3.org/2001/XMLSchema#dayTimeDuration\";\n})(TypeURL = exports.TypeURL || (exports.TypeURL = {}));\n\nfunction make(dt) {\n  return DF.namedNode(dt);\n}\n\nexports.make = make; // https://www.w3.org/TR/sparql11-query/#operandDataTypes\n\nvar NumericTypeURL;\n\n(function (NumericTypeURL) {\n  // Numeric types\n  NumericTypeURL[\"XSD_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#integer\";\n  NumericTypeURL[\"XSD_DECIMAL\"] = \"http://www.w3.org/2001/XMLSchema#decimal\";\n  NumericTypeURL[\"XSD_FLOAT\"] = \"http://www.w3.org/2001/XMLSchema#float\";\n  NumericTypeURL[\"XSD_DOUBLE\"] = \"http://www.w3.org/2001/XMLSchema#double\"; // Derived numeric types\n\n  NumericTypeURL[\"XSD_NON_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonPositiveInteger\";\n  NumericTypeURL[\"XSD_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#negativeInteger\";\n  NumericTypeURL[\"XSD_LONG\"] = \"http://www.w3.org/2001/XMLSchema#long\";\n  NumericTypeURL[\"XSD_INT\"] = \"http://www.w3.org/2001/XMLSchema#int\";\n  NumericTypeURL[\"XSD_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#short\";\n  NumericTypeURL[\"XSD_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#byte\";\n  NumericTypeURL[\"XSD_NON_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\";\n  NumericTypeURL[\"XSD_UNSIGNED_LONG\"] = \"http://www.w3.org/2001/XMLSchema#unsignedLong\";\n  NumericTypeURL[\"XSD_UNSIGNED_INT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedInt\";\n  NumericTypeURL[\"XSD_UNSIGNED_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedShort\";\n  NumericTypeURL[\"XSD_UNSIGNED_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#unsignedByte\";\n  NumericTypeURL[\"XSD_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#positiveInteger\";\n})(NumericTypeURL = exports.NumericTypeURL || (exports.NumericTypeURL = {}));\n\nvar DerivedIntegerTypeURL;\n\n(function (DerivedIntegerTypeURL) {\n  DerivedIntegerTypeURL[\"XSD_NON_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonPositiveInteger\";\n  DerivedIntegerTypeURL[\"XSD_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#negativeInteger\";\n  DerivedIntegerTypeURL[\"XSD_LONG\"] = \"http://www.w3.org/2001/XMLSchema#long\";\n  DerivedIntegerTypeURL[\"XSD_INT\"] = \"http://www.w3.org/2001/XMLSchema#int\";\n  DerivedIntegerTypeURL[\"XSD_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#short\";\n  DerivedIntegerTypeURL[\"XSD_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#byte\";\n  DerivedIntegerTypeURL[\"XSD_NON_NEGATIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\";\n  DerivedIntegerTypeURL[\"XSD_UNSIGNED_LONG\"] = \"http://www.w3.org/2001/XMLSchema#unsignedLong\";\n  DerivedIntegerTypeURL[\"XSD_UNSIGNED_INT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedInt\";\n  DerivedIntegerTypeURL[\"XSD_UNSIGNED_SHORT\"] = \"http://www.w3.org/2001/XMLSchema#unsignedShort\";\n  DerivedIntegerTypeURL[\"XSD_UNSIGNED_BYTE\"] = \"http://www.w3.org/2001/XMLSchema#unsignedByte\";\n  DerivedIntegerTypeURL[\"XSD_POSITIVE_INTEGER\"] = \"http://www.w3.org/2001/XMLSchema#positiveInteger\";\n})(DerivedIntegerTypeURL = exports.DerivedIntegerTypeURL || (exports.DerivedIntegerTypeURL = {}));\n\nexports.NumericTypeURLs = immutable_1.Set(Object.values(NumericTypeURL));\nexports.DerivedIntegerTypeURLs = immutable_1.Set(Object.values(DerivedIntegerTypeURL));\nexports.commonTerms = {\n  true: DF.literal('true', DF.namedNode(TypeURL.XSD_BOOLEAN)),\n  false: DF.literal('false', DF.namedNode(TypeURL.XSD_BOOLEAN))\n};\nexports.PrimitiveNumericTypes = immutable_1.Set(['integer', 'decimal', 'float', 'double']);\n\nfunction type(typeURL) {\n  switch (typeURL) {\n    case null:\n    case undefined:\n    case '':\n    case TypeURL.XSD_ANY_URI:\n      return 'string';\n\n    case TypeURL.XSD_STRING:\n      return 'string';\n\n    case TypeURL.RDF_LANG_STRING:\n      return 'langString';\n\n    case TypeURL.XSD_DATE_TIME:\n      return 'date';\n\n    case TypeURL.XSD_BOOLEAN:\n      return 'boolean';\n\n    case TypeURL.XSD_DECIMAL:\n      return 'decimal';\n\n    case TypeURL.XSD_FLOAT:\n      return 'float';\n\n    case TypeURL.XSD_DOUBLE:\n      return 'double';\n\n    case TypeURL.XSD_INTEGER:\n    case TypeURL.XSD_NON_POSITIVE_INTEGER:\n    case TypeURL.XSD_NEGATIVE_INTEGER:\n    case TypeURL.XSD_LONG:\n    case TypeURL.XSD_INT:\n    case TypeURL.XSD_SHORT:\n    case TypeURL.XSD_BYTE:\n    case TypeURL.XSD_NON_NEGATIVE_INTEGER:\n    case TypeURL.XSD_UNSIGNED_LONG:\n    case TypeURL.XSD_UNSIGNED_INT:\n    case TypeURL.XSD_UNSIGNED_SHORT:\n    case TypeURL.XSD_UNSIGNED_BYTE:\n    case TypeURL.XSD_POSITIVE_INTEGER:\n      return 'integer';\n\n    default:\n      return 'other';\n  }\n}\n\nexports.type = type; // If datatypes get lost or lose specificity during operations, we can insert a\n// concrete type, since categories should remain the same. This mostly (only)\n// relevant for integer subtypes.\n\nconst _decategorize = immutable_1.Map([['integer', TypeURL.XSD_INTEGER], ['float', TypeURL.XSD_FLOAT], ['double', TypeURL.XSD_DOUBLE], ['decimal', TypeURL.XSD_DECIMAL]]);\n\nfunction decategorize(cat) {\n  return _decategorize.get(cat);\n}\n\nexports.decategorize = decategorize; // TODO: Remove unneeded double typing\n\nvar RegularOperator;\n\n(function (RegularOperator) {\n  // Operator mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  RegularOperator[\"NOT\"] = \"!\";\n  RegularOperator[\"UMINUS\"] = \"UMINUS\";\n  RegularOperator[\"UPLUS\"] = \"UPLUS\"; // LOGICAL_AND // See SpecialOperators\n  // LOGICAL_OR  // See SpecialOperators\n\n  RegularOperator[\"EQUAL\"] = \"=\";\n  RegularOperator[\"NOT_EQUAL\"] = \"!=\";\n  RegularOperator[\"LT\"] = \"<\";\n  RegularOperator[\"GT\"] = \">\";\n  RegularOperator[\"LTE\"] = \"<=\";\n  RegularOperator[\"GTE\"] = \">=\";\n  RegularOperator[\"MULTIPLICATION\"] = \"*\";\n  RegularOperator[\"DIVISION\"] = \"/\";\n  RegularOperator[\"ADDITION\"] = \"+\";\n  RegularOperator[\"SUBTRACTION\"] = \"-\"; // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // See SpecialOperators\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n\n  RegularOperator[\"IS_IRI\"] = \"isiri\";\n  RegularOperator[\"IS_BLANK\"] = \"isblank\";\n  RegularOperator[\"IS_LITERAL\"] = \"isliteral\";\n  RegularOperator[\"IS_NUMERIC\"] = \"isnumeric\";\n  RegularOperator[\"STR\"] = \"str\";\n  RegularOperator[\"LANG\"] = \"lang\";\n  RegularOperator[\"DATATYPE\"] = \"datatype\"; // IRI = 'iri', (see special operators)\n  // URI = 'uri', (see special operators)\n  // BNODE = 'BNODE', (see special operators)\n\n  RegularOperator[\"STRDT\"] = \"strdt\";\n  RegularOperator[\"STRLANG\"] = \"strlang\";\n  RegularOperator[\"UUID\"] = \"uuid\";\n  RegularOperator[\"STRUUID\"] = \"struuid\"; // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-strings\n\n  RegularOperator[\"STRLEN\"] = \"strlen\";\n  RegularOperator[\"SUBSTR\"] = \"substr\";\n  RegularOperator[\"UCASE\"] = \"ucase\";\n  RegularOperator[\"LCASE\"] = \"lcase\";\n  RegularOperator[\"STRSTARTS\"] = \"strstarts\";\n  RegularOperator[\"STRENDS\"] = \"strends\";\n  RegularOperator[\"CONTAINS\"] = \"contains\";\n  RegularOperator[\"STRBEFORE\"] = \"strbefore\";\n  RegularOperator[\"STRAFTER\"] = \"strafter\";\n  RegularOperator[\"ENCODE_FOR_URI\"] = \"encode_for_uri\"; // CONCAT = 'concat' (see special operators)\n\n  RegularOperator[\"LANG_MATCHES\"] = \"langmatches\";\n  RegularOperator[\"REGEX\"] = \"regex\";\n  RegularOperator[\"REPLACE\"] = \"replace\"; // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n\n  RegularOperator[\"ABS\"] = \"abs\";\n  RegularOperator[\"ROUND\"] = \"round\";\n  RegularOperator[\"CEIL\"] = \"ceil\";\n  RegularOperator[\"FLOOR\"] = \"floor\";\n  RegularOperator[\"RAND\"] = \"rand\"; // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  // NOW = 'now' (see special operators)\n\n  RegularOperator[\"YEAR\"] = \"year\";\n  RegularOperator[\"MONTH\"] = \"month\";\n  RegularOperator[\"DAY\"] = \"day\";\n  RegularOperator[\"HOURS\"] = \"hours\";\n  RegularOperator[\"MINUTES\"] = \"minutes\";\n  RegularOperator[\"SECONDS\"] = \"seconds\";\n  RegularOperator[\"TIMEZONE\"] = \"timezone\";\n  RegularOperator[\"TZ\"] = \"tz\"; // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n\n  RegularOperator[\"MD5\"] = \"md5\";\n  RegularOperator[\"SHA1\"] = \"sha1\";\n  RegularOperator[\"SHA256\"] = \"sha256\";\n  RegularOperator[\"SHA384\"] = \"sha384\";\n  RegularOperator[\"SHA512\"] = \"sha512\"; // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // See Named Operators\n})(RegularOperator = exports.RegularOperator || (exports.RegularOperator = {}));\n\nvar SpecialOperator;\n\n(function (SpecialOperator) {\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  SpecialOperator[\"BOUND\"] = \"bound\";\n  SpecialOperator[\"IF\"] = \"if\";\n  SpecialOperator[\"COALESCE\"] = \"coalesce\"; // EXISTENCE = 'existence',\n\n  SpecialOperator[\"LOGICAL_OR\"] = \"||\";\n  SpecialOperator[\"LOGICAL_AND\"] = \"&&\"; // EQUAL = '=', // See RegularOperators\n\n  SpecialOperator[\"SAME_TERM\"] = \"sameterm\";\n  SpecialOperator[\"IN\"] = \"in\";\n  SpecialOperator[\"NOT_IN\"] = \"notin\"; // Annoying functions\n\n  SpecialOperator[\"CONCAT\"] = \"concat\"; // Context dependant functions\n\n  SpecialOperator[\"NOW\"] = \"now\";\n  SpecialOperator[\"IRI\"] = \"iri\";\n  SpecialOperator[\"URI\"] = \"uri\";\n  SpecialOperator[\"BNODE\"] = \"BNODE\";\n})(SpecialOperator = exports.SpecialOperator || (exports.SpecialOperator = {}));\n\nexports.RegularOperators = immutable_1.Set(Object.values(RegularOperator));\nexports.SpecialOperators = immutable_1.Set(Object.values(SpecialOperator));\nexports.Operators = exports.RegularOperators.union(exports.SpecialOperators);\nvar SetFunction;\n\n(function (SetFunction) {\n  SetFunction[\"COUNT\"] = \"count\";\n  SetFunction[\"SUM\"] = \"sum\";\n  SetFunction[\"MIN\"] = \"min\";\n  SetFunction[\"MAX\"] = \"max\";\n  SetFunction[\"AVG\"] = \"avg\";\n  SetFunction[\"GROUP_CONCAT\"] = \"group_concat\";\n  SetFunction[\"SAMPLE\"] = \"sample\";\n})(SetFunction = exports.SetFunction || (exports.SetFunction = {}));\n\nexports.SetFunctions = immutable_1.Set(Object.values(SetFunction));\nexports.NamedOperators = immutable_1.Set([TypeURL.XSD_STRING, TypeURL.XSD_FLOAT, TypeURL.XSD_DOUBLE, TypeURL.XSD_DECIMAL, TypeURL.XSD_INTEGER, TypeURL.XSD_DATE_TIME, TypeURL.XSD_DATE, TypeURL.XSD_BOOLEAN]);","map":{"version":3,"sources":["../../../lib/util/Consts.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:variable-name\nimport {DataFactory} from 'rdf-data-factory';\nimport { Map, Set } from 'immutable';\nimport * as RDF from 'rdf-js';\n\nconst DF = new DataFactory();\n\nexport const TRUE_STR = '\"true\"^^xsd:boolean';\nexport const FALSE_STR = '\"false\"^^xsd:boolean';\nexport const EVB_ERR_STR = '\"not an dateTime\"^^xsd:dateTime';\n\n// TODO: Consider inlining all with 'const enum'\nexport enum TypeURL {\n  XSD_ANY_URI = 'http://www.w3.org/2001/XMLSchema#anyURI',\n  XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string',\n  RDF_LANG_STRING = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString',\n\n  XSD_BOOLEAN = 'http://www.w3.org/2001/XMLSchema#boolean',\n\n  XSD_DATE_TIME = 'http://www.w3.org/2001/XMLSchema#dateTime',\n  XSD_DATE = 'http://www.w3.org/2001/XMLSchema#date',\n\n  // Numeric types\n  XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer',\n  XSD_DECIMAL = 'http://www.w3.org/2001/XMLSchema#decimal',\n  XSD_FLOAT = 'http://www.w3.org/2001/XMLSchema#float',\n  XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double',\n\n  // Derived numeric types\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n\n  // Other types\n  XSD_DAYTIME_DURATION = 'http://www.w3.org/2001/XMLSchema#dayTimeDuration',\n}\n\nexport function make(dt: TypeURL): RDF.NamedNode {\n  return DF.namedNode(dt);\n}\n\n// https://www.w3.org/TR/sparql11-query/#operandDataTypes\nexport enum NumericTypeURL {\n  // Numeric types\n  XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer',\n  XSD_DECIMAL = 'http://www.w3.org/2001/XMLSchema#decimal',\n  XSD_FLOAT = 'http://www.w3.org/2001/XMLSchema#float',\n  XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double',\n\n  // Derived numeric types\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n}\n\nexport enum DerivedIntegerTypeURL {\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n}\n\nexport const NumericTypeURLs: Set<string> = Set(Object.values(NumericTypeURL));\nexport const DerivedIntegerTypeURLs = Set(Object.values(DerivedIntegerTypeURL));\n\nexport const commonTerms: { [key: string]: RDF.Term } = {\n  true: DF.literal('true', DF.namedNode(TypeURL.XSD_BOOLEAN)),\n  false: DF.literal('false', DF.namedNode(TypeURL.XSD_BOOLEAN)),\n};\n\n// TODO: Rename to primitive\n// https://www.w3.org/TR/xmlschema-2/#built-in-primitive-datatypes\nexport type Type =\n  'string'\n  | 'langString'\n  | 'date'\n  | 'boolean'\n  | 'integer'\n  | 'decimal'\n  | 'float'\n  | 'double'\n  | 'other'\n  | 'nonlexical';\n\nexport type PrimitiveNumericType = 'integer' | 'decimal' | 'float' | 'double';\nexport const PrimitiveNumericTypes = Set(['integer', 'decimal', 'float', 'double']);\n\nexport function type(typeURL: string): Type {\n  switch (typeURL) {\n    case null:\n    case undefined:\n    case '':\n    case TypeURL.XSD_ANY_URI: return 'string';\n    case TypeURL.XSD_STRING: return 'string';\n    case TypeURL.RDF_LANG_STRING: return 'langString';\n    case TypeURL.XSD_DATE_TIME: return 'date';\n    case TypeURL.XSD_BOOLEAN: return 'boolean';\n\n    case TypeURL.XSD_DECIMAL: return 'decimal';\n    case TypeURL.XSD_FLOAT: return 'float';\n    case TypeURL.XSD_DOUBLE: return 'double';\n    case TypeURL.XSD_INTEGER:\n    case TypeURL.XSD_NON_POSITIVE_INTEGER:\n    case TypeURL.XSD_NEGATIVE_INTEGER:\n    case TypeURL.XSD_LONG:\n    case TypeURL.XSD_INT:\n    case TypeURL.XSD_SHORT:\n    case TypeURL.XSD_BYTE:\n    case TypeURL.XSD_NON_NEGATIVE_INTEGER:\n    case TypeURL.XSD_UNSIGNED_LONG:\n    case TypeURL.XSD_UNSIGNED_INT:\n    case TypeURL.XSD_UNSIGNED_SHORT:\n    case TypeURL.XSD_UNSIGNED_BYTE:\n    case TypeURL.XSD_POSITIVE_INTEGER: return 'integer';\n    default: return 'other';\n  }\n}\n\n// If datatypes get lost or lose specificity during operations, we can insert a\n// concrete type, since categories should remain the same. This mostly (only)\n// relevant for integer subtypes.\nconst _decategorize = Map<PrimitiveNumericType, TypeURL>([\n  ['integer', TypeURL.XSD_INTEGER],\n  ['float', TypeURL.XSD_FLOAT],\n  ['double', TypeURL.XSD_DOUBLE],\n  ['decimal', TypeURL.XSD_DECIMAL],\n]);\n\nexport function decategorize(cat: PrimitiveNumericType): TypeURL {\n  return _decategorize.get(cat);\n}\n\n// ----------------------------------------------------------------------------\n// Operators\n// ----------------------------------------------------------------------------\n\nexport type OperatorCategory = 'regular' | 'special';\nexport type Operator = RegularOperator | SpecialOperator;\n\n// TODO: Remove unneeded double typing\nexport enum RegularOperator {\n  // Operator mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  NOT = '!',\n  UMINUS = 'UMINUS',\n  UPLUS = 'UPLUS',\n  // LOGICAL_AND // See SpecialOperators\n  // LOGICAL_OR  // See SpecialOperators\n\n  EQUAL = '=',\n  NOT_EQUAL = '!=',\n  LT = '<',\n  GT = '>',\n  LTE = '<=',\n  GTE = '>=',\n\n  MULTIPLICATION = '*',\n  DIVISION = '/',\n  ADDITION = '+',\n  SUBTRACTION = '-',\n\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // See SpecialOperators\n\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n  IS_IRI = 'isiri',\n  IS_BLANK = 'isblank',\n  IS_LITERAL = 'isliteral',\n  IS_NUMERIC = 'isnumeric',\n  STR = 'str',\n  LANG = 'lang',\n  DATATYPE = 'datatype',\n  // IRI = 'iri', (see special operators)\n  // URI = 'uri', (see special operators)\n  // BNODE = 'BNODE', (see special operators)\n  STRDT = 'strdt',\n  STRLANG = 'strlang',\n  UUID = 'uuid',\n  STRUUID = 'struuid',\n\n  // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-strings\n  STRLEN = 'strlen',\n  SUBSTR = 'substr',\n  UCASE = 'ucase',\n  LCASE = 'lcase',\n  STRSTARTS = 'strstarts',\n  STRENDS = 'strends',\n  CONTAINS = 'contains',\n  STRBEFORE = 'strbefore',\n  STRAFTER = 'strafter',\n  ENCODE_FOR_URI = 'encode_for_uri',\n  // CONCAT = 'concat' (see special operators)\n  LANG_MATCHES = 'langmatches',\n  REGEX = 'regex',\n  REPLACE = 'replace',\n\n  // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n  ABS = 'abs',\n  ROUND = 'round',\n  CEIL = 'ceil',\n  FLOOR = 'floor',\n  RAND = 'rand',\n\n  // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  // NOW = 'now' (see special operators)\n  YEAR = 'year',\n  MONTH = 'month',\n  DAY = 'day',\n  HOURS = 'hours',\n  MINUTES = 'minutes',\n  SECONDS = 'seconds',\n  TIMEZONE = 'timezone',\n  TZ = 'tz',\n\n  // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n  MD5 = 'md5',\n  SHA1 = 'sha1',\n  SHA256 = 'sha256',\n  SHA384 = 'sha384',\n  SHA512 = 'sha512',\n\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // See Named Operators\n}\n\nexport enum SpecialOperator {\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  BOUND = 'bound',\n  IF = 'if',\n  COALESCE = 'coalesce',\n  // EXISTENCE = 'existence',\n  LOGICAL_OR = '||',\n  LOGICAL_AND = '&&',\n  // EQUAL = '=', // See RegularOperators\n  SAME_TERM = 'sameterm',\n  IN = 'in',\n  NOT_IN = 'notin',\n\n  // Annoying functions\n  CONCAT = 'concat', // Has variable arity\n\n  // Context dependant functions\n  NOW = 'now',\n  IRI = 'iri',\n  URI = 'uri',\n  BNODE = 'BNODE',\n}\n\nexport const RegularOperators: Set<string> = Set(Object.values(RegularOperator));\nexport const SpecialOperators: Set<string> = Set(Object.values(SpecialOperator));\nexport const Operators = RegularOperators.union(SpecialOperators);\n\nexport enum SetFunction {\n  COUNT = 'count',\n  SUM = 'sum',\n  MIN = 'min',\n  MAX = 'max',\n  AVG = 'avg',\n  GROUP_CONCAT = 'group_concat',\n  SAMPLE = 'sample',\n}\nexport const SetFunctions = Set(Object.values(SetFunction));\n\nexport type NamedOperator =\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  TypeURL.XSD_STRING\n  | TypeURL.XSD_FLOAT\n  | TypeURL.XSD_DOUBLE\n  | TypeURL.XSD_DECIMAL\n  | TypeURL.XSD_INTEGER\n  | TypeURL.XSD_DATE_TIME\n  | TypeURL.XSD_DATE\n  | TypeURL.XSD_BOOLEAN;\n\nexport const NamedOperators = Set([\n  TypeURL.XSD_STRING,\n  TypeURL.XSD_FLOAT,\n  TypeURL.XSD_DOUBLE,\n  TypeURL.XSD_DECIMAL,\n  TypeURL.XSD_INTEGER,\n  TypeURL.XSD_DATE_TIME,\n  TypeURL.XSD_DATE,\n  TypeURL.XSD_BOOLEAN,\n]);\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}