{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeValueHandlerString = void 0;\n\nconst NodeValueHandlerAdapter_1 = require(\"./NodeValueHandlerAdapter\");\n/**\n * Converts GraphQL strings to RDF string terms, which can have a custom language or datatype.\n */\n\n\nclass NodeValueHandlerString extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {\n  constructor(util, settings) {\n    super('StringValue', util, settings);\n  }\n\n  handle(valueNode, fieldName, convertContext) {\n    const contextEntry = convertContext.context.getContextRaw()[fieldName];\n    let language = null;\n    let datatype = null;\n\n    if (contextEntry && typeof contextEntry !== 'string') {\n      if (contextEntry['@language']) {\n        language = contextEntry['@language'];\n      } else if (contextEntry['@type']) {\n        datatype = this.util.dataFactory.namedNode(contextEntry['@type']);\n      }\n    }\n\n    return {\n      terms: [this.util.dataFactory.literal(valueNode.value, language || datatype)]\n    };\n  }\n\n}\n\nexports.NodeValueHandlerString = NodeValueHandlerString;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerString.js"],"names":["Object","defineProperty","exports","value","NodeValueHandlerString","NodeValueHandlerAdapter_1","require","NodeValueHandlerAdapter","constructor","util","settings","handle","valueNode","fieldName","convertContext","contextEntry","context","getContextRaw","language","datatype","dataFactory","namedNode","terms","literal"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,2BAAD,CAAzC;AACA;AACA;AACA;;;AACA,MAAMF,sBAAN,SAAqCC,yBAAyB,CAACE,uBAA/D,CAAuF;AACnFC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAM,aAAN,EAAqBD,IAArB,EAA2BC,QAA3B;AACH;;AACDC,EAAAA,MAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,cAAvB,EAAuC;AACzC,UAAMC,YAAY,GAAGD,cAAc,CAACE,OAAf,CAAuBC,aAAvB,GAAuCJ,SAAvC,CAArB;AACA,QAAIK,QAAQ,GAAG,IAAf;AACA,QAAIC,QAAQ,GAAG,IAAf;;AACA,QAAIJ,YAAY,IAAI,OAAOA,YAAP,KAAwB,QAA5C,EAAsD;AAClD,UAAIA,YAAY,CAAC,WAAD,CAAhB,EAA+B;AAC3BG,QAAAA,QAAQ,GAAGH,YAAY,CAAC,WAAD,CAAvB;AACH,OAFD,MAGK,IAAIA,YAAY,CAAC,OAAD,CAAhB,EAA2B;AAC5BI,QAAAA,QAAQ,GAAG,KAAKV,IAAL,CAAUW,WAAV,CAAsBC,SAAtB,CAAgCN,YAAY,CAAC,OAAD,CAA5C,CAAX;AACH;AACJ;;AACD,WAAO;AAAEO,MAAAA,KAAK,EAAE,CAAC,KAAKb,IAAL,CAAUW,WAAV,CAAsBG,OAAtB,CAA8BX,SAAS,CAACT,KAAxC,EAA+Ce,QAAQ,IAAIC,QAA3D,CAAD;AAAT,KAAP;AACH;;AAjBkF;;AAmBvFjB,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeValueHandlerString = void 0;\nconst NodeValueHandlerAdapter_1 = require(\"./NodeValueHandlerAdapter\");\n/**\n * Converts GraphQL strings to RDF string terms, which can have a custom language or datatype.\n */\nclass NodeValueHandlerString extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {\n    constructor(util, settings) {\n        super('StringValue', util, settings);\n    }\n    handle(valueNode, fieldName, convertContext) {\n        const contextEntry = convertContext.context.getContextRaw()[fieldName];\n        let language = null;\n        let datatype = null;\n        if (contextEntry && typeof contextEntry !== 'string') {\n            if (contextEntry['@language']) {\n                language = contextEntry['@language'];\n            }\n            else if (contextEntry['@type']) {\n                datatype = this.util.dataFactory.namedNode(contextEntry['@type']);\n            }\n        }\n        return { terms: [this.util.dataFactory.literal(valueNode.value, language || datatype)] };\n    }\n}\nexports.NodeValueHandlerString = NodeValueHandlerString;\n//# sourceMappingURL=NodeValueHandlerString.js.map"]},"metadata":{},"sourceType":"script"}