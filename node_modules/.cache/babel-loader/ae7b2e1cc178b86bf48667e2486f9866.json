{"ast":null,"code":"import MutationFunctionHandler from './MutationFunctionHandler';\nimport { hasPlainObjectArgs } from './valueUtils';\n/**\n * Returns a function that deletes all existing values\n * for the path, and then adds the given values to the path.\n *\n * Requires:\n * - a delete function on the path proxy.\n * - an add function on the path proxy.\n */\n\nexport default class SetFunctionHandler extends MutationFunctionHandler {\n  handle(pathData, path) {\n    return (...args) => {\n      // First, delete all existing values for the property/properties\n      const deletePath = !hasPlainObjectArgs(args) ? // When a single property is given, delete all of its values\n      path.delete() : // When a map of properties is given, delete all of their values\n      Object.keys(args[0]).reduce((previousPath, property) => previousPath.delete({\n        [property]: []\n      }), path); // Next, insert the new values\n\n      return deletePath.add(...args);\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/ldflex/module/SetFunctionHandler.js"],"names":["MutationFunctionHandler","hasPlainObjectArgs","SetFunctionHandler","handle","pathData","path","args","deletePath","delete","Object","keys","reduce","previousPath","property","add"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,2BAApC;AACA,SAASC,kBAAT,QAAmC,cAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,kBAAN,SAAiCF,uBAAjC,CAAyD;AACtEG,EAAAA,MAAM,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACrB,WAAO,CAAC,GAAGC,IAAJ,KAAa;AAClB;AACA,YAAMC,UAAU,GAAG,CAACN,kBAAkB,CAACK,IAAD,CAAnB,GAA4B;AAC/CD,MAAAA,IAAI,CAACG,MAAL,EADmB,GACH;AAChBC,MAAAA,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAAC,CAAD,CAAhB,EAAqBK,MAArB,CAA4B,CAACC,YAAD,EAAeC,QAAf,KAA4BD,YAAY,CAACJ,MAAb,CAAoB;AAC1E,SAACK,QAAD,GAAY;AAD8D,OAApB,CAAxD,EAEIR,IAFJ,CAFA,CAFkB,CAMP;;AAEX,aAAOE,UAAU,CAACO,GAAX,CAAe,GAAGR,IAAlB,CAAP;AACD,KATD;AAUD;;AAZqE","sourcesContent":["import MutationFunctionHandler from './MutationFunctionHandler';\nimport { hasPlainObjectArgs } from './valueUtils';\n/**\n * Returns a function that deletes all existing values\n * for the path, and then adds the given values to the path.\n *\n * Requires:\n * - a delete function on the path proxy.\n * - an add function on the path proxy.\n */\n\nexport default class SetFunctionHandler extends MutationFunctionHandler {\n  handle(pathData, path) {\n    return (...args) => {\n      // First, delete all existing values for the property/properties\n      const deletePath = !hasPlainObjectArgs(args) ? // When a single property is given, delete all of its values\n      path.delete() : // When a map of properties is given, delete all of their values\n      Object.keys(args[0]).reduce((previousPath, property) => previousPath.delete({\n        [property]: []\n      }), path); // Next, insert the new values\n\n      return deletePath.add(...args);\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}