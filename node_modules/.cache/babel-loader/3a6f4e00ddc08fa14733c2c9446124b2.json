{"ast":null,"code":"import { getThen } from './promiseUtils';\nimport { getFirstItem } from './iterableUtils';\n/**\n * Thenable handler that resolves to either the subject\n * of the first item of the results.\n *\n * Requires:\n *  - (optional) a subject on the path data\n *  - (optional) a subject on the path proxy\n *  - (optional) results on the path proxy\n */\n\nexport default class ThenHandler {\n  handle({\n    subject\n  }, pathProxy) {\n    // Resolve to either the subject (zero-length path) or the first result\n    return subject ? // If the subject is not a promise, it has already been resolved;\n    // consumers should not resolve it, but access its properties directly.\n    // This avoids infinite `then` chains when `await`ing this path.\n    subject.then && getThen(() => pathProxy.subject) : // Otherwise, return the first result of this path\n    getThen(() => getFirstItem(pathProxy.results));\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/ldflex/module/ThenHandler.js"],"names":["getThen","getFirstItem","ThenHandler","handle","subject","pathProxy","then","results"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC/BC,EAAAA,MAAM,CAAC;AACLC,IAAAA;AADK,GAAD,EAEHC,SAFG,EAEQ;AACZ;AACA,WAAOD,OAAO,GAAG;AACjB;AACA;AACAA,IAAAA,OAAO,CAACE,IAAR,IAAgBN,OAAO,CAAC,MAAMK,SAAS,CAACD,OAAjB,CAHT,GAGqC;AACnDJ,IAAAA,OAAO,CAAC,MAAMC,YAAY,CAACI,SAAS,CAACE,OAAX,CAAnB,CAJP;AAKD;;AAV8B","sourcesContent":["import { getThen } from './promiseUtils';\nimport { getFirstItem } from './iterableUtils';\n/**\n * Thenable handler that resolves to either the subject\n * of the first item of the results.\n *\n * Requires:\n *  - (optional) a subject on the path data\n *  - (optional) a subject on the path proxy\n *  - (optional) results on the path proxy\n */\n\nexport default class ThenHandler {\n  handle({\n    subject\n  }, pathProxy) {\n    // Resolve to either the subject (zero-length path) or the first result\n    return subject ? // If the subject is not a promise, it has already been resolved;\n    // consumers should not resolve it, but access its properties directly.\n    // This avoids infinite `then` chains when `await`ing this path.\n    subject.then && getThen(() => pathProxy.subject) : // Otherwise, return the first result of this path\n    getThen(() => getFirstItem(pathProxy.results));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}