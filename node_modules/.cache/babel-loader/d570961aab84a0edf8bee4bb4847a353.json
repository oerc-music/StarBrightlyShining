{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfJoinSymmetricHash = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst bus_rdf_join_1 = require(\"@comunica/bus-rdf-join\");\n\nconst asyncjoin_1 = require(\"asyncjoin\");\n/**\n * A comunica Hash RDF Join Actor.\n */\n\n\nclass ActorRdfJoinSymmetricHash extends bus_rdf_join_1.ActorRdfJoin {\n  constructor(args) {\n    super(args, 2);\n  }\n  /**\n   * Creates a hash of the given bindings by concatenating the results of the given variables.\n   * This function will not sort the variables and expects them to be in the same order for every call.\n   * @param {Bindings} bindings\n   * @param {string[]} variables\n   * @returns {string}\n   */\n\n\n  static hash(bindings, variables) {\n    return variables.filter(variable => bindings.has(variable)).map(variable => bindings.get(variable).value).join('');\n  }\n\n  async getOutput(action) {\n    const variables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(action);\n    const join = new asyncjoin_1.SymmetricHashJoin(action.entries[0].bindingsStream, action.entries[1].bindingsStream, entry => ActorRdfJoinSymmetricHash.hash(entry, variables), bus_rdf_join_1.ActorRdfJoin.join);\n    return {\n      type: 'bindings',\n      bindingsStream: join,\n      variables: bus_rdf_join_1.ActorRdfJoin.joinVariables(action),\n      canContainUndefs: false\n    };\n  }\n\n  async getIterations(action) {\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n    return (await bus_query_operation_1.getMetadata(action.entries[0])).totalItems + (await bus_query_operation_1.getMetadata(action.entries[1])).totalItems;\n  }\n\n}\n\nexports.ActorRdfJoinSymmetricHash = ActorRdfJoinSymmetricHash;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-join-symmetrichash/lib/ActorRdfJoinSymmetricHash.js"],"names":["Object","defineProperty","exports","value","ActorRdfJoinSymmetricHash","bus_query_operation_1","require","bus_rdf_join_1","asyncjoin_1","ActorRdfJoin","constructor","args","hash","bindings","variables","filter","variable","has","map","get","join","getOutput","action","overlappingVariables","SymmetricHashJoin","entries","bindingsStream","entry","type","joinVariables","canContainUndefs","getIterations","getMetadata","totalItems"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,WAAD,CAA3B;AACA;AACA;AACA;;;AACA,MAAMF,yBAAN,SAAwCG,cAAc,CAACE,YAAvD,CAAoE;AAChEC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,CAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACe,SAAJC,IAAI,CAACC,QAAD,EAAWC,SAAX,EAAsB;AAC7B,WAAOA,SAAS,CAACC,MAAV,CAAiBC,QAAQ,IAAIH,QAAQ,CAACI,GAAT,CAAaD,QAAb,CAA7B,EAAqDE,GAArD,CAAyDF,QAAQ,IAAIH,QAAQ,CAACM,GAAT,CAAaH,QAAb,EAAuBb,KAA5F,EAAmGiB,IAAnG,CAAwG,EAAxG,CAAP;AACH;;AACc,QAATC,SAAS,CAACC,MAAD,EAAS;AACpB,UAAMR,SAAS,GAAGP,cAAc,CAACE,YAAf,CAA4Bc,oBAA5B,CAAiDD,MAAjD,CAAlB;AACA,UAAMF,IAAI,GAAG,IAAIZ,WAAW,CAACgB,iBAAhB,CAAkCF,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBC,cAApD,EAAoEJ,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBC,cAAtF,EAAsGC,KAAK,IAAIvB,yBAAyB,CAACQ,IAA1B,CAA+Be,KAA/B,EAAsCb,SAAtC,CAA/G,EAAiKP,cAAc,CAACE,YAAf,CAA4BW,IAA7L,CAAb;AACA,WAAO;AACHQ,MAAAA,IAAI,EAAE,UADH;AAEHF,MAAAA,cAAc,EAAEN,IAFb;AAGHN,MAAAA,SAAS,EAAEP,cAAc,CAACE,YAAf,CAA4BoB,aAA5B,CAA0CP,MAA1C,CAHR;AAIHQ,MAAAA,gBAAgB,EAAE;AAJf,KAAP;AAMH;;AACkB,QAAbC,aAAa,CAACT,MAAD,EAAS;AACxB;AACA,WAAO,CAAC,MAAMjB,qBAAqB,CAAC2B,WAAtB,CAAkCV,MAAM,CAACG,OAAP,CAAe,CAAf,CAAlC,CAAP,EAA6DQ,UAA7D,GAA0E,CAAC,MAAM5B,qBAAqB,CAAC2B,WAAtB,CAAkCV,MAAM,CAACG,OAAP,CAAe,CAAf,CAAlC,CAAP,EAA6DQ,UAA9I;AACH;;AA3B+D;;AA6BpE/B,OAAO,CAACE,yBAAR,GAAoCA,yBAApC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfJoinSymmetricHash = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst bus_rdf_join_1 = require(\"@comunica/bus-rdf-join\");\nconst asyncjoin_1 = require(\"asyncjoin\");\n/**\n * A comunica Hash RDF Join Actor.\n */\nclass ActorRdfJoinSymmetricHash extends bus_rdf_join_1.ActorRdfJoin {\n    constructor(args) {\n        super(args, 2);\n    }\n    /**\n     * Creates a hash of the given bindings by concatenating the results of the given variables.\n     * This function will not sort the variables and expects them to be in the same order for every call.\n     * @param {Bindings} bindings\n     * @param {string[]} variables\n     * @returns {string}\n     */\n    static hash(bindings, variables) {\n        return variables.filter(variable => bindings.has(variable)).map(variable => bindings.get(variable).value).join('');\n    }\n    async getOutput(action) {\n        const variables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(action);\n        const join = new asyncjoin_1.SymmetricHashJoin(action.entries[0].bindingsStream, action.entries[1].bindingsStream, entry => ActorRdfJoinSymmetricHash.hash(entry, variables), bus_rdf_join_1.ActorRdfJoin.join);\n        return {\n            type: 'bindings',\n            bindingsStream: join,\n            variables: bus_rdf_join_1.ActorRdfJoin.joinVariables(action),\n            canContainUndefs: false,\n        };\n    }\n    async getIterations(action) {\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        return (await bus_query_operation_1.getMetadata(action.entries[0])).totalItems + (await bus_query_operation_1.getMetadata(action.entries[1])).totalItems;\n    }\n}\nexports.ActorRdfJoinSymmetricHash = ActorRdfJoinSymmetricHash;\n//# sourceMappingURL=ActorRdfJoinSymmetricHash.js.map"]},"metadata":{},"sourceType":"script"}