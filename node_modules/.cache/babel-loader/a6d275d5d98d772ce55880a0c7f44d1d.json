{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MediatorCombineUnion = void 0;\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * A comunica mediator that takes the union of all actor results.\n *\n * The actors that are registered first will have priority on setting overlapping fields.\n */\n\n\nclass MediatorCombineUnion extends core_1.Mediator {\n  constructor(args) {\n    super(args);\n    this.combiner = this.createCombiner();\n  }\n\n  async mediate(action) {\n    let testResults;\n\n    try {\n      testResults = this.publish(action);\n    } catch (_a) {\n      testResults = [];\n    } // Delegate test errors.\n\n\n    await Promise.all(testResults.map(({\n      reply\n    }) => reply)); // Run action on all actors.\n\n    const results = await Promise.all(testResults.map(result => result.actor.runObservable(action))); // Return the combined results.\n\n    return this.combiner(results);\n  }\n\n  mediateWith() {\n    throw new Error('Method not supported.');\n  }\n\n  createCombiner() {\n    return results => {\n      const data = {};\n      data[this.field] = {}; // eslint-disable-next-line unicorn/prefer-spread\n\n      [{}].concat(results.map(result => result[this.field])).forEach((value, index, arr) => {\n        data[this.field] = Object.assign(Object.assign({}, value), data[this.field]);\n      });\n      return data;\n    };\n  }\n\n}\n\nexports.MediatorCombineUnion = MediatorCombineUnion;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/mediator-combine-union/lib/MediatorCombineUnion.js"],"names":["Object","defineProperty","exports","value","MediatorCombineUnion","core_1","require","Mediator","constructor","args","combiner","createCombiner","mediate","action","testResults","publish","_a","Promise","all","map","reply","results","result","actor","runObservable","mediateWith","Error","data","field","concat","forEach","index","arr","assign"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,oBAAN,SAAmCC,MAAM,CAACE,QAA1C,CAAmD;AAC/CC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACA,SAAKC,QAAL,GAAgB,KAAKC,cAAL,EAAhB;AACH;;AACY,QAAPC,OAAO,CAACC,MAAD,EAAS;AAClB,QAAIC,WAAJ;;AACA,QAAI;AACAA,MAAAA,WAAW,GAAG,KAAKC,OAAL,CAAaF,MAAb,CAAd;AACH,KAFD,CAGA,OAAOG,EAAP,EAAW;AACPF,MAAAA,WAAW,GAAG,EAAd;AACH,KAPiB,CAQlB;;;AACA,UAAMG,OAAO,CAACC,GAAR,CAAYJ,WAAW,CAACK,GAAZ,CAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeA,KAA/B,CAAZ,CAAN,CATkB,CAUlB;;AACA,UAAMC,OAAO,GAAG,MAAMJ,OAAO,CAACC,GAAR,CAAYJ,WAAW,CAACK,GAAZ,CAAgBG,MAAM,IAAIA,MAAM,CAACC,KAAP,CAAaC,aAAb,CAA2BX,MAA3B,CAA1B,CAAZ,CAAtB,CAXkB,CAYlB;;AACA,WAAO,KAAKH,QAAL,CAAcW,OAAd,CAAP;AACH;;AACDI,EAAAA,WAAW,GAAG;AACV,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACDf,EAAAA,cAAc,GAAG;AACb,WAAQU,OAAD,IAAa;AAChB,YAAMM,IAAI,GAAG,EAAb;AACAA,MAAAA,IAAI,CAAC,KAAKC,KAAN,CAAJ,GAAmB,EAAnB,CAFgB,CAGhB;;AACA,OAAC,EAAD,EAAKC,MAAL,CAAYR,OAAO,CAACF,GAAR,CAAaG,MAAD,IAAYA,MAAM,CAAC,KAAKM,KAAN,CAA9B,CAAZ,EACKE,OADL,CACa,CAAC3B,KAAD,EAAQ4B,KAAR,EAAeC,GAAf,KAAuB;AAChCL,QAAAA,IAAI,CAAC,KAAKC,KAAN,CAAJ,GAAmB5B,MAAM,CAACiC,MAAP,CAAcjC,MAAM,CAACiC,MAAP,CAAc,EAAd,EAAkB9B,KAAlB,CAAd,EAAwCwB,IAAI,CAAC,KAAKC,KAAN,CAA5C,CAAnB;AACH,OAHD;AAIA,aAAOD,IAAP;AACH,KATD;AAUH;;AAlC8C;;AAoCnDzB,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MediatorCombineUnion = void 0;\nconst core_1 = require(\"@comunica/core\");\n/**\n * A comunica mediator that takes the union of all actor results.\n *\n * The actors that are registered first will have priority on setting overlapping fields.\n */\nclass MediatorCombineUnion extends core_1.Mediator {\n    constructor(args) {\n        super(args);\n        this.combiner = this.createCombiner();\n    }\n    async mediate(action) {\n        let testResults;\n        try {\n            testResults = this.publish(action);\n        }\n        catch (_a) {\n            testResults = [];\n        }\n        // Delegate test errors.\n        await Promise.all(testResults.map(({ reply }) => reply));\n        // Run action on all actors.\n        const results = await Promise.all(testResults.map(result => result.actor.runObservable(action)));\n        // Return the combined results.\n        return this.combiner(results);\n    }\n    mediateWith() {\n        throw new Error('Method not supported.');\n    }\n    createCombiner() {\n        return (results) => {\n            const data = {};\n            data[this.field] = {};\n            // eslint-disable-next-line unicorn/prefer-spread\n            [{}].concat(results.map((result) => result[this.field]))\n                .forEach((value, index, arr) => {\n                data[this.field] = Object.assign(Object.assign({}, value), data[this.field]);\n            });\n            return data;\n        };\n    }\n}\nexports.MediatorCombineUnion = MediatorCombineUnion;\n//# sourceMappingURL=MediatorCombineUnion.js.map"]},"metadata":{},"sourceType":"script"}