{"ast":null,"code":"import { toIterablePromise } from 'ldflex';\nimport auth from 'solid-auth-client';\n/**\n * Creates a document for every result with the given contents.\n * Requires:\n * - the `root[...]` resolver\n */\n\nexport default class PutHandler {\n  handle(pathData, path) {\n    const {\n      root\n    } = path; // Return an iterator over the created documents\n\n    return (body = '', contentType = 'text/turtle') => toIterablePromise(async function* () {\n      // Collect all unique URLs from the path\n      const urls = new Set();\n\n      for await (const result of path) {\n        const match = /^https?:\\/\\/[^#]+/.exec(result ? result.value : '');\n        if (match) urls.add(match[0]);\n      } // Create and execute HTTP requests for every URL\n\n\n      const requests = [...urls].map(url => auth.fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': contentType\n        },\n        body\n      }));\n      await Promise.all(requests); // Return paths to the created documents\n\n      for (const url of urls) yield root[url];\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/query-ldflex/module/handlers/PutHandler.js"],"names":["toIterablePromise","auth","PutHandler","handle","pathData","path","root","body","contentType","urls","Set","result","match","exec","value","add","requests","map","url","fetch","method","headers","Promise","all"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,QAAlC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,UAAN,CAAiB;AAC9BC,EAAAA,MAAM,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACrB,UAAM;AACJC,MAAAA;AADI,QAEFD,IAFJ,CADqB,CAGX;;AAEV,WAAO,CAACE,IAAI,GAAG,EAAR,EAAYC,WAAW,GAAG,aAA1B,KAA4CR,iBAAiB,CAAC,mBAAmB;AACtF;AACA,YAAMS,IAAI,GAAG,IAAIC,GAAJ,EAAb;;AAEA,iBAAW,MAAMC,MAAjB,IAA2BN,IAA3B,EAAiC;AAC/B,cAAMO,KAAK,GAAG,oBAAoBC,IAApB,CAAyBF,MAAM,GAAGA,MAAM,CAACG,KAAV,GAAkB,EAAjD,CAAd;AACA,YAAIF,KAAJ,EAAWH,IAAI,CAACM,GAAL,CAASH,KAAK,CAAC,CAAD,CAAd;AACZ,OAPqF,CAOpF;;;AAGF,YAAMI,QAAQ,GAAG,CAAC,GAAGP,IAAJ,EAAUQ,GAAV,CAAcC,GAAG,IAAIjB,IAAI,CAACkB,KAAL,CAAWD,GAAX,EAAgB;AACpDE,QAAAA,MAAM,EAAE,KAD4C;AAEpDC,QAAAA,OAAO,EAAE;AACP,0BAAgBb;AADT,SAF2C;AAKpDD,QAAAA;AALoD,OAAhB,CAArB,CAAjB;AAOA,YAAMe,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAN,CAjBsF,CAiBzD;;AAE7B,WAAK,MAAME,GAAX,IAAkBT,IAAlB,EAAwB,MAAMH,IAAI,CAACY,GAAD,CAAV;AACzB,KApBmE,CAApE;AAqBD;;AA3B6B","sourcesContent":["import { toIterablePromise } from 'ldflex';\nimport auth from 'solid-auth-client';\n/**\n * Creates a document for every result with the given contents.\n * Requires:\n * - the `root[...]` resolver\n */\n\nexport default class PutHandler {\n  handle(pathData, path) {\n    const {\n      root\n    } = path; // Return an iterator over the created documents\n\n    return (body = '', contentType = 'text/turtle') => toIterablePromise(async function* () {\n      // Collect all unique URLs from the path\n      const urls = new Set();\n\n      for await (const result of path) {\n        const match = /^https?:\\/\\/[^#]+/.exec(result ? result.value : '');\n        if (match) urls.add(match[0]);\n      } // Create and execute HTTP requests for every URL\n\n\n      const requests = [...urls].map(url => auth.fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': contentType\n        },\n        body\n      }));\n      await Promise.all(requests); // Return paths to the created documents\n\n      for (const url of urls) yield root[url];\n    });\n  }\n\n}"]},"metadata":{},"sourceType":"module"}