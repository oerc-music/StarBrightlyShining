{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeValueHandlerList = void 0;\n\nconst NodeValueHandlerAdapter_1 = require(\"./NodeValueHandlerAdapter\");\n/**\n * Converts GraphQL lists to RDF lists if settings.arraysToRdfLists is true, otherwise it converts to multiple values.\n */\n\n\nclass NodeValueHandlerList extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {\n  constructor(util, settings) {\n    super('ListValue', util, settings);\n    this.nodeFirst = this.util.dataFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first');\n    this.nodeRest = this.util.dataFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest');\n    this.nodeNil = this.util.dataFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil');\n  }\n\n  handle(valueNode, fieldName, convertContext) {\n    const listTerms = [];\n    let auxiliaryPatterns = []; // Create terms for list values\n\n    for (const v of valueNode.values) {\n      const subValue = this.util.handleNodeValue(v, fieldName, convertContext);\n\n      for (const term of subValue.terms) {\n        listTerms.push(term);\n      }\n\n      if (subValue.auxiliaryPatterns) {\n        auxiliaryPatterns = auxiliaryPatterns.concat(subValue.auxiliaryPatterns);\n      }\n    }\n\n    if (this.settings.arraysToRdfLists) {\n      // Convert array to RDF list\n      // Create chained list structure\n      const firstListNode = this.util.dataFactory.blankNode();\n      let listNode = firstListNode;\n      let remaining = listTerms.length;\n\n      for (const term of listTerms) {\n        auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeFirst, term, convertContext.graph));\n        const nextListNode = --remaining === 0 ? this.nodeNil : this.util.dataFactory.blankNode();\n        auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeRest, nextListNode, convertContext.graph));\n        listNode = nextListNode;\n      }\n\n      return {\n        terms: [firstListNode],\n        auxiliaryPatterns\n      };\n    } else {\n      // Convert array to multiple terms that will be linked via the same predicate.\n      return {\n        terms: listTerms,\n        auxiliaryPatterns\n      };\n    }\n  }\n\n}\n\nexports.NodeValueHandlerList = NodeValueHandlerList;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerList.js"],"names":["Object","defineProperty","exports","value","NodeValueHandlerList","NodeValueHandlerAdapter_1","require","NodeValueHandlerAdapter","constructor","util","settings","nodeFirst","dataFactory","namedNode","nodeRest","nodeNil","handle","valueNode","fieldName","convertContext","listTerms","auxiliaryPatterns","v","values","subValue","handleNodeValue","term","terms","push","concat","arraysToRdfLists","firstListNode","blankNode","listNode","remaining","length","operationFactory","createPattern","graph","nextListNode"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,2BAAD,CAAzC;AACA;AACA;AACA;;;AACA,MAAMF,oBAAN,SAAmCC,yBAAyB,CAACE,uBAA7D,CAAqF;AACjFC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAM,WAAN,EAAmBD,IAAnB,EAAyBC,QAAzB;AACA,SAAKC,SAAL,GAAiB,KAAKF,IAAL,CAAUG,WAAV,CAAsBC,SAAtB,CAAgC,kDAAhC,CAAjB;AACA,SAAKC,QAAL,GAAgB,KAAKL,IAAL,CAAUG,WAAV,CAAsBC,SAAtB,CAAgC,iDAAhC,CAAhB;AACA,SAAKE,OAAL,GAAe,KAAKN,IAAL,CAAUG,WAAV,CAAsBC,SAAtB,CAAgC,gDAAhC,CAAf;AACH;;AACDG,EAAAA,MAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,cAAvB,EAAuC;AACzC,UAAMC,SAAS,GAAG,EAAlB;AACA,QAAIC,iBAAiB,GAAG,EAAxB,CAFyC,CAGzC;;AACA,SAAK,MAAMC,CAAX,IAAgBL,SAAS,CAACM,MAA1B,EAAkC;AAC9B,YAAMC,QAAQ,GAAG,KAAKf,IAAL,CAAUgB,eAAV,CAA0BH,CAA1B,EAA6BJ,SAA7B,EAAwCC,cAAxC,CAAjB;;AACA,WAAK,MAAMO,IAAX,IAAmBF,QAAQ,CAACG,KAA5B,EAAmC;AAC/BP,QAAAA,SAAS,CAACQ,IAAV,CAAeF,IAAf;AACH;;AACD,UAAIF,QAAQ,CAACH,iBAAb,EAAgC;AAC5BA,QAAAA,iBAAiB,GAAGA,iBAAiB,CAACQ,MAAlB,CAAyBL,QAAQ,CAACH,iBAAlC,CAApB;AACH;AACJ;;AACD,QAAI,KAAKX,QAAL,CAAcoB,gBAAlB,EAAoC;AAChC;AACA;AACA,YAAMC,aAAa,GAAG,KAAKtB,IAAL,CAAUG,WAAV,CAAsBoB,SAAtB,EAAtB;AACA,UAAIC,QAAQ,GAAGF,aAAf;AACA,UAAIG,SAAS,GAAGd,SAAS,CAACe,MAA1B;;AACA,WAAK,MAAMT,IAAX,IAAmBN,SAAnB,EAA8B;AAC1BC,QAAAA,iBAAiB,CAACO,IAAlB,CAAuB,KAAKnB,IAAL,CAAU2B,gBAAV,CAA2BC,aAA3B,CAAyCJ,QAAzC,EAAmD,KAAKtB,SAAxD,EAAmEe,IAAnE,EAAyEP,cAAc,CAACmB,KAAxF,CAAvB;AACA,cAAMC,YAAY,GAAG,EAAEL,SAAF,KAAgB,CAAhB,GAAoB,KAAKnB,OAAzB,GAAmC,KAAKN,IAAL,CAAUG,WAAV,CAAsBoB,SAAtB,EAAxD;AACAX,QAAAA,iBAAiB,CAACO,IAAlB,CAAuB,KAAKnB,IAAL,CAAU2B,gBAAV,CAA2BC,aAA3B,CAAyCJ,QAAzC,EAAmD,KAAKnB,QAAxD,EAAkEyB,YAAlE,EAAgFpB,cAAc,CAACmB,KAA/F,CAAvB;AACAL,QAAAA,QAAQ,GAAGM,YAAX;AACH;;AACD,aAAO;AAAEZ,QAAAA,KAAK,EAAE,CAACI,aAAD,CAAT;AAA0BV,QAAAA;AAA1B,OAAP;AACH,KAbD,MAcK;AACD;AACA,aAAO;AAAEM,QAAAA,KAAK,EAAEP,SAAT;AAAoBC,QAAAA;AAApB,OAAP;AACH;AACJ;;AAtCgF;;AAwCrFnB,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeValueHandlerList = void 0;\nconst NodeValueHandlerAdapter_1 = require(\"./NodeValueHandlerAdapter\");\n/**\n * Converts GraphQL lists to RDF lists if settings.arraysToRdfLists is true, otherwise it converts to multiple values.\n */\nclass NodeValueHandlerList extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {\n    constructor(util, settings) {\n        super('ListValue', util, settings);\n        this.nodeFirst = this.util.dataFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first');\n        this.nodeRest = this.util.dataFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest');\n        this.nodeNil = this.util.dataFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil');\n    }\n    handle(valueNode, fieldName, convertContext) {\n        const listTerms = [];\n        let auxiliaryPatterns = [];\n        // Create terms for list values\n        for (const v of valueNode.values) {\n            const subValue = this.util.handleNodeValue(v, fieldName, convertContext);\n            for (const term of subValue.terms) {\n                listTerms.push(term);\n            }\n            if (subValue.auxiliaryPatterns) {\n                auxiliaryPatterns = auxiliaryPatterns.concat(subValue.auxiliaryPatterns);\n            }\n        }\n        if (this.settings.arraysToRdfLists) {\n            // Convert array to RDF list\n            // Create chained list structure\n            const firstListNode = this.util.dataFactory.blankNode();\n            let listNode = firstListNode;\n            let remaining = listTerms.length;\n            for (const term of listTerms) {\n                auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeFirst, term, convertContext.graph));\n                const nextListNode = --remaining === 0 ? this.nodeNil : this.util.dataFactory.blankNode();\n                auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeRest, nextListNode, convertContext.graph));\n                listNode = nextListNode;\n            }\n            return { terms: [firstListNode], auxiliaryPatterns };\n        }\n        else {\n            // Convert array to multiple terms that will be linked via the same predicate.\n            return { terms: listTerms, auxiliaryPatterns };\n        }\n    }\n}\nexports.NodeValueHandlerList = NodeValueHandlerList;\n//# sourceMappingURL=NodeValueHandlerList.js.map"]},"metadata":{},"sourceType":"script"}