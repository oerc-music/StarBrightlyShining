{"ast":null,"code":"/* global ReadableStream */\nmodule.exports = nodeToWeb;\nmodule.exports.WEBSTREAM_SUPPORT = typeof ReadableStream !== 'undefined';\n\nfunction nodeToWeb(nodeStream) {\n  // Assumes the nodeStream has not ended/closed\n  if (!module.exports.WEBSTREAM_SUPPORT) throw new Error('No web ReadableStream support');\n  var destroyed = false;\n  var listeners = {};\n\n  function start(controller) {\n    listeners['data'] = onData;\n    listeners['end'] = onData;\n    listeners['end'] = onDestroy;\n    listeners['close'] = onDestroy;\n    listeners['error'] = onDestroy;\n\n    for (var name in listeners) nodeStream.on(name, listeners[name]);\n\n    nodeStream.pause();\n\n    function onData(chunk) {\n      if (destroyed) return;\n      controller.enqueue(chunk);\n      nodeStream.pause();\n    }\n\n    function onDestroy(err) {\n      if (destroyed) return;\n      destroyed = true;\n\n      for (var name in listeners) nodeStream.removeListener(name, listeners[name]);\n\n      if (err) controller.error(err);else controller.close();\n    }\n  }\n\n  function pull() {\n    if (destroyed) return;\n    nodeStream.resume();\n  }\n\n  function cancel() {\n    destroyed = true;\n\n    for (var name in listeners) nodeStream.removeListener(name, listeners[name]);\n\n    nodeStream.push(null);\n    nodeStream.pause();\n    if (nodeStream.destroy) nodeStream.destroy();else if (nodeStream.close) nodeStream.close();\n  }\n\n  return new ReadableStream({\n    start: start,\n    pull: pull,\n    cancel: cancel\n  });\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/readable-stream-node-to-web/index.js"],"names":["module","exports","nodeToWeb","WEBSTREAM_SUPPORT","ReadableStream","nodeStream","Error","destroyed","listeners","start","controller","onData","onDestroy","name","on","pause","chunk","enqueue","err","removeListener","error","close","pull","resume","cancel","push","destroy"],"mappings":"AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,iBAAf,GAAmC,OAAOC,cAAP,KAA0B,WAA7D;;AAEA,SAASF,SAAT,CAAoBG,UAApB,EAAgC;AAC9B;AACA,MAAI,CAACL,MAAM,CAACC,OAAP,CAAeE,iBAApB,EAAuC,MAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AAEvC,MAAIC,SAAS,GAAG,KAAhB;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,WAASC,KAAT,CAAgBC,UAAhB,EAA4B;AAC1BF,IAAAA,SAAS,CAAC,MAAD,CAAT,GAAoBG,MAApB;AACAH,IAAAA,SAAS,CAAC,KAAD,CAAT,GAAmBG,MAAnB;AACAH,IAAAA,SAAS,CAAC,KAAD,CAAT,GAAmBI,SAAnB;AACAJ,IAAAA,SAAS,CAAC,OAAD,CAAT,GAAqBI,SAArB;AACAJ,IAAAA,SAAS,CAAC,OAAD,CAAT,GAAqBI,SAArB;;AACA,SAAK,IAAIC,IAAT,IAAiBL,SAAjB,EAA4BH,UAAU,CAACS,EAAX,CAAcD,IAAd,EAAoBL,SAAS,CAACK,IAAD,CAA7B;;AAE5BR,IAAAA,UAAU,CAACU,KAAX;;AAEA,aAASJ,MAAT,CAAiBK,KAAjB,EAAwB;AACtB,UAAIT,SAAJ,EAAe;AACfG,MAAAA,UAAU,CAACO,OAAX,CAAmBD,KAAnB;AACAX,MAAAA,UAAU,CAACU,KAAX;AACD;;AAED,aAASH,SAAT,CAAoBM,GAApB,EAAyB;AACvB,UAAIX,SAAJ,EAAe;AACfA,MAAAA,SAAS,GAAG,IAAZ;;AAEA,WAAK,IAAIM,IAAT,IAAiBL,SAAjB,EAA4BH,UAAU,CAACc,cAAX,CAA0BN,IAA1B,EAAgCL,SAAS,CAACK,IAAD,CAAzC;;AAE5B,UAAIK,GAAJ,EAASR,UAAU,CAACU,KAAX,CAAiBF,GAAjB,EAAT,KACKR,UAAU,CAACW,KAAX;AACN;AACF;;AAED,WAASC,IAAT,GAAiB;AACf,QAAIf,SAAJ,EAAe;AACfF,IAAAA,UAAU,CAACkB,MAAX;AACD;;AAED,WAASC,MAAT,GAAmB;AACjBjB,IAAAA,SAAS,GAAG,IAAZ;;AAEA,SAAK,IAAIM,IAAT,IAAiBL,SAAjB,EAA4BH,UAAU,CAACc,cAAX,CAA0BN,IAA1B,EAAgCL,SAAS,CAACK,IAAD,CAAzC;;AAE5BR,IAAAA,UAAU,CAACoB,IAAX,CAAgB,IAAhB;AACApB,IAAAA,UAAU,CAACU,KAAX;AACA,QAAIV,UAAU,CAACqB,OAAf,EAAwBrB,UAAU,CAACqB,OAAX,GAAxB,KACK,IAAIrB,UAAU,CAACgB,KAAf,EAAsBhB,UAAU,CAACgB,KAAX;AAC5B;;AAED,SAAO,IAAIjB,cAAJ,CAAmB;AAACK,IAAAA,KAAK,EAAEA,KAAR;AAAea,IAAAA,IAAI,EAAEA,IAArB;AAA2BE,IAAAA,MAAM,EAAEA;AAAnC,GAAnB,CAAP;AACD","sourcesContent":["\n/* global ReadableStream */\n\nmodule.exports = nodeToWeb\nmodule.exports.WEBSTREAM_SUPPORT = typeof ReadableStream !== 'undefined'\n\nfunction nodeToWeb (nodeStream) {\n  // Assumes the nodeStream has not ended/closed\n  if (!module.exports.WEBSTREAM_SUPPORT) throw new Error('No web ReadableStream support')\n\n  var destroyed = false\n  var listeners = {}\n\n  function start (controller) {\n    listeners['data'] = onData\n    listeners['end'] = onData\n    listeners['end'] = onDestroy\n    listeners['close'] = onDestroy\n    listeners['error'] = onDestroy\n    for (var name in listeners) nodeStream.on(name, listeners[name])\n\n    nodeStream.pause()\n\n    function onData (chunk) {\n      if (destroyed) return\n      controller.enqueue(chunk)\n      nodeStream.pause()\n    }\n\n    function onDestroy (err) {\n      if (destroyed) return\n      destroyed = true\n\n      for (var name in listeners) nodeStream.removeListener(name, listeners[name])\n\n      if (err) controller.error(err)\n      else controller.close()\n    }\n  }\n\n  function pull () {\n    if (destroyed) return\n    nodeStream.resume()\n  }\n\n  function cancel () {\n    destroyed = true\n\n    for (var name in listeners) nodeStream.removeListener(name, listeners[name])\n\n    nodeStream.push(null)\n    nodeStream.pause()\n    if (nodeStream.destroy) nodeStream.destroy()\n    else if (nodeStream.close) nodeStream.close()\n  }\n\n  return new ReadableStream({start: start, pull: pull, cancel: cancel})\n}\n"]},"metadata":{},"sourceType":"script"}