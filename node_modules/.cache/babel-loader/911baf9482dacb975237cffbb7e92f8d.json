{"ast":null,"code":"/**\n * Returns a function that creates a new path with the same values,\n * but sorted on the given property.\n * The function accepts multiple properties to sort on a deeper path.\n *\n * Requires:\n *  - a predicate on the path proxy\n *  - a sort function on the path proxy (for multi-property sorting)\n */\nexport default class SortHandler {\n  constructor(order = 'ASC') {\n    this.order = order;\n  }\n\n  handle(pathData, pathProxy) {\n    return (...properties) => {\n      // Do nothing if no sort properties were given\n      if (properties.length === 0) return pathProxy; // Split off the first sort property and obtain its predicate\n\n      const [property, ...rest] = properties;\n      const {\n        predicate\n      } = pathProxy[property]; // Sort on the first property, and create paths for the next one\n\n      const childData = {\n        property,\n        predicate,\n        sort: this.order\n      };\n      const childPath = pathData.extendPath(childData);\n      return rest.length === 0 ? childPath : childPath.sort(...rest);\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/ldflex/module/SortHandler.js"],"names":["SortHandler","constructor","order","handle","pathData","pathProxy","properties","length","property","rest","predicate","childData","sort","childPath","extendPath"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,WAAN,CAAkB;AAC/BC,EAAAA,WAAW,CAACC,KAAK,GAAG,KAAT,EAAgB;AACzB,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAEDC,EAAAA,MAAM,CAACC,QAAD,EAAWC,SAAX,EAAsB;AAC1B,WAAO,CAAC,GAAGC,UAAJ,KAAmB;AACxB;AACA,UAAIA,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B,OAAOF,SAAP,CAFL,CAEuB;;AAE/C,YAAM,CAACG,QAAD,EAAW,GAAGC,IAAd,IAAsBH,UAA5B;AACA,YAAM;AACJI,QAAAA;AADI,UAEFL,SAAS,CAACG,QAAD,CAFb,CALwB,CAOC;;AAEzB,YAAMG,SAAS,GAAG;AAChBH,QAAAA,QADgB;AAEhBE,QAAAA,SAFgB;AAGhBE,QAAAA,IAAI,EAAE,KAAKV;AAHK,OAAlB;AAKA,YAAMW,SAAS,GAAGT,QAAQ,CAACU,UAAT,CAAoBH,SAApB,CAAlB;AACA,aAAOF,IAAI,CAACF,MAAL,KAAgB,CAAhB,GAAoBM,SAApB,GAAgCA,SAAS,CAACD,IAAV,CAAe,GAAGH,IAAlB,CAAvC;AACD,KAhBD;AAiBD;;AAvB8B","sourcesContent":["/**\n * Returns a function that creates a new path with the same values,\n * but sorted on the given property.\n * The function accepts multiple properties to sort on a deeper path.\n *\n * Requires:\n *  - a predicate on the path proxy\n *  - a sort function on the path proxy (for multi-property sorting)\n */\nexport default class SortHandler {\n  constructor(order = 'ASC') {\n    this.order = order;\n  }\n\n  handle(pathData, pathProxy) {\n    return (...properties) => {\n      // Do nothing if no sort properties were given\n      if (properties.length === 0) return pathProxy; // Split off the first sort property and obtain its predicate\n\n      const [property, ...rest] = properties;\n      const {\n        predicate\n      } = pathProxy[property]; // Sort on the first property, and create paths for the next one\n\n      const childData = {\n        property,\n        predicate,\n        sort: this.order\n      };\n      const childPath = pathData.extendPath(childData);\n      return rest.length === 0 ? childPath : childPath.sort(...rest);\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}