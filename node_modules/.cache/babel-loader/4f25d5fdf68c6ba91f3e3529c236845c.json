{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlSerializeSimple = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n/**\n * A comunica Simple Sparql Serialize Actor.\n */\n\n\nclass ActorSparqlSerializeSimple extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n  constructor(args) {\n    super(args);\n  }\n\n  async testHandleChecked(action, context) {\n    if (!['bindings', 'quads', 'boolean', 'update'].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams, quad streams, booleans, or updates.');\n    }\n\n    return true;\n  }\n\n  async runHandle(action, mediaType, context) {\n    const data = new stream_1.Readable();\n\n    data._read = () => {// Do nothing\n    };\n\n    let resultStream;\n\n    if (action.type === 'bindings') {\n      resultStream = action.bindingsStream;\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', bindings => data.push(`${bindings.map((value, key) => `${key}: ${value.value}`).join('\\n')}\\n\\n`));\n      resultStream.on('end', () => data.push(null));\n    } else if (action.type === 'quads') {\n      resultStream = action.quadStream;\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', quad => data.push(`subject: ${quad.subject.value}\\n` + `predicate: ${quad.predicate.value}\\n` + `object: ${quad.object.value}\\n` + `graph: ${quad.graph.value}\\n\\n`));\n      resultStream.on('end', () => data.push(null));\n    } else if (action.type === 'boolean') {\n      try {\n        data.push(`${JSON.stringify(await action.booleanResult)}\\n`);\n        data.push(null);\n      } catch (error) {\n        setImmediate(() => data.emit('error', error));\n      }\n    } else {\n      action.updateResult.then(() => {\n        data.push('ok\\n');\n        data.push(null);\n      }).catch(error => setImmediate(() => data.emit('error', error)));\n    }\n\n    return {\n      data\n    };\n  }\n\n}\n\nexports.ActorSparqlSerializeSimple = ActorSparqlSerializeSimple;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-serialize-simple/lib/ActorSparqlSerializeSimple.js"],"names":["Object","defineProperty","exports","value","ActorSparqlSerializeSimple","stream_1","require","bus_sparql_serialize_1","ActorSparqlSerializeFixedMediaTypes","constructor","args","testHandleChecked","action","context","includes","type","Error","runHandle","mediaType","data","Readable","_read","resultStream","bindingsStream","on","error","emit","bindings","push","map","key","join","quadStream","quad","subject","predicate","object","graph","JSON","stringify","booleanResult","setImmediate","updateResult","then","catch"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlSerializeSimple = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n/**\n * A comunica Simple Sparql Serialize Actor.\n */\nclass ActorSparqlSerializeSimple extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n    constructor(args) {\n        super(args);\n    }\n    async testHandleChecked(action, context) {\n        if (!['bindings', 'quads', 'boolean', 'update'].includes(action.type)) {\n            throw new Error('This actor can only handle bindings streams, quad streams, booleans, or updates.');\n        }\n        return true;\n    }\n    async runHandle(action, mediaType, context) {\n        const data = new stream_1.Readable();\n        data._read = () => {\n            // Do nothing\n        };\n        let resultStream;\n        if (action.type === 'bindings') {\n            resultStream = action.bindingsStream;\n            resultStream.on('error', error => data.emit('error', error));\n            resultStream.on('data', bindings => data.push(`${bindings.map((value, key) => `${key}: ${value.value}`).join('\\n')}\\n\\n`));\n            resultStream.on('end', () => data.push(null));\n        }\n        else if (action.type === 'quads') {\n            resultStream = action.quadStream;\n            resultStream.on('error', error => data.emit('error', error));\n            resultStream.on('data', quad => data.push(`subject: ${quad.subject.value}\\n` +\n                `predicate: ${quad.predicate.value}\\n` +\n                `object: ${quad.object.value}\\n` +\n                `graph: ${quad.graph.value}\\n\\n`));\n            resultStream.on('end', () => data.push(null));\n        }\n        else if (action.type === 'boolean') {\n            try {\n                data.push(`${JSON.stringify(await action.booleanResult)}\\n`);\n                data.push(null);\n            }\n            catch (error) {\n                setImmediate(() => data.emit('error', error));\n            }\n        }\n        else {\n            action.updateResult\n                .then(() => {\n                data.push('ok\\n');\n                data.push(null);\n            })\n                .catch(error => setImmediate(() => data.emit('error', error)));\n        }\n        return { data };\n    }\n}\nexports.ActorSparqlSerializeSimple = ActorSparqlSerializeSimple;\n//# sourceMappingURL=ActorSparqlSerializeSimple.js.map"]},"metadata":{},"sourceType":"script"}