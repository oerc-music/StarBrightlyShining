{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntryHandlerKeywordUnknownFallback = void 0;\n\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\n\n\nclass EntryHandlerKeywordUnknownFallback {\n  isPropertyHandler() {\n    return false;\n  }\n\n  isStackProcessor() {\n    return true;\n  }\n\n  async validate(parsingContext, util, keys, depth, inProperty) {\n    const key = await util.unaliasKeyword(keys[depth], keys, depth);\n\n    if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n      // Don't emit anything inside free-floating lists\n      if (!inProperty) {\n        if (key === '@list') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  async test(parsingContext, util, key, keys, depth) {\n    return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n  }\n\n  async handle(parsingContext, util, key, keys, value, depth) {\n    const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n\n    if (keywordType !== undefined) {\n      if (keywordType && typeof value !== keywordType.type) {\n        parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n      }\n    } else if (parsingContext.strictValues) {\n      parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n    }\n\n    parsingContext.emittedStack[depth] = false;\n  }\n\n}\n\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n  '@index': {\n    type: 'string',\n    errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE\n  },\n  '@list': null,\n  '@reverse': {\n    type: 'object',\n    errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE\n  },\n  '@set': null,\n  '@value': null\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js"],"names":["Object","defineProperty","exports","value","EntryHandlerKeywordUnknownFallback","jsonld_context_parser_1","require","isPropertyHandler","isStackProcessor","validate","parsingContext","util","keys","depth","inProperty","key","unaliasKeyword","Util","isPotentialKeyword","test","handle","keywordType","VALID_KEYWORDS_TYPES","undefined","type","emitError","ErrorCoded","errorCode","strictValues","Error","emittedStack","ERROR_CODES","INVALID_INDEX_VALUE","INVALID_REVERSE_VALUE"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kCAAR,GAA6C,KAAK,CAAlD;;AACA,MAAMC,uBAAuB,GAAGC,OAAO,CAAC,uBAAD,CAAvC;AACA;AACA;AACA;AACA;;;AACA,MAAMF,kCAAN,CAAyC;AACrCG,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAP;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAO,IAAP;AACH;;AACa,QAARC,QAAQ,CAACC,cAAD,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,UAApC,EAAgD;AAC1D,UAAMC,GAAG,GAAG,MAAMJ,IAAI,CAACK,cAAL,CAAoBJ,IAAI,CAACC,KAAD,CAAxB,EAAiCD,IAAjC,EAAuCC,KAAvC,CAAlB;;AACA,QAAIR,uBAAuB,CAACY,IAAxB,CAA6BC,kBAA7B,CAAgDH,GAAhD,CAAJ,EAA0D;AACtD;AACA,UAAI,CAACD,UAAL,EAAiB;AACb,YAAIC,GAAG,KAAK,OAAZ,EAAqB;AACjB,iBAAO,KAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACS,QAAJI,IAAI,CAACT,cAAD,EAAiBC,IAAjB,EAAuBI,GAAvB,EAA4BH,IAA5B,EAAkCC,KAAlC,EAAyC;AAC/C,WAAOR,uBAAuB,CAACY,IAAxB,CAA6BC,kBAA7B,CAAgDH,GAAhD,CAAP;AACH;;AACW,QAANK,MAAM,CAACV,cAAD,EAAiBC,IAAjB,EAAuBI,GAAvB,EAA4BH,IAA5B,EAAkCT,KAAlC,EAAyCU,KAAzC,EAAgD;AACxD,UAAMQ,WAAW,GAAGjB,kCAAkC,CAACkB,oBAAnC,CAAwDP,GAAxD,CAApB;;AACA,QAAIM,WAAW,KAAKE,SAApB,EAA+B;AAC3B,UAAIF,WAAW,IAAI,OAAOlB,KAAP,KAAiBkB,WAAW,CAACG,IAAhD,EAAsD;AAClDd,QAAAA,cAAc,CAACe,SAAf,CAAyB,IAAIpB,uBAAuB,CAACqB,UAA5B,CAAwC,2BAA0BX,GAAI,iBAAgBZ,KAAM,GAA5F,EAAgGkB,WAAW,CAACM,SAA5G,CAAzB;AACH;AACJ,KAJD,MAKK,IAAIjB,cAAc,CAACkB,YAAnB,EAAiC;AAClClB,MAAAA,cAAc,CAACe,SAAf,CAAyB,IAAII,KAAJ,CAAW,oBAAmBd,GAAI,iBAAgBZ,KAAM,GAAxD,CAAzB;AACH;;AACDO,IAAAA,cAAc,CAACoB,YAAf,CAA4BjB,KAA5B,IAAqC,KAArC;AACH;;AAlCoC;;AAoCzCX,OAAO,CAACE,kCAAR,GAA6CA,kCAA7C;AACAA,kCAAkC,CAACkB,oBAAnC,GAA0D;AACtD,YAAU;AAAEE,IAAAA,IAAI,EAAE,QAAR;AAAkBG,IAAAA,SAAS,EAAEtB,uBAAuB,CAAC0B,WAAxB,CAAoCC;AAAjE,GAD4C;AAEtD,WAAS,IAF6C;AAGtD,cAAY;AAAER,IAAAA,IAAI,EAAE,QAAR;AAAkBG,IAAAA,SAAS,EAAEtB,uBAAuB,CAAC0B,WAAxB,CAAoCE;AAAjE,GAH0C;AAItD,UAAQ,IAJ8C;AAKtD,YAAU;AAL4C,CAA1D","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map"]},"metadata":{},"sourceType":"script"}