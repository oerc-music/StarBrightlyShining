{"ast":null,"code":"let AsyncIterator = require('asynciterator').AsyncIterator; // https://en.wikipedia.org/wiki/Hash_join\n\n\nclass HashJoin extends AsyncIterator {\n  constructor(left, right, funHash, funJoin) {\n    super();\n    this.addedDataListener = false;\n    this.left = left;\n    this.right = right;\n    this.funHash = funHash;\n    this.funJoin = funJoin;\n    this.leftMap = new Map();\n    this.match = null;\n    this.matches = [];\n    this.matchIdx = 0;\n    this.readable = false;\n    this.left.on('end', allowJoining.bind(this));\n\n    function allowJoining() {\n      if (this.leftMap.size <= 0) return this.close();\n      this.readable = true;\n      this.right.on('readable', () => this.readable = true);\n      this.right.on('end', () => {\n        if (!this.hasResults()) this._end();\n      });\n    }\n\n    this.on('newListener', eventName => {\n      if (eventName === 'data' && !this.addedDataListener) {\n        this.addedDataListener = true;\n\n        this._addDataListener();\n      }\n    });\n  }\n\n  hasResults() {\n    return !this.right.ended || this.matchIdx < this.matches.length;\n  }\n\n  close() {\n    super.close();\n    this.left.close();\n    this.right.close();\n  }\n\n  read() {\n    if (!this.addedDataListener) {\n      this.addedDataListener = true;\n\n      this._addDataListener();\n    }\n\n    if (this.ended || !this.readable) return null;\n\n    while (this.matchIdx < this.matches.length) {\n      let item = this.matches[this.matchIdx++];\n      let result = this.funJoin(item, this.match);\n      if (result !== null) return result;\n    }\n\n    if (!this.hasResults()) this._end();\n    this.match = this.right.read();\n\n    if (this.match === null) {\n      this.readable = false;\n      return null;\n    }\n\n    let hash = this.funHash(this.match);\n    this.matches = this.leftMap.get(hash) || [];\n    this.matchIdx = 0; // array is filled again so recursive call can have results\n\n    return this.read();\n  }\n\n  _addDataListener() {\n    this.left.on('data', addItem.bind(this));\n\n    function addItem(item) {\n      let hash = this.funHash(item);\n      if (!this.leftMap.has(hash)) this.leftMap.set(hash, []);\n      let arr = this.leftMap.get(hash);\n      arr.push(item);\n    }\n  }\n\n}\n\nmodule.exports = HashJoin;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/asyncjoin/join/HashJoin.js"],"names":["AsyncIterator","require","HashJoin","constructor","left","right","funHash","funJoin","addedDataListener","leftMap","Map","match","matches","matchIdx","readable","on","allowJoining","bind","size","close","hasResults","_end","eventName","_addDataListener","ended","length","read","item","result","hash","get","addItem","has","set","arr","push","module","exports"],"mappings":"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","sourcesContent":["\nlet AsyncIterator = require('asynciterator').AsyncIterator;\n\n// https://en.wikipedia.org/wiki/Hash_join\nclass HashJoin extends AsyncIterator\n{\n    constructor (left, right, funHash, funJoin)\n    {\n        super();\n\n        this.addedDataListener = false;\n        this.left = left;\n        this.right = right;\n        this.funHash = funHash;\n        this.funJoin = funJoin;\n        \n        this.leftMap = new Map();\n    \n        this.match    = null;\n        this.matches  = [];\n        this.matchIdx = 0;\n        \n        \n        this.readable = false;\n\n        this.left.on('end', allowJoining.bind(this));\n\n        function allowJoining ()\n        {\n            if (this.leftMap.size <= 0)\n                return this.close();\n            this.readable = true;\n            this.right.on('readable', () => this.readable = true);\n            this.right.on('end', () => { if (!this.hasResults()) this._end(); });\n        }\n\n        this.on('newListener', (eventName) =>\n        {\n            if (eventName === 'data' && !this.addedDataListener)\n            {\n                this.addedDataListener = true;\n                this._addDataListener();\n            }\n        })\n    }\n    \n    hasResults ()\n    {\n        return !this.right.ended || this.matchIdx < this.matches.length;\n    }\n    \n    close ()\n    {\n        super.close();\n        this.left.close();\n        this.right.close();\n    }\n    \n    read ()\n    {\n        if (!this.addedDataListener)\n        {\n            this.addedDataListener = true;\n            this._addDataListener();\n        }\n\n        if (this.ended || !this.readable)\n            return null;\n    \n        while (this.matchIdx < this.matches.length)\n        {\n            let item = this.matches[this.matchIdx++];\n            let result = this.funJoin(item, this.match);\n            if (result !== null)\n                return result;\n        }\n\n        if (!this.hasResults())\n            this._end();\n    \n        this.match = this.right.read();\n    \n        if (this.match === null)\n        {\n            this.readable = false;\n            return null;\n        }\n    \n        let hash = this.funHash(this.match);\n        this.matches = this.leftMap.get(hash) || [];\n        this.matchIdx = 0;\n    \n        // array is filled again so recursive call can have results\n        return this.read();\n    }\n\n    _addDataListener()\n    {\n        this.left.on('data', addItem.bind(this));\n\n        function addItem(item)\n        {\n            let hash = this.funHash(item);\n            if (!this.leftMap.has(hash))\n                this.leftMap.set(hash, []);\n            let arr = this.leftMap.get(hash);\n            arr.push(item);\n        }\n    }\n}\n\nmodule.exports = HashJoin;"]},"metadata":{},"sourceType":"script"}