{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfParseHtmlMicrodata = void 0;\n\nconst bus_rdf_parse_html_1 = require(\"@comunica/bus-rdf-parse-html\");\n\nconst microdata_rdf_streaming_parser_1 = require(\"microdata-rdf-streaming-parser\");\n/**\n * A comunica Microdata RDF Parse Html Actor.\n */\n\n\nclass ActorRdfParseHtmlMicrodata extends bus_rdf_parse_html_1.ActorRdfParseHtml {\n  constructor(args) {\n    super(args);\n  }\n\n  async test(action) {\n    return true;\n  }\n\n  async run(action) {\n    const mediaType = action.headers ? action.headers.get('content-type') : null;\n    const xmlMode = mediaType === null || mediaType === void 0 ? void 0 : mediaType.includes('xml');\n    const htmlParseListener = new microdata_rdf_streaming_parser_1.MicrodataRdfParser({\n      baseIRI: action.baseIRI,\n      xmlMode\n    });\n    htmlParseListener.on('error', action.error);\n    htmlParseListener.on('data', action.emit);\n    const onTagEndOld = htmlParseListener.onEnd;\n\n    htmlParseListener.onEnd = () => {\n      onTagEndOld.call(htmlParseListener);\n      action.end();\n    };\n\n    return {\n      htmlParseListener\n    };\n  }\n\n}\n\nexports.ActorRdfParseHtmlMicrodata = ActorRdfParseHtmlMicrodata;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-parse-html-microdata/lib/ActorRdfParseHtmlMicrodata.js"],"names":["Object","defineProperty","exports","value","ActorRdfParseHtmlMicrodata","bus_rdf_parse_html_1","require","microdata_rdf_streaming_parser_1","ActorRdfParseHtml","constructor","args","test","action","run","mediaType","headers","get","xmlMode","includes","htmlParseListener","MicrodataRdfParser","baseIRI","on","error","emit","onTagEndOld","onEnd","call","end"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,0BAAR,GAAqC,KAAK,CAA1C;;AACA,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,8BAAD,CAApC;;AACA,MAAMC,gCAAgC,GAAGD,OAAO,CAAC,gCAAD,CAAhD;AACA;AACA;AACA;;;AACA,MAAMF,0BAAN,SAAyCC,oBAAoB,CAACG,iBAA9D,CAAgF;AAC5EC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACD,MAAD,EAAS;AACd,UAAME,SAAS,GAAGF,MAAM,CAACG,OAAP,GAAiBH,MAAM,CAACG,OAAP,CAAeC,GAAf,CAAmB,cAAnB,CAAjB,GAAsD,IAAxE;AACA,UAAMC,OAAO,GAAGH,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACI,QAAV,CAAmB,KAAnB,CAAtE;AACA,UAAMC,iBAAiB,GAAG,IAAIZ,gCAAgC,CAACa,kBAArC,CAAwD;AAAEC,MAAAA,OAAO,EAAET,MAAM,CAACS,OAAlB;AAA2BJ,MAAAA;AAA3B,KAAxD,CAA1B;AACAE,IAAAA,iBAAiB,CAACG,EAAlB,CAAqB,OAArB,EAA8BV,MAAM,CAACW,KAArC;AACAJ,IAAAA,iBAAiB,CAACG,EAAlB,CAAqB,MAArB,EAA6BV,MAAM,CAACY,IAApC;AACA,UAAMC,WAAW,GAAGN,iBAAiB,CAACO,KAAtC;;AACAP,IAAAA,iBAAiB,CAACO,KAAlB,GAA0B,MAAM;AAC5BD,MAAAA,WAAW,CAACE,IAAZ,CAAiBR,iBAAjB;AACAP,MAAAA,MAAM,CAACgB,GAAP;AACH,KAHD;;AAIA,WAAO;AAAET,MAAAA;AAAF,KAAP;AACH;;AAnB2E;;AAqBhFjB,OAAO,CAACE,0BAAR,GAAqCA,0BAArC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfParseHtmlMicrodata = void 0;\nconst bus_rdf_parse_html_1 = require(\"@comunica/bus-rdf-parse-html\");\nconst microdata_rdf_streaming_parser_1 = require(\"microdata-rdf-streaming-parser\");\n/**\n * A comunica Microdata RDF Parse Html Actor.\n */\nclass ActorRdfParseHtmlMicrodata extends bus_rdf_parse_html_1.ActorRdfParseHtml {\n    constructor(args) {\n        super(args);\n    }\n    async test(action) {\n        return true;\n    }\n    async run(action) {\n        const mediaType = action.headers ? action.headers.get('content-type') : null;\n        const xmlMode = mediaType === null || mediaType === void 0 ? void 0 : mediaType.includes('xml');\n        const htmlParseListener = new microdata_rdf_streaming_parser_1.MicrodataRdfParser({ baseIRI: action.baseIRI, xmlMode });\n        htmlParseListener.on('error', action.error);\n        htmlParseListener.on('data', action.emit);\n        const onTagEndOld = htmlParseListener.onEnd;\n        htmlParseListener.onEnd = () => {\n            onTagEndOld.call(htmlParseListener);\n            action.end();\n        };\n        return { htmlParseListener };\n    }\n}\nexports.ActorRdfParseHtmlMicrodata = ActorRdfParseHtmlMicrodata;\n//# sourceMappingURL=ActorRdfParseHtmlMicrodata.js.map"]},"metadata":{},"sourceType":"script"}