{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlSerializeStats = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n/**\n * Serializes SPARQL results for testing and debugging.\n */\n\n\nclass ActorSparqlSerializeStats extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n  constructor(args) {\n    super(args);\n  }\n\n  async testHandleChecked(action, context) {\n    if (!['bindings', 'quads'].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or quad streams.');\n    }\n\n    return true;\n  }\n\n  pushHeader(data) {\n    const header = ['Result', 'Delay (ms)', 'HTTP requests'].join(',');\n    data.push(`${header}\\n`);\n  }\n\n  pushStat(data, startTime, result) {\n    const row = [result, this.delay(startTime), this.httpObserver.requests].join(',');\n    data.push(`${row}\\n`);\n  }\n\n  pushFooter(data, startTime) {\n    const footer = ['TOTAL', this.delay(startTime), this.httpObserver.requests].join(',');\n    data.push(`${footer}\\n`);\n    data.push(null);\n  }\n\n  async runHandle(action, mediaType, context) {\n    const data = new stream_1.Readable();\n\n    data._read = () => {// Do nothing\n    };\n\n    const resultStream = action.type === 'bindings' ? action.bindingsStream : action.quadStream; // TODO: Make initiation timer configurable\n\n    const startTime = process.hrtime();\n    let result = 1;\n    this.pushHeader(data);\n    resultStream.on('error', error => data.emit('error', error));\n    resultStream.on('data', () => this.pushStat(data, startTime, result++));\n    resultStream.on('end', () => this.pushFooter(data, startTime));\n    return {\n      data\n    };\n  }\n\n  delay(startTime) {\n    const time = process.hrtime(startTime);\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n}\n\nexports.ActorSparqlSerializeStats = ActorSparqlSerializeStats;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-serialize-stats/lib/ActorSparqlSerializeStats.js"],"names":["Object","defineProperty","exports","value","ActorSparqlSerializeStats","stream_1","require","bus_sparql_serialize_1","ActorSparqlSerializeFixedMediaTypes","constructor","args","testHandleChecked","action","context","includes","type","Error","pushHeader","data","header","join","push","pushStat","startTime","result","row","delay","httpObserver","requests","pushFooter","footer","runHandle","mediaType","Readable","_read","resultStream","bindingsStream","quadStream","process","hrtime","on","error","emit","time"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlSerializeStats = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n/**\n * Serializes SPARQL results for testing and debugging.\n */\nclass ActorSparqlSerializeStats extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n    constructor(args) {\n        super(args);\n    }\n    async testHandleChecked(action, context) {\n        if (!['bindings', 'quads'].includes(action.type)) {\n            throw new Error('This actor can only handle bindings streams or quad streams.');\n        }\n        return true;\n    }\n    pushHeader(data) {\n        const header = ['Result', 'Delay (ms)', 'HTTP requests',\n        ].join(',');\n        data.push(`${header}\\n`);\n    }\n    pushStat(data, startTime, result) {\n        const row = [result, this.delay(startTime), this.httpObserver.requests,\n        ].join(',');\n        data.push(`${row}\\n`);\n    }\n    pushFooter(data, startTime) {\n        const footer = ['TOTAL', this.delay(startTime), this.httpObserver.requests,\n        ].join(',');\n        data.push(`${footer}\\n`);\n        data.push(null);\n    }\n    async runHandle(action, mediaType, context) {\n        const data = new stream_1.Readable();\n        data._read = () => {\n            // Do nothing\n        };\n        const resultStream = action.type === 'bindings' ?\n            action.bindingsStream :\n            action.quadStream;\n        // TODO: Make initiation timer configurable\n        const startTime = process.hrtime();\n        let result = 1;\n        this.pushHeader(data);\n        resultStream.on('error', error => data.emit('error', error));\n        resultStream.on('data', () => this.pushStat(data, startTime, result++));\n        resultStream.on('end', () => this.pushFooter(data, startTime));\n        return { data };\n    }\n    delay(startTime) {\n        const time = process.hrtime(startTime);\n        return time[0] * 1000 + (time[1] / 1000000);\n    }\n}\nexports.ActorSparqlSerializeStats = ActorSparqlSerializeStats;\n//# sourceMappingURL=ActorSparqlSerializeStats.js.map"]},"metadata":{},"sourceType":"script"}