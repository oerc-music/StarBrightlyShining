{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfMetadataAll = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_rdf_metadata_1 = require(\"@comunica/bus-rdf-metadata\");\n/**\n * A comunica All RDF Metadata Actor.\n */\n\n\nclass ActorRdfMetadataAll extends bus_rdf_metadata_1.ActorRdfMetadata {\n  constructor(args) {\n    super(args);\n  }\n\n  async test(action) {\n    return true;\n  }\n\n  async run(action) {\n    const data = new stream_1.Readable({\n      objectMode: true\n    });\n    const metadata = new stream_1.Readable({\n      objectMode: true\n    }); // Delay attachment of listeners until the data or metadata stream is being read.\n\n    const attachListeners = () => {\n      // Attach listeners only once\n      data._read = metadata._read = () => {// Do nothing\n      }; // Forward errors\n\n\n      action.quads.on('error', error => {\n        data.emit('error', error);\n        metadata.emit('error', error);\n      }); // Forward quads to both streams\n\n      action.quads.on('data', quad => {\n        data.push(quad);\n        metadata.push(quad);\n      }); // Terminate both streams on-end\n\n      action.quads.on('end', () => {\n        data.push(null);\n        metadata.push(null);\n      });\n    };\n\n    data._read = metadata._read = () => {\n      attachListeners();\n    };\n\n    return {\n      data,\n      metadata\n    };\n  }\n\n}\n\nexports.ActorRdfMetadataAll = ActorRdfMetadataAll;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-metadata-all/lib/ActorRdfMetadataAll.js"],"names":["Object","defineProperty","exports","value","ActorRdfMetadataAll","stream_1","require","bus_rdf_metadata_1","ActorRdfMetadata","constructor","args","test","action","run","data","Readable","objectMode","metadata","attachListeners","_read","quads","on","error","emit","quad","push"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,4BAAD,CAAlC;AACA;AACA;AACA;;;AACA,MAAMF,mBAAN,SAAkCG,kBAAkB,CAACC,gBAArD,CAAsE;AAClEC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACD,MAAD,EAAS;AACd,UAAME,IAAI,GAAG,IAAIT,QAAQ,CAACU,QAAb,CAAsB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAtB,CAAb;AACA,UAAMC,QAAQ,GAAG,IAAIZ,QAAQ,CAACU,QAAb,CAAsB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAtB,CAAjB,CAFc,CAGd;;AACA,UAAME,eAAe,GAAG,MAAM;AAC1B;AACAJ,MAAAA,IAAI,CAACK,KAAL,GAAaF,QAAQ,CAACE,KAAT,GAAiB,MAAM,CAChC;AACH,OAFD,CAF0B,CAK1B;;;AACAP,MAAAA,MAAM,CAACQ,KAAP,CAAaC,EAAb,CAAgB,OAAhB,EAAyBC,KAAK,IAAI;AAC9BR,QAAAA,IAAI,CAACS,IAAL,CAAU,OAAV,EAAmBD,KAAnB;AACAL,QAAAA,QAAQ,CAACM,IAAT,CAAc,OAAd,EAAuBD,KAAvB;AACH,OAHD,EAN0B,CAU1B;;AACAV,MAAAA,MAAM,CAACQ,KAAP,CAAaC,EAAb,CAAgB,MAAhB,EAAwBG,IAAI,IAAI;AAC5BV,QAAAA,IAAI,CAACW,IAAL,CAAUD,IAAV;AACAP,QAAAA,QAAQ,CAACQ,IAAT,CAAcD,IAAd;AACH,OAHD,EAX0B,CAe1B;;AACAZ,MAAAA,MAAM,CAACQ,KAAP,CAAaC,EAAb,CAAgB,KAAhB,EAAuB,MAAM;AACzBP,QAAAA,IAAI,CAACW,IAAL,CAAU,IAAV;AACAR,QAAAA,QAAQ,CAACQ,IAAT,CAAc,IAAd;AACH,OAHD;AAIH,KApBD;;AAqBAX,IAAAA,IAAI,CAACK,KAAL,GAAaF,QAAQ,CAACE,KAAT,GAAiB,MAAM;AAChCD,MAAAA,eAAe;AAClB,KAFD;;AAGA,WAAO;AAAEJ,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAP;AACH;;AApCiE;;AAsCtEf,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfMetadataAll = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_rdf_metadata_1 = require(\"@comunica/bus-rdf-metadata\");\n/**\n * A comunica All RDF Metadata Actor.\n */\nclass ActorRdfMetadataAll extends bus_rdf_metadata_1.ActorRdfMetadata {\n    constructor(args) {\n        super(args);\n    }\n    async test(action) {\n        return true;\n    }\n    async run(action) {\n        const data = new stream_1.Readable({ objectMode: true });\n        const metadata = new stream_1.Readable({ objectMode: true });\n        // Delay attachment of listeners until the data or metadata stream is being read.\n        const attachListeners = () => {\n            // Attach listeners only once\n            data._read = metadata._read = () => {\n                // Do nothing\n            };\n            // Forward errors\n            action.quads.on('error', error => {\n                data.emit('error', error);\n                metadata.emit('error', error);\n            });\n            // Forward quads to both streams\n            action.quads.on('data', quad => {\n                data.push(quad);\n                metadata.push(quad);\n            });\n            // Terminate both streams on-end\n            action.quads.on('end', () => {\n                data.push(null);\n                metadata.push(null);\n            });\n        };\n        data._read = metadata._read = () => {\n            attachListeners();\n        };\n        return { data, metadata };\n    }\n}\nexports.ActorRdfMetadataAll = ActorRdfMetadataAll;\n//# sourceMappingURL=ActorRdfMetadataAll.js.map"]},"metadata":{},"sourceType":"script"}