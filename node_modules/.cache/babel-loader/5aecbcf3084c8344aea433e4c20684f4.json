{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlSerializeTree = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nconst core_1 = require(\"@comunica/core\");\n\nconst sparqljson_to_tree_1 = require(\"sparqljson-to-tree\");\n/**\n * A comunica Tree SPARQL Serialize Actor.\n */\n\n\nclass ActorSparqlSerializeTree extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n  constructor(args) {\n    super(args);\n  }\n  /**\n   *\n   * @param {BindingsStream} bindingsStream\n   * @param context\n   * @param {IConverterSettings} converterSettings\n   * @return {Promise<string>}\n   */\n\n\n  static bindingsStreamToGraphQl(bindingsStream, context, converterSettings) {\n    const actionContext = core_1.ensureActionContext(context);\n    return new Promise((resolve, reject) => {\n      const bindingsArray = [];\n      const converter = new sparqljson_to_tree_1.Converter(converterSettings);\n      const schema = {\n        singularizeVariables: actionContext.get('@comunica/actor-init-sparql:singularizeVariables') || {}\n      };\n      bindingsStream.on('error', reject);\n      bindingsStream.on('data', bindings => {\n        const rawBindings = bindings.toJS();\n        const reKeyedBindings = {}; // Removes the '?' prefix\n\n        for (const key in rawBindings) {\n          reKeyedBindings[key.slice(1)] = rawBindings[key];\n        }\n\n        bindingsArray.push(reKeyedBindings);\n      });\n      bindingsStream.on('end', () => {\n        resolve(converter.bindingsToTree(bindingsArray, schema));\n      });\n    });\n  }\n\n  async testHandleChecked(action) {\n    if (action.type !== 'bindings') {\n      throw new Error('This actor can only handle bindings streams.');\n    }\n\n    return true;\n  }\n\n  async runHandle(action, mediaType) {\n    const data = new stream_1.Readable();\n\n    data._read = () => {// Do nothing\n    };\n\n    const resultStream = action.bindingsStream;\n    resultStream.on('error', error => data.emit('error', error));\n    ActorSparqlSerializeTree.bindingsStreamToGraphQl(resultStream, action.context, {\n      materializeRdfJsTerms: true\n    }).then(result => {\n      data.push(JSON.stringify(result, null, '  '));\n      data.push(null);\n    }).catch(error => data.emit('error', error));\n    return {\n      data\n    };\n  }\n\n}\n\nexports.ActorSparqlSerializeTree = ActorSparqlSerializeTree;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-serialize-tree/lib/ActorSparqlSerializeTree.js"],"names":["Object","defineProperty","exports","value","ActorSparqlSerializeTree","stream_1","require","bus_sparql_serialize_1","core_1","sparqljson_to_tree_1","ActorSparqlSerializeFixedMediaTypes","constructor","args","bindingsStreamToGraphQl","bindingsStream","context","converterSettings","actionContext","ensureActionContext","Promise","resolve","reject","bindingsArray","converter","Converter","schema","singularizeVariables","get","on","bindings","rawBindings","toJS","reKeyedBindings","key","slice","push","bindingsToTree","testHandleChecked","action","type","Error","runHandle","mediaType","data","Readable","_read","resultStream","error","emit","materializeRdfJsTerms","then","result","JSON","stringify","catch"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlSerializeTree = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\nconst core_1 = require(\"@comunica/core\");\nconst sparqljson_to_tree_1 = require(\"sparqljson-to-tree\");\n/**\n * A comunica Tree SPARQL Serialize Actor.\n */\nclass ActorSparqlSerializeTree extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n    constructor(args) {\n        super(args);\n    }\n    /**\n     *\n     * @param {BindingsStream} bindingsStream\n     * @param context\n     * @param {IConverterSettings} converterSettings\n     * @return {Promise<string>}\n     */\n    static bindingsStreamToGraphQl(bindingsStream, context, converterSettings) {\n        const actionContext = core_1.ensureActionContext(context);\n        return new Promise((resolve, reject) => {\n            const bindingsArray = [];\n            const converter = new sparqljson_to_tree_1.Converter(converterSettings);\n            const schema = {\n                singularizeVariables: actionContext.get('@comunica/actor-init-sparql:singularizeVariables') || {},\n            };\n            bindingsStream.on('error', reject);\n            bindingsStream.on('data', bindings => {\n                const rawBindings = bindings.toJS();\n                const reKeyedBindings = {};\n                // Removes the '?' prefix\n                for (const key in rawBindings) {\n                    reKeyedBindings[key.slice(1)] = rawBindings[key];\n                }\n                bindingsArray.push(reKeyedBindings);\n            });\n            bindingsStream.on('end', () => {\n                resolve(converter.bindingsToTree(bindingsArray, schema));\n            });\n        });\n    }\n    async testHandleChecked(action) {\n        if (action.type !== 'bindings') {\n            throw new Error('This actor can only handle bindings streams.');\n        }\n        return true;\n    }\n    async runHandle(action, mediaType) {\n        const data = new stream_1.Readable();\n        data._read = () => {\n            // Do nothing\n        };\n        const resultStream = action.bindingsStream;\n        resultStream.on('error', error => data.emit('error', error));\n        ActorSparqlSerializeTree.bindingsStreamToGraphQl(resultStream, action.context, { materializeRdfJsTerms: true })\n            .then((result) => {\n            data.push(JSON.stringify(result, null, '  '));\n            data.push(null);\n        })\n            .catch(error => data.emit('error', error));\n        return { data };\n    }\n}\nexports.ActorSparqlSerializeTree = ActorSparqlSerializeTree;\n//# sourceMappingURL=ActorSparqlSerializeTree.js.map"]},"metadata":{},"sourceType":"script"}