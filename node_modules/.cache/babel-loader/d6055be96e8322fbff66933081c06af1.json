{"ast":null,"code":"import update from 'immutability-helper';\nconst REGISTER_TRAVERSAL = \"REGISTER_TRAVERSAL\";\nconst RUN_TRAVERSAL = \"RUN_TRAVERSAL\";\nconst TRAVERSAL_FAILED = \"TRAVERSAL_FAILED\";\nconst TRAVERSAL_UNNECCESSARY = \"TRAVERSAL_UNNECCESSARY\";\nconst FETCH_GRAPH_DOCUMENT = \"FETCH_GRAPH_DOCUMENT\";\nconst INIT_STATE = {\n  running: 0,\n  pool: {},\n  graphDocs: []\n};\nexport default function (state = INIT_STATE, action) {\n  const payload = action.payload;\n\n  switch (action.type) {\n    case REGISTER_TRAVERSAL:\n      if (!state.graphDocs.includes(payload.docUri)) {\n        return update(state, {\n          pool: {\n            $merge: {\n              [payload.docUri]: payload.params\n            }\n          }\n        });\n      } else {//console.log(\"REGISTER_TRAVERSAL: Alreaady seen this resource, ignoring: \", payload.docUri);\n      }\n\n    case RUN_TRAVERSAL:\n      if (payload.docUri in state.pool) {\n        return update(state, {\n          pool: {\n            $unset: [payload.docUri]\n          },\n          running: {\n            $set: state.running + 1\n          },\n          graphDocs: {\n            $push: [payload.docUri]\n          }\n        });\n      } else {\n        //console.log(\"WARNING: Traversal on document not included in traversal pool!\", payload.docUri);\n        return state;\n      }\n\n      break;\n\n    case TRAVERSAL_FAILED:\n    case TRAVERSAL_UNNECCESSARY:\n    case FETCH_GRAPH_DOCUMENT:\n      // new graph fragment has arrived, i.e. a traversal hop has completed\n      return update(state, {\n        running: {\n          $set: state.running - 1\n        }\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/meld-clients-core/lib/reducers/reducer_traversalPool.js"],"names":["update","REGISTER_TRAVERSAL","RUN_TRAVERSAL","TRAVERSAL_FAILED","TRAVERSAL_UNNECCESSARY","FETCH_GRAPH_DOCUMENT","INIT_STATE","running","pool","graphDocs","state","action","payload","type","includes","docUri","$merge","params","$unset","$set","$push"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,OAAO,EAAE,CADQ;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,SAAS,EAAE;AAHM,CAAnB;AAKA,eAAe,UAAUC,KAAK,GAAGJ,UAAlB,EAA8BK,MAA9B,EAAsC;AACnD,QAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKZ,kBAAL;AACE,UAAI,CAACS,KAAK,CAACD,SAAN,CAAgBK,QAAhB,CAAyBF,OAAO,CAACG,MAAjC,CAAL,EAA+C;AAC7C,eAAOf,MAAM,CAACU,KAAD,EAAQ;AACnBF,UAAAA,IAAI,EAAE;AACJQ,YAAAA,MAAM,EAAE;AACN,eAACJ,OAAO,CAACG,MAAT,GAAkBH,OAAO,CAACK;AADpB;AADJ;AADa,SAAR,CAAb;AAOD,OARD,MAQO,CAAC;AACP;;AAEH,SAAKf,aAAL;AACE,UAAIU,OAAO,CAACG,MAAR,IAAkBL,KAAK,CAACF,IAA5B,EAAkC;AAChC,eAAOR,MAAM,CAACU,KAAD,EAAQ;AACnBF,UAAAA,IAAI,EAAE;AACJU,YAAAA,MAAM,EAAE,CAACN,OAAO,CAACG,MAAT;AADJ,WADa;AAInBR,UAAAA,OAAO,EAAE;AACPY,YAAAA,IAAI,EAAET,KAAK,CAACH,OAAN,GAAgB;AADf,WAJU;AAOnBE,UAAAA,SAAS,EAAE;AACTW,YAAAA,KAAK,EAAE,CAACR,OAAO,CAACG,MAAT;AADE;AAPQ,SAAR,CAAb;AAWD,OAZD,MAYO;AACL;AACA,eAAOL,KAAP;AACD;;AAED;;AAEF,SAAKP,gBAAL;AACA,SAAKC,sBAAL;AACA,SAAKC,oBAAL;AACE;AACA,aAAOL,MAAM,CAACU,KAAD,EAAQ;AACnBH,QAAAA,OAAO,EAAE;AACPY,UAAAA,IAAI,EAAET,KAAK,CAACH,OAAN,GAAgB;AADf;AADU,OAAR,CAAb;;AAMF;AACE,aAAOG,KAAP;AA5CJ;AA8CD","sourcesContent":["import update from 'immutability-helper';\nconst REGISTER_TRAVERSAL = \"REGISTER_TRAVERSAL\";\nconst RUN_TRAVERSAL = \"RUN_TRAVERSAL\";\nconst TRAVERSAL_FAILED = \"TRAVERSAL_FAILED\";\nconst TRAVERSAL_UNNECCESSARY = \"TRAVERSAL_UNNECCESSARY\";\nconst FETCH_GRAPH_DOCUMENT = \"FETCH_GRAPH_DOCUMENT\";\nconst INIT_STATE = {\n  running: 0,\n  pool: {},\n  graphDocs: []\n};\nexport default function (state = INIT_STATE, action) {\n  const payload = action.payload;\n\n  switch (action.type) {\n    case REGISTER_TRAVERSAL:\n      if (!state.graphDocs.includes(payload.docUri)) {\n        return update(state, {\n          pool: {\n            $merge: {\n              [payload.docUri]: payload.params\n            }\n          }\n        });\n      } else {//console.log(\"REGISTER_TRAVERSAL: Alreaady seen this resource, ignoring: \", payload.docUri);\n      }\n\n    case RUN_TRAVERSAL:\n      if (payload.docUri in state.pool) {\n        return update(state, {\n          pool: {\n            $unset: [payload.docUri]\n          },\n          running: {\n            $set: state.running + 1\n          },\n          graphDocs: {\n            $push: [payload.docUri]\n          }\n        });\n      } else {\n        //console.log(\"WARNING: Traversal on document not included in traversal pool!\", payload.docUri);\n        return state;\n      }\n\n      break;\n\n    case TRAVERSAL_FAILED:\n    case TRAVERSAL_UNNECCESSARY:\n    case FETCH_GRAPH_DOCUMENT:\n      // new graph fragment has arrived, i.e. a traversal hop has completed\n      return update(state, {\n        running: {\n          $set: state.running - 1\n        }\n      });\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}