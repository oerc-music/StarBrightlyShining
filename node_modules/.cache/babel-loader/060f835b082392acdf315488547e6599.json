{"ast":null,"code":"const BlankNode = require('./BlankNode.js');\n\nconst DefaultGraph = require('./DefaultGraph.js');\n\nconst fromTermRaw = require('./fromTerm.js');\n\nconst Literal = require('./Literal.js');\n\nconst NamedNode = require('./NamedNode.js');\n\nconst Quad = require('./Quad.js');\n\nconst Variable = require('./Variable.js');\n\nfunction namedNode(value) {\n  return new NamedNode(value);\n}\n\nfunction blankNode(value) {\n  return new BlankNode(value);\n}\n\nfunction literal(value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype);\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype));\n  }\n\n  return new Literal(value, null, languageOrDatatype);\n}\n\nfunction variable(value) {\n  return new Variable(value);\n}\n\nfunction defaultGraph() {\n  return DataFactory.defaultGraphInstance;\n}\n\nfunction triple(subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object);\n}\n\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance);\n}\n\nfunction fromTerm(original) {\n  return fromTermRaw.call(DataFactory, original);\n}\n\nfunction fromQuad(original) {\n  return fromTermRaw.call(DataFactory, original);\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n};\nmodule.exports = DataFactory;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@rdfjs/data-model/lib/DataFactory.js"],"names":["BlankNode","require","DefaultGraph","fromTermRaw","Literal","NamedNode","Quad","Variable","namedNode","value","blankNode","literal","languageOrDatatype","indexOf","DataFactory","variable","defaultGraph","defaultGraphInstance","triple","subject","predicate","object","quad","graph","fromTerm","original","call","fromQuad","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,mBAAD,CAA5B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,WAAD,CAApB;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,eAAD,CAAxB;;AAEA,SAASO,SAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAO,IAAIJ,SAAJ,CAAcI,KAAd,CAAP;AACD;;AAED,SAASC,SAAT,CAAoBD,KAApB,EAA2B;AACzB,SAAO,IAAIT,SAAJ,CAAcS,KAAd,CAAP;AACD;;AAED,SAASE,OAAT,CAAkBF,KAAlB,EAAyBG,kBAAzB,EAA6C;AAC3C,MAAI,OAAOA,kBAAP,KAA8B,QAAlC,EAA4C;AAC1C,QAAIA,kBAAkB,CAACC,OAAnB,CAA2B,GAA3B,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,aAAO,IAAIT,OAAJ,CAAYK,KAAZ,EAAmBG,kBAAnB,CAAP;AACD;;AAED,WAAO,IAAIR,OAAJ,CAAYK,KAAZ,EAAmB,IAAnB,EAAyBK,WAAW,CAACN,SAAZ,CAAsBI,kBAAtB,CAAzB,CAAP;AACD;;AAED,SAAO,IAAIR,OAAJ,CAAYK,KAAZ,EAAmB,IAAnB,EAAyBG,kBAAzB,CAAP;AACD;;AAED,SAASG,QAAT,CAAmBN,KAAnB,EAA0B;AACxB,SAAO,IAAIF,QAAJ,CAAaE,KAAb,CAAP;AACD;;AAED,SAASO,YAAT,GAAyB;AACvB,SAAOF,WAAW,CAACG,oBAAnB;AACD;;AAED,SAASC,MAAT,CAAiBC,OAAjB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6C;AAC3C,SAAOP,WAAW,CAACQ,IAAZ,CAAiBH,OAAjB,EAA0BC,SAA1B,EAAqCC,MAArC,CAAP;AACD;;AAED,SAASC,IAAT,CAAeH,OAAf,EAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CE,KAA3C,EAAkD;AAChD,SAAO,IAAIjB,IAAJ,CAASa,OAAT,EAAkBC,SAAlB,EAA6BC,MAA7B,EAAqCE,KAAK,IAAIT,WAAW,CAACG,oBAA1D,CAAP;AACD;;AAED,SAASO,QAAT,CAAmBC,QAAnB,EAA6B;AAC3B,SAAOtB,WAAW,CAACuB,IAAZ,CAAiBZ,WAAjB,EAA8BW,QAA9B,CAAP;AACD;;AAED,SAASE,QAAT,CAAmBF,QAAnB,EAA6B;AAC3B,SAAOtB,WAAW,CAACuB,IAAZ,CAAiBZ,WAAjB,EAA8BW,QAA9B,CAAP;AACD;;AAED,MAAMX,WAAW,GAAG;AAClBN,EAAAA,SADkB;AAElBE,EAAAA,SAFkB;AAGlBC,EAAAA,OAHkB;AAIlBI,EAAAA,QAJkB;AAKlBC,EAAAA,YALkB;AAMlBE,EAAAA,MANkB;AAOlBI,EAAAA,IAPkB;AAQlBE,EAAAA,QARkB;AASlBG,EAAAA,QATkB;AAUlBV,EAAAA,oBAAoB,EAAE,IAAIf,YAAJ;AAVJ,CAApB;AAaA0B,MAAM,CAACC,OAAP,GAAiBf,WAAjB","sourcesContent":["const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n"]},"metadata":{},"sourceType":"script"}