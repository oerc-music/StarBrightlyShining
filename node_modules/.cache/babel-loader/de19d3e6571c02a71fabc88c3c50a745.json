{"ast":null,"code":"import { useReducer, useEffect, useDebugValue } from 'react';\nimport auth from 'solid-auth-client'; // Keep track of the WebID and the state setters tracking it\n\nlet webId = undefined;\nconst subscribers = new Set();\n\nconst getWebId = (_, id) => id;\n/**\n * Returns the WebID (string) of the active user,\n * `null` if there is no user,\n * or `undefined` if the user state is pending.\n */\n\n\nexport default function useWebId(reducer = getWebId) {\n  const [result, updateWebId] = useReducer(reducer, webId, reducer);\n  useDebugValue(webId);\n  useEffect(() => {\n    updateWebId(webId);\n    subscribers.add(updateWebId);\n    return () => subscribers.delete(updateWebId);\n  }, []);\n  return result;\n} // Inform subscribers when the WebID changes\n\nauth.trackSession(session => {\n  webId = session ? session.webId : null;\n\n  for (const subscriber of subscribers) subscriber(webId);\n});","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/react/module/hooks/useWebId.js"],"names":["useReducer","useEffect","useDebugValue","auth","webId","undefined","subscribers","Set","getWebId","_","id","useWebId","reducer","result","updateWebId","add","delete","trackSession","session","subscriber"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,mBAAjB,C,CAAsC;;AAEtC,IAAIC,KAAK,GAAGC,SAAZ;AACA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,CAAD,EAAIC,EAAJ,KAAWA,EAA5B;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,QAAT,CAAkBC,OAAO,GAAGJ,QAA5B,EAAsC;AACnD,QAAM,CAACK,MAAD,EAASC,WAAT,IAAwBd,UAAU,CAACY,OAAD,EAAUR,KAAV,EAAiBQ,OAAjB,CAAxC;AACAV,EAAAA,aAAa,CAACE,KAAD,CAAb;AACAH,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,WAAW,CAACV,KAAD,CAAX;AACAE,IAAAA,WAAW,CAACS,GAAZ,CAAgBD,WAAhB;AACA,WAAO,MAAMR,WAAW,CAACU,MAAZ,CAAmBF,WAAnB,CAAb;AACD,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAOD,MAAP;AACD,C,CAAC;;AAEFV,IAAI,CAACc,YAAL,CAAkBC,OAAO,IAAI;AAC3Bd,EAAAA,KAAK,GAAGc,OAAO,GAAGA,OAAO,CAACd,KAAX,GAAmB,IAAlC;;AAEA,OAAK,MAAMe,UAAX,IAAyBb,WAAzB,EAAsCa,UAAU,CAACf,KAAD,CAAV;AACvC,CAJD","sourcesContent":["import { useReducer, useEffect, useDebugValue } from 'react';\nimport auth from 'solid-auth-client'; // Keep track of the WebID and the state setters tracking it\n\nlet webId = undefined;\nconst subscribers = new Set();\n\nconst getWebId = (_, id) => id;\n/**\n * Returns the WebID (string) of the active user,\n * `null` if there is no user,\n * or `undefined` if the user state is pending.\n */\n\n\nexport default function useWebId(reducer = getWebId) {\n  const [result, updateWebId] = useReducer(reducer, webId, reducer);\n  useDebugValue(webId);\n  useEffect(() => {\n    updateWebId(webId);\n    subscribers.add(updateWebId);\n    return () => subscribers.delete(updateWebId);\n  }, []);\n  return result;\n} // Inform subscribers when the WebID changes\n\nauth.trackSession(session => {\n  webId = session ? session.webId : null;\n\n  for (const subscriber of subscribers) subscriber(webId);\n});"]},"metadata":{},"sourceType":"module"}