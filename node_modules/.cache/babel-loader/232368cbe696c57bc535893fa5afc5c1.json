{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationConstruct = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst rdf_terms_1 = require(\"rdf-terms\");\n\nconst BindingsToQuadsIterator_1 = require(\"./BindingsToQuadsIterator\");\n/**\n * A comunica Construct Query Operation Actor.\n */\n\n\nclass ActorQueryOperationConstruct extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'construct');\n  }\n  /**\n   * Find all variables in a list of triple patterns.\n   * @param {Algebra.Pattern[]} patterns An array of triple patterns.\n   * @return {RDF.Variable[]} The variables in the triple patterns.\n   */\n\n\n  static getVariables(patterns) {\n    return rdf_terms_1.uniqTerms([].concat.apply([], patterns.map(pattern => rdf_terms_1.getVariables(rdf_terms_1.getTerms(pattern)))));\n  }\n\n  async testOperation(pattern, context) {\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    // Apply a projection on our CONSTRUCT variables first, as the query may contain other variables as well.\n    const variables = ActorQueryOperationConstruct.getVariables(pattern.template);\n    const operation = {\n      type: 'project',\n      input: pattern.input,\n      variables\n    }; // Evaluate the input query\n\n    const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      operation,\n      context\n    })); // Construct triples using the result based on the pattern.\n\n    const quadStream = new BindingsToQuadsIterator_1.BindingsToQuadsIterator(pattern.template, output.bindingsStream); // Let the final metadata contain the estimated number of triples\n\n    let metadata;\n\n    if (output.metadata) {\n      metadata = () => output.metadata().then(meta => {\n        if (meta.totalItems) {\n          return Object.assign(Object.assign({}, meta), {\n            totalItems: meta.totalItems * pattern.template.length\n          });\n        }\n\n        return meta;\n      });\n    }\n\n    return {\n      metadata,\n      quadStream,\n      type: 'quads'\n    };\n  }\n\n}\n\nexports.ActorQueryOperationConstruct = ActorQueryOperationConstruct;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-construct/lib/ActorQueryOperationConstruct.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationConstruct","bus_query_operation_1","require","rdf_terms_1","BindingsToQuadsIterator_1","ActorQueryOperationTypedMediated","constructor","args","getVariables","patterns","uniqTerms","concat","apply","map","pattern","getTerms","testOperation","context","runOperation","variables","template","operation","type","input","output","ActorQueryOperation","getSafeBindings","mediatorQueryOperation","mediate","quadStream","BindingsToQuadsIterator","bindingsStream","metadata","then","meta","totalItems","assign","length"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,4BAAR,GAAuC,KAAK,CAA5C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,2BAAD,CAAzC;AACA;AACA;AACA;;;AACA,MAAMF,4BAAN,SAA2CC,qBAAqB,CAACI,gCAAjE,CAAkG;AAC9FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,WAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACuB,SAAZC,YAAY,CAACC,QAAD,EAAW;AAC1B,WAAON,WAAW,CAACO,SAAZ,CAAsB,GAAGC,MAAH,CACxBC,KADwB,CAClB,EADkB,EACdH,QAAQ,CAACI,GAAT,CAAaC,OAAO,IAAIX,WAAW,CAACK,YAAZ,CAAyBL,WAAW,CAACY,QAAZ,CAAqBD,OAArB,CAAzB,CAAxB,CADc,CAAtB,CAAP;AAEH;;AACkB,QAAbE,aAAa,CAACF,OAAD,EAAUG,OAAV,EAAmB;AAClC,WAAO,IAAP;AACH;;AACiB,QAAZC,YAAY,CAACJ,OAAD,EAAUG,OAAV,EAAmB;AACjC;AACA,UAAME,SAAS,GAAGnB,4BAA4B,CAACQ,YAA7B,CAA0CM,OAAO,CAACM,QAAlD,CAAlB;AACA,UAAMC,SAAS,GAAG;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,KAAK,EAAET,OAAO,CAACS,KAAlC;AAAyCJ,MAAAA;AAAzC,KAAlB,CAHiC,CAIjC;;AACA,UAAMK,MAAM,GAAGvB,qBAAqB,CAACwB,mBAAtB,CAA0CC,eAA1C,CAA0D,MAAM,KAAKC,sBAAL,CAA4BC,OAA5B,CAAoC;AAAEP,MAAAA,SAAF;AAAaJ,MAAAA;AAAb,KAApC,CAAhE,CAAf,CALiC,CAMjC;;AACA,UAAMY,UAAU,GAAG,IAAIzB,yBAAyB,CAAC0B,uBAA9B,CAAsDhB,OAAO,CAACM,QAA9D,EAAwEI,MAAM,CAACO,cAA/E,CAAnB,CAPiC,CAQjC;;AACA,QAAIC,QAAJ;;AACA,QAAIR,MAAM,CAACQ,QAAX,EAAqB;AACjBA,MAAAA,QAAQ,GAAG,MAAMR,MAAM,CAACQ,QAAP,GAAkBC,IAAlB,CAAuBC,IAAI,IAAI;AAC5C,YAAIA,IAAI,CAACC,UAAT,EAAqB;AACjB,iBAAOvC,MAAM,CAACwC,MAAP,CAAcxC,MAAM,CAACwC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,CAAd,EAAuC;AAAEC,YAAAA,UAAU,EAAED,IAAI,CAACC,UAAL,GAAkBrB,OAAO,CAACM,QAAR,CAAiBiB;AAAjD,WAAvC,CAAP;AACH;;AACD,eAAOH,IAAP;AACH,OALgB,CAAjB;AAMH;;AACD,WAAO;AACHF,MAAAA,QADG;AAEHH,MAAAA,UAFG;AAGHP,MAAAA,IAAI,EAAE;AAHH,KAAP;AAKH;;AAvC6F;;AAyClGxB,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationConstruct = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst rdf_terms_1 = require(\"rdf-terms\");\nconst BindingsToQuadsIterator_1 = require(\"./BindingsToQuadsIterator\");\n/**\n * A comunica Construct Query Operation Actor.\n */\nclass ActorQueryOperationConstruct extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'construct');\n    }\n    /**\n     * Find all variables in a list of triple patterns.\n     * @param {Algebra.Pattern[]} patterns An array of triple patterns.\n     * @return {RDF.Variable[]} The variables in the triple patterns.\n     */\n    static getVariables(patterns) {\n        return rdf_terms_1.uniqTerms([].concat\n            .apply([], patterns.map(pattern => rdf_terms_1.getVariables(rdf_terms_1.getTerms(pattern)))));\n    }\n    async testOperation(pattern, context) {\n        return true;\n    }\n    async runOperation(pattern, context) {\n        // Apply a projection on our CONSTRUCT variables first, as the query may contain other variables as well.\n        const variables = ActorQueryOperationConstruct.getVariables(pattern.template);\n        const operation = { type: 'project', input: pattern.input, variables };\n        // Evaluate the input query\n        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation, context }));\n        // Construct triples using the result based on the pattern.\n        const quadStream = new BindingsToQuadsIterator_1.BindingsToQuadsIterator(pattern.template, output.bindingsStream);\n        // Let the final metadata contain the estimated number of triples\n        let metadata;\n        if (output.metadata) {\n            metadata = () => output.metadata().then(meta => {\n                if (meta.totalItems) {\n                    return Object.assign(Object.assign({}, meta), { totalItems: meta.totalItems * pattern.template.length });\n                }\n                return meta;\n            });\n        }\n        return {\n            metadata,\n            quadStream,\n            type: 'quads',\n        };\n    }\n}\nexports.ActorQueryOperationConstruct = ActorQueryOperationConstruct;\n//# sourceMappingURL=ActorQueryOperationConstruct.js.map"]},"metadata":{},"sourceType":"script"}