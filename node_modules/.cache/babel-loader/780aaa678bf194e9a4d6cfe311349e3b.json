{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KEY_CONTEXT_STRICTVALUES = exports.KEY_CONTEXT_DOCUMENTLOADER = exports.ActorRdfParseJsonLd = void 0;\n\nconst bus_rdf_parse_1 = require(\"@comunica/bus-rdf-parse\");\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n\nconst jsonld_streaming_parser_1 = require(\"jsonld-streaming-parser\");\n\nconst DocumentLoaderMediated_1 = require(\"./DocumentLoaderMediated\");\n/**\n * A JSON-LD RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse JSON-LD-based RDF serializations and announce the presence of them by media type.\n */\n\n\nclass ActorRdfParseJsonLd extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {\n  constructor(args) {\n    super(args);\n  }\n\n  async testHandle(action, mediaType, context) {\n    if (context && context.has('@comunica/actor-rdf-parse-html-script:processing-html-script') && mediaType !== 'application/ld+json') {\n      throw new Error(`JSON-LD in script tags can only have media type 'application/ld+json'`);\n    }\n\n    if (!(mediaType in this.mediaTypes) && !mediaType.endsWith('+json')) {\n      throw new Error(`Unrecognized media type: ${mediaType}`);\n    }\n\n    return await this.testHandleChecked(action);\n  }\n\n  async runHandle(action, mediaType, actionContext) {\n    const parser = jsonld_streaming_parser_1.JsonLdParser.fromHttpResponse(action.baseIRI, mediaType, action.headers, Object.assign({\n      documentLoader: actionContext && actionContext.get(context_entries_1.KeysRdfParseJsonLd.documentLoader) || new DocumentLoaderMediated_1.DocumentLoaderMediated(this.mediatorHttp, actionContext),\n      strictValues: actionContext && actionContext.get(context_entries_1.KeysRdfParseJsonLd.strictValues)\n    }, actionContext && actionContext.get(context_entries_1.KeysRdfParseJsonLd.parserOptions) || {}));\n    const quads = parser.import(action.input);\n    return {\n      quads\n    };\n  }\n\n}\n\nexports.ActorRdfParseJsonLd = ActorRdfParseJsonLd;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_DOCUMENTLOADER = context_entries_1.KeysRdfParseJsonLd.documentLoader;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_STRICTVALUES = context_entries_1.KeysRdfParseJsonLd.strictValues;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-parse-jsonld/lib/ActorRdfParseJsonLd.js"],"names":["Object","defineProperty","exports","value","KEY_CONTEXT_STRICTVALUES","KEY_CONTEXT_DOCUMENTLOADER","ActorRdfParseJsonLd","bus_rdf_parse_1","require","context_entries_1","jsonld_streaming_parser_1","DocumentLoaderMediated_1","ActorRdfParseFixedMediaTypes","constructor","args","testHandle","action","mediaType","context","has","Error","mediaTypes","endsWith","testHandleChecked","runHandle","actionContext","parser","JsonLdParser","fromHttpResponse","baseIRI","headers","assign","documentLoader","get","KeysRdfParseJsonLd","DocumentLoaderMediated","mediatorHttp","strictValues","parserOptions","quads","import","input"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmCF,OAAO,CAACG,0BAAR,GAAqCH,OAAO,CAACI,mBAAR,GAA8B,KAAK,CAA3G;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,yBAAD,CAA/B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,2BAAD,CAAjC;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,yBAAD,CAAzC;;AACA,MAAMG,wBAAwB,GAAGH,OAAO,CAAC,0BAAD,CAAxC;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,mBAAN,SAAkCC,eAAe,CAACK,4BAAlD,CAA+E;AAC3EC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACe,QAAVC,UAAU,CAACC,MAAD,EAASC,SAAT,EAAoBC,OAApB,EAA6B;AACzC,QAAIA,OAAO,IACPA,OAAO,CAACC,GAAR,CAAY,8DAAZ,CADA,IAEAF,SAAS,KAAK,qBAFlB,EAEyC;AACrC,YAAM,IAAIG,KAAJ,CAAW,uEAAX,CAAN;AACH;;AACD,QAAI,EAAEH,SAAS,IAAI,KAAKI,UAApB,KAAmC,CAACJ,SAAS,CAACK,QAAV,CAAmB,OAAnB,CAAxC,EAAqE;AACjE,YAAM,IAAIF,KAAJ,CAAW,4BAA2BH,SAAU,EAAhD,CAAN;AACH;;AACD,WAAO,MAAM,KAAKM,iBAAL,CAAuBP,MAAvB,CAAb;AACH;;AACc,QAATQ,SAAS,CAACR,MAAD,EAASC,SAAT,EAAoBQ,aAApB,EAAmC;AAC9C,UAAMC,MAAM,GAAGhB,yBAAyB,CAACiB,YAA1B,CAAuCC,gBAAvC,CAAwDZ,MAAM,CAACa,OAA/D,EAAwEZ,SAAxE,EAAmFD,MAAM,CAACc,OAA1F,EAAmG9B,MAAM,CAAC+B,MAAP,CAAc;AAAEC,MAAAA,cAAc,EAAEP,aAAa,IAAIA,aAAa,CAACQ,GAAd,CAAkBxB,iBAAiB,CAACyB,kBAAlB,CAAqCF,cAAvD,CAAjB,IAC1I,IAAIrB,wBAAwB,CAACwB,sBAA7B,CAAoD,KAAKC,YAAzD,EAAuEX,aAAvE,CADwH;AACjCY,MAAAA,YAAY,EAAEZ,aAAa,IAAIA,aAAa,CAACQ,GAAd,CAAkBxB,iBAAiB,CAACyB,kBAAlB,CAAqCG,YAAvD;AADE,KAAd,EACqFZ,aAAa,IAAIA,aAAa,CAACQ,GAAd,CAAkBxB,iBAAiB,CAACyB,kBAAlB,CAAqCI,aAAvD,CAAlB,IAA4F,EADhL,CAAnG,CAAf;AAEA,UAAMC,KAAK,GAAGb,MAAM,CAACc,MAAP,CAAcxB,MAAM,CAACyB,KAArB,CAAd;AACA,WAAO;AAAEF,MAAAA;AAAF,KAAP;AACH;;AApB0E;;AAsB/ErC,OAAO,CAACI,mBAAR,GAA8BA,mBAA9B;AACA;AACA;AACA;;AACAJ,OAAO,CAACG,0BAAR,GAAqCI,iBAAiB,CAACyB,kBAAlB,CAAqCF,cAA1E;AACA;AACA;AACA;;AACA9B,OAAO,CAACE,wBAAR,GAAmCK,iBAAiB,CAACyB,kBAAlB,CAAqCG,YAAxE","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY_CONTEXT_STRICTVALUES = exports.KEY_CONTEXT_DOCUMENTLOADER = exports.ActorRdfParseJsonLd = void 0;\nconst bus_rdf_parse_1 = require(\"@comunica/bus-rdf-parse\");\nconst context_entries_1 = require(\"@comunica/context-entries\");\nconst jsonld_streaming_parser_1 = require(\"jsonld-streaming-parser\");\nconst DocumentLoaderMediated_1 = require(\"./DocumentLoaderMediated\");\n/**\n * A JSON-LD RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse JSON-LD-based RDF serializations and announce the presence of them by media type.\n */\nclass ActorRdfParseJsonLd extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {\n    constructor(args) {\n        super(args);\n    }\n    async testHandle(action, mediaType, context) {\n        if (context &&\n            context.has('@comunica/actor-rdf-parse-html-script:processing-html-script') &&\n            mediaType !== 'application/ld+json') {\n            throw new Error(`JSON-LD in script tags can only have media type 'application/ld+json'`);\n        }\n        if (!(mediaType in this.mediaTypes) && !mediaType.endsWith('+json')) {\n            throw new Error(`Unrecognized media type: ${mediaType}`);\n        }\n        return await this.testHandleChecked(action);\n    }\n    async runHandle(action, mediaType, actionContext) {\n        const parser = jsonld_streaming_parser_1.JsonLdParser.fromHttpResponse(action.baseIRI, mediaType, action.headers, Object.assign({ documentLoader: actionContext && actionContext.get(context_entries_1.KeysRdfParseJsonLd.documentLoader) ||\n                new DocumentLoaderMediated_1.DocumentLoaderMediated(this.mediatorHttp, actionContext), strictValues: actionContext && actionContext.get(context_entries_1.KeysRdfParseJsonLd.strictValues) }, (actionContext && actionContext.get(context_entries_1.KeysRdfParseJsonLd.parserOptions)) || {}));\n        const quads = parser.import(action.input);\n        return { quads };\n    }\n}\nexports.ActorRdfParseJsonLd = ActorRdfParseJsonLd;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_DOCUMENTLOADER = context_entries_1.KeysRdfParseJsonLd.documentLoader;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_STRICTVALUES = context_entries_1.KeysRdfParseJsonLd.strictValues;\n//# sourceMappingURL=ActorRdfParseJsonLd.js.map"]},"metadata":{},"sourceType":"script"}