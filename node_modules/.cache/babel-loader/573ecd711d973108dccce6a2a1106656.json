{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RdfJsQuadSource = void 0;\n\nconst asynciterator_1 = require(\"asynciterator\");\n/**\n * A quad source that wraps over an {@link RDF.Source}.\n */\n\n\nclass RdfJsQuadSource {\n  constructor(source) {\n    this.source = source;\n  }\n\n  static nullifyVariables(term) {\n    return !term || term.termType === 'Variable' ? undefined : term;\n  }\n\n  match(subject, predicate, object, graph) {\n    // Create an async iterator from the matched quad stream\n    const rawStream = this.source.match(RdfJsQuadSource.nullifyVariables(subject), RdfJsQuadSource.nullifyVariables(predicate), RdfJsQuadSource.nullifyVariables(object), RdfJsQuadSource.nullifyVariables(graph));\n    const it = asynciterator_1.wrap(rawStream, {\n      autoStart: false\n    }); // Determine metadata\n\n    this.setMetadata(it, subject, predicate, object, graph).catch(error => it.destroy(error));\n    return it;\n  }\n\n  async setMetadata(it, subject, predicate, object, graph) {\n    let totalItems;\n\n    if (this.source.countQuads) {\n      // If the source provides a dedicated method for determining cardinality, use that.\n      totalItems = await this.source.countQuads(RdfJsQuadSource.nullifyVariables(subject), RdfJsQuadSource.nullifyVariables(predicate), RdfJsQuadSource.nullifyVariables(object), RdfJsQuadSource.nullifyVariables(graph));\n    } else {\n      // Otherwise, fallback to a sub-optimal alternative where we just call match again to count the quads.\n      // WARNING: we can NOT reuse the original data stream here,\n      // because we may loose data elements due to things happening async.\n      let i = 0;\n      totalItems = await new Promise((resolve, reject) => {\n        const matches = this.source.match(RdfJsQuadSource.nullifyVariables(subject), RdfJsQuadSource.nullifyVariables(predicate), RdfJsQuadSource.nullifyVariables(object), RdfJsQuadSource.nullifyVariables(graph));\n        matches.on('error', reject);\n        matches.on('end', () => resolve(i));\n        matches.on('data', () => i++);\n      });\n    }\n\n    it.setProperty('metadata', {\n      totalItems\n    });\n  }\n\n}\n\nexports.RdfJsQuadSource = RdfJsQuadSource;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/RdfJsQuadSource.js"],"names":["Object","defineProperty","exports","value","RdfJsQuadSource","asynciterator_1","require","constructor","source","nullifyVariables","term","termType","undefined","match","subject","predicate","object","graph","rawStream","it","wrap","autoStart","setMetadata","catch","error","destroy","totalItems","countQuads","i","Promise","resolve","reject","matches","on","setProperty"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RdfJsQuadSource = void 0;\nconst asynciterator_1 = require(\"asynciterator\");\n/**\n * A quad source that wraps over an {@link RDF.Source}.\n */\nclass RdfJsQuadSource {\n    constructor(source) {\n        this.source = source;\n    }\n    static nullifyVariables(term) {\n        return !term || term.termType === 'Variable' ? undefined : term;\n    }\n    match(subject, predicate, object, graph) {\n        // Create an async iterator from the matched quad stream\n        const rawStream = this.source.match(RdfJsQuadSource.nullifyVariables(subject), RdfJsQuadSource.nullifyVariables(predicate), RdfJsQuadSource.nullifyVariables(object), RdfJsQuadSource.nullifyVariables(graph));\n        const it = asynciterator_1.wrap(rawStream, { autoStart: false });\n        // Determine metadata\n        this.setMetadata(it, subject, predicate, object, graph)\n            .catch(error => it.destroy(error));\n        return it;\n    }\n    async setMetadata(it, subject, predicate, object, graph) {\n        let totalItems;\n        if (this.source.countQuads) {\n            // If the source provides a dedicated method for determining cardinality, use that.\n            totalItems = await this.source.countQuads(RdfJsQuadSource.nullifyVariables(subject), RdfJsQuadSource.nullifyVariables(predicate), RdfJsQuadSource.nullifyVariables(object), RdfJsQuadSource.nullifyVariables(graph));\n        }\n        else {\n            // Otherwise, fallback to a sub-optimal alternative where we just call match again to count the quads.\n            // WARNING: we can NOT reuse the original data stream here,\n            // because we may loose data elements due to things happening async.\n            let i = 0;\n            totalItems = await new Promise((resolve, reject) => {\n                const matches = this.source.match(RdfJsQuadSource.nullifyVariables(subject), RdfJsQuadSource.nullifyVariables(predicate), RdfJsQuadSource.nullifyVariables(object), RdfJsQuadSource.nullifyVariables(graph));\n                matches.on('error', reject);\n                matches.on('end', () => resolve(i));\n                matches.on('data', () => i++);\n            });\n        }\n        it.setProperty('metadata', { totalItems });\n    }\n}\nexports.RdfJsQuadSource = RdfJsQuadSource;\n//# sourceMappingURL=RdfJsQuadSource.js.map"]},"metadata":{},"sourceType":"script"}