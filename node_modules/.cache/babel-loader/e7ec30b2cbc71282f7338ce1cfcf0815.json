{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { useState } from 'react';\nimport data from '@solid/query-ldflex';\nimport { srcToLDflex } from '../util';\nimport useLDflexValue from '../hooks/useLDflexValue';\nconst {\n  as\n} = data.context;\n/**\n * Button that displays whether the user has performed an activity;\n * when clicked, performs the activity.\n */\n\nexport default function ActivityButton({\n  activityType = `${as}Like`,\n  object = `[${window.location.href}]`,\n  children,\n  shortName = /\\w*$/.exec(activityType)[0],\n  className = `solid activity ${shortName.toLowerCase()}`,\n  activateText = shortName,\n  deactivateText = activateText,\n  activateLabel = children ? [activateText, ' ', children] : activateText,\n  deactivateLabel = children ? [deactivateText, ' ', children] : deactivateText,\n  ...props\n}) {\n  // Look up a possibly existing activity\n  object = srcToLDflex(object);\n  const [exists, setExists] = useState();\n  const activity = useLDflexValue(`${object}.findActivity(\"${activityType}\")`);\n  if (exists === undefined && activity) setExists(true); // Creates a new activity (if none already exists)\n\n  async function toggleActivity() {\n    // Optimistically display the result\n    setExists(!exists);\n\n    try {\n      // Try performing the action\n      const action = !exists ? 'create' : 'delete';\n      await data.resolve(`${object}.${action}Activity(\"${activityType}\")`); // Confirm the result (in case a concurrent action was pending)\n\n      setExists(!exists);\n    } catch (error) {\n      // Revert to the previous state\n      setExists(exists);\n      console.warn('@solid/react-components', error);\n    }\n  } // Return the activity button\n\n\n  className = `${className} ${exists ? 'performed' : ''}`;\n  return /*#__PURE__*/React.createElement(\"button\", _extends({\n    className: className,\n    onClick: toggleActivity\n  }, props), exists ? deactivateLabel : activateLabel);\n} // Internal helper for creating custom activity buttons\n\nexport function customActivityButton(type, activate, deactivate, deactivateNoChildren) {\n  const activityType = `${as}${type}`;\n  return ({\n    object,\n    children = object ? null : 'this page',\n    activateText = activate,\n    deactivateText = children ? deactivate : deactivateNoChildren,\n    ...props\n  }) => /*#__PURE__*/React.createElement(ActivityButton, _extends({}, props, {\n    activityType,\n    object,\n    children,\n    activateText,\n    deactivateText\n  }));\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/react/module/components/ActivityButton.js"],"names":["_extends","React","useState","data","srcToLDflex","useLDflexValue","as","context","ActivityButton","activityType","object","window","location","href","children","shortName","exec","className","toLowerCase","activateText","deactivateText","activateLabel","deactivateLabel","props","exists","setExists","activity","undefined","toggleActivity","action","resolve","error","console","warn","createElement","onClick","customActivityButton","type","activate","deactivate","deactivateNoChildren"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { useState } from 'react';\nimport data from '@solid/query-ldflex';\nimport { srcToLDflex } from '../util';\nimport useLDflexValue from '../hooks/useLDflexValue';\nconst {\n  as\n} = data.context;\n/**\n * Button that displays whether the user has performed an activity;\n * when clicked, performs the activity.\n */\n\nexport default function ActivityButton({\n  activityType = `${as}Like`,\n  object = `[${window.location.href}]`,\n  children,\n  shortName = /\\w*$/.exec(activityType)[0],\n  className = `solid activity ${shortName.toLowerCase()}`,\n  activateText = shortName,\n  deactivateText = activateText,\n  activateLabel = children ? [activateText, ' ', children] : activateText,\n  deactivateLabel = children ? [deactivateText, ' ', children] : deactivateText,\n  ...props\n}) {\n  // Look up a possibly existing activity\n  object = srcToLDflex(object);\n  const [exists, setExists] = useState();\n  const activity = useLDflexValue(`${object}.findActivity(\"${activityType}\")`);\n  if (exists === undefined && activity) setExists(true); // Creates a new activity (if none already exists)\n\n  async function toggleActivity() {\n    // Optimistically display the result\n    setExists(!exists);\n\n    try {\n      // Try performing the action\n      const action = !exists ? 'create' : 'delete';\n      await data.resolve(`${object}.${action}Activity(\"${activityType}\")`); // Confirm the result (in case a concurrent action was pending)\n\n      setExists(!exists);\n    } catch (error) {\n      // Revert to the previous state\n      setExists(exists);\n      console.warn('@solid/react-components', error);\n    }\n  } // Return the activity button\n\n\n  className = `${className} ${exists ? 'performed' : ''}`;\n  return /*#__PURE__*/React.createElement(\"button\", _extends({\n    className: className,\n    onClick: toggleActivity\n  }, props), exists ? deactivateLabel : activateLabel);\n} // Internal helper for creating custom activity buttons\n\nexport function customActivityButton(type, activate, deactivate, deactivateNoChildren) {\n  const activityType = `${as}${type}`;\n  return ({\n    object,\n    children = object ? null : 'this page',\n    activateText = activate,\n    deactivateText = children ? deactivate : deactivateNoChildren,\n    ...props\n  }) => /*#__PURE__*/React.createElement(ActivityButton, _extends({}, props, {\n    activityType,\n    object,\n    children,\n    activateText,\n    deactivateText\n  }));\n}"]},"metadata":{},"sourceType":"module"}