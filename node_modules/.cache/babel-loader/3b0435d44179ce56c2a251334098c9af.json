{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfDereference = exports.KEY_CONTEXT_LENIENT = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\n\nexports.KEY_CONTEXT_LENIENT = context_entries_1.KeysInitSparql.lenient;\n/**\n * A base actor for dereferencing URLs to quad streams.\n *\n * Actor types:\n * * Input:  IActionRdfDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferenceOutput: A quad stream.\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\n\nclass ActorRdfDereference extends core_1.Actor {\n  constructor(args) {\n    super(args);\n  }\n  /**\n   * Check if hard errors should occur on HTTP or parse errors.\n   * @param {IActionRdfDereference} action An RDF dereference action.\n   * @return {boolean} If hard errors are enabled.\n   */\n\n\n  isHardError(action) {\n    return !action.context || !action.context.get(context_entries_1.KeysInitSparql.lenient);\n  }\n  /**\n   * If hard errors are disabled, modify the given stream so that errors are delegated to the logger.\n   * @param {IActionRdfDereference} action An RDF dereference action.\n   * @param {Stream} quads A quad stream.\n   * @return {Stream} The resulting quad stream.\n   */\n\n\n  handleDereferenceStreamErrors(action, quads) {\n    // If we don't emit hard errors, make parsing error events log instead, and silence them downstream.\n    if (!this.isHardError(action)) {\n      quads.on('error', error => {\n        this.logError(action.context, error.message, () => ({\n          url: action.url\n        })); // Make sure the errored stream is ended.\n\n        quads.push(null);\n      });\n      quads = quads.pipe(new stream_1.PassThrough({\n        objectMode: true\n      }));\n    }\n\n    return quads;\n  }\n  /**\n   * Handle the given error as a rejection or delegate it to the logger,\n   * depending on whether or not hard errors are enabled.\n   * @param {IActionRdfDereference} action An RDF dereference action.\n   * @param {Error} error An error that has occured.\n   * @return {Promise<IActorRdfDereferenceOutput>} A promise that rejects or resolves to an empty output.\n   */\n\n\n  async handleDereferenceError(action, error) {\n    if (this.isHardError(action)) {\n      throw error;\n    } else {\n      this.logError(action.context, error.message);\n      const quads = new stream_1.Readable();\n      quads.push(null);\n      return {\n        url: action.url,\n        quads\n      };\n    }\n  }\n\n}\n\nexports.ActorRdfDereference = ActorRdfDereference;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-dereference/lib/ActorRdfDereference.js"],"names":["Object","defineProperty","exports","value","ActorRdfDereference","KEY_CONTEXT_LENIENT","stream_1","require","context_entries_1","core_1","KeysInitSparql","lenient","Actor","constructor","args","isHardError","action","context","get","handleDereferenceStreamErrors","quads","on","error","logError","message","url","push","pipe","PassThrough","objectMode","handleDereferenceError","Readable"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,mBAAR,GAA8B,KAAK,CAAjE;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,2BAAD,CAAjC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;;;AACAL,OAAO,CAACG,mBAAR,GAA8BG,iBAAiB,CAACE,cAAlB,CAAiCC,OAA/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMP,mBAAN,SAAkCK,MAAM,CAACG,KAAzC,CAA+C;AAC3CC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,WAAO,CAACA,MAAM,CAACC,OAAR,IAAmB,CAACD,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBV,iBAAiB,CAACE,cAAlB,CAAiCC,OAApD,CAA3B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,6BAA6B,CAACH,MAAD,EAASI,KAAT,EAAgB;AACzC;AACA,QAAI,CAAC,KAAKL,WAAL,CAAiBC,MAAjB,CAAL,EAA+B;AAC3BI,MAAAA,KAAK,CAACC,EAAN,CAAS,OAAT,EAAkBC,KAAK,IAAI;AACvB,aAAKC,QAAL,CAAcP,MAAM,CAACC,OAArB,EAA8BK,KAAK,CAACE,OAApC,EAA6C,OAAO;AAAEC,UAAAA,GAAG,EAAET,MAAM,CAACS;AAAd,SAAP,CAA7C,EADuB,CAEvB;;AACAL,QAAAA,KAAK,CAACM,IAAN,CAAW,IAAX;AACH,OAJD;AAKAN,MAAAA,KAAK,GAAGA,KAAK,CAACO,IAAN,CAAW,IAAIrB,QAAQ,CAACsB,WAAb,CAAyB;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAzB,CAAX,CAAR;AACH;;AACD,WAAOT,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACgC,QAAtBU,sBAAsB,CAACd,MAAD,EAASM,KAAT,EAAgB;AACxC,QAAI,KAAKP,WAAL,CAAiBC,MAAjB,CAAJ,EAA8B;AAC1B,YAAMM,KAAN;AACH,KAFD,MAGK;AACD,WAAKC,QAAL,CAAcP,MAAM,CAACC,OAArB,EAA8BK,KAAK,CAACE,OAApC;AACA,YAAMJ,KAAK,GAAG,IAAId,QAAQ,CAACyB,QAAb,EAAd;AACAX,MAAAA,KAAK,CAACM,IAAN,CAAW,IAAX;AACA,aAAO;AAAED,QAAAA,GAAG,EAAET,MAAM,CAACS,GAAd;AAAmBL,QAAAA;AAAnB,OAAP;AACH;AACJ;;AA/C0C;;AAiD/ClB,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfDereference = exports.KEY_CONTEXT_LENIENT = void 0;\nconst stream_1 = require(\"stream\");\nconst context_entries_1 = require(\"@comunica/context-entries\");\nconst core_1 = require(\"@comunica/core\");\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_LENIENT = context_entries_1.KeysInitSparql.lenient;\n/**\n * A base actor for dereferencing URLs to quad streams.\n *\n * Actor types:\n * * Input:  IActionRdfDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferenceOutput: A quad stream.\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\nclass ActorRdfDereference extends core_1.Actor {\n    constructor(args) {\n        super(args);\n    }\n    /**\n     * Check if hard errors should occur on HTTP or parse errors.\n     * @param {IActionRdfDereference} action An RDF dereference action.\n     * @return {boolean} If hard errors are enabled.\n     */\n    isHardError(action) {\n        return !action.context || !action.context.get(context_entries_1.KeysInitSparql.lenient);\n    }\n    /**\n     * If hard errors are disabled, modify the given stream so that errors are delegated to the logger.\n     * @param {IActionRdfDereference} action An RDF dereference action.\n     * @param {Stream} quads A quad stream.\n     * @return {Stream} The resulting quad stream.\n     */\n    handleDereferenceStreamErrors(action, quads) {\n        // If we don't emit hard errors, make parsing error events log instead, and silence them downstream.\n        if (!this.isHardError(action)) {\n            quads.on('error', error => {\n                this.logError(action.context, error.message, () => ({ url: action.url }));\n                // Make sure the errored stream is ended.\n                quads.push(null);\n            });\n            quads = quads.pipe(new stream_1.PassThrough({ objectMode: true }));\n        }\n        return quads;\n    }\n    /**\n     * Handle the given error as a rejection or delegate it to the logger,\n     * depending on whether or not hard errors are enabled.\n     * @param {IActionRdfDereference} action An RDF dereference action.\n     * @param {Error} error An error that has occured.\n     * @return {Promise<IActorRdfDereferenceOutput>} A promise that rejects or resolves to an empty output.\n     */\n    async handleDereferenceError(action, error) {\n        if (this.isHardError(action)) {\n            throw error;\n        }\n        else {\n            this.logError(action.context, error.message);\n            const quads = new stream_1.Readable();\n            quads.push(null);\n            return { url: action.url, quads };\n        }\n    }\n}\nexports.ActorRdfDereference = ActorRdfDereference;\n//# sourceMappingURL=ActorRdfDereference.js.map"]},"metadata":{},"sourceType":"script"}