{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Translates between an RDF literal and a JavaScript primitive.\n */\n\nclass Translator {\n  constructor() {\n    this.supportedRdfDatatypes = [];\n    this.fromRdfHandlers = {};\n    this.toRdfHandlers = {};\n  }\n\n  static incorrectRdfDataType(literal) {\n    throw new Error(`Invalid RDF ${literal.datatype.value} value: '${literal.value}'`);\n  }\n\n  registerHandler(handler, rdfDatatypes, javaScriptDataTypes) {\n    for (const rdfDatatype of rdfDatatypes) {\n      this.supportedRdfDatatypes.push(rdfDatatype);\n      this.fromRdfHandlers[rdfDatatype.value] = handler;\n    }\n\n    for (const javaScriptDataType of javaScriptDataTypes) {\n      let existingToRdfHandlers = this.toRdfHandlers[javaScriptDataType];\n\n      if (!existingToRdfHandlers) {\n        this.toRdfHandlers[javaScriptDataType] = existingToRdfHandlers = [];\n      }\n\n      existingToRdfHandlers.push(handler);\n    }\n  }\n\n  fromRdf(literal, validate) {\n    const handler = this.fromRdfHandlers[literal.datatype.value];\n\n    if (handler) {\n      return handler.fromRdf(literal, validate);\n    } else {\n      return literal.value;\n    }\n  }\n\n  toRdf(value, options) {\n    const handlers = this.toRdfHandlers[typeof value];\n\n    if (handlers) {\n      for (const handler of handlers) {\n        const ret = handler.toRdf(value, options);\n\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n\n    throw new Error(`Invalid JavaScript value: '${value}'`);\n  }\n  /**\n   * @return {NamedNode[]} An array of all supported RDF datatypes.\n   */\n\n\n  getSupportedRdfDatatypes() {\n    return this.supportedRdfDatatypes;\n  }\n  /**\n   * @return {string[]} An array of all supported JavaScript types.\n   */\n\n\n  getSupportedJavaScriptPrimitives() {\n    return Object.keys(this.toRdfHandlers);\n  }\n\n}\n\nexports.Translator = Translator;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-literal/lib/Translator.js"],"names":["Object","defineProperty","exports","value","Translator","constructor","supportedRdfDatatypes","fromRdfHandlers","toRdfHandlers","incorrectRdfDataType","literal","Error","datatype","registerHandler","handler","rdfDatatypes","javaScriptDataTypes","rdfDatatype","push","javaScriptDataType","existingToRdfHandlers","fromRdf","validate","toRdf","options","handlers","ret","getSupportedRdfDatatypes","getSupportedJavaScriptPrimitives","keys"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;;AACA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,GAAG;AACV,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACH;;AAC0B,SAApBC,oBAAoB,CAACC,OAAD,EAAU;AACjC,UAAM,IAAIC,KAAJ,CAAW,eAAcD,OAAO,CAACE,QAAR,CAAiBT,KAAM,YAAWO,OAAO,CAACP,KAAM,GAAzE,CAAN;AACH;;AACDU,EAAAA,eAAe,CAACC,OAAD,EAAUC,YAAV,EAAwBC,mBAAxB,EAA6C;AACxD,SAAK,MAAMC,WAAX,IAA0BF,YAA1B,EAAwC;AACpC,WAAKT,qBAAL,CAA2BY,IAA3B,CAAgCD,WAAhC;AACA,WAAKV,eAAL,CAAqBU,WAAW,CAACd,KAAjC,IAA0CW,OAA1C;AACH;;AACD,SAAK,MAAMK,kBAAX,IAAiCH,mBAAjC,EAAsD;AAClD,UAAII,qBAAqB,GAAG,KAAKZ,aAAL,CAAmBW,kBAAnB,CAA5B;;AACA,UAAI,CAACC,qBAAL,EAA4B;AACxB,aAAKZ,aAAL,CAAmBW,kBAAnB,IAAyCC,qBAAqB,GAAG,EAAjE;AACH;;AACDA,MAAAA,qBAAqB,CAACF,IAAtB,CAA2BJ,OAA3B;AACH;AACJ;;AACDO,EAAAA,OAAO,CAACX,OAAD,EAAUY,QAAV,EAAoB;AACvB,UAAMR,OAAO,GAAG,KAAKP,eAAL,CAAqBG,OAAO,CAACE,QAAR,CAAiBT,KAAtC,CAAhB;;AACA,QAAIW,OAAJ,EAAa;AACT,aAAOA,OAAO,CAACO,OAAR,CAAgBX,OAAhB,EAAyBY,QAAzB,CAAP;AACH,KAFD,MAGK;AACD,aAAOZ,OAAO,CAACP,KAAf;AACH;AACJ;;AACDoB,EAAAA,KAAK,CAACpB,KAAD,EAAQqB,OAAR,EAAiB;AAClB,UAAMC,QAAQ,GAAG,KAAKjB,aAAL,CAAmB,OAAOL,KAA1B,CAAjB;;AACA,QAAIsB,QAAJ,EAAc;AACV,WAAK,MAAMX,OAAX,IAAsBW,QAAtB,EAAgC;AAC5B,cAAMC,GAAG,GAAGZ,OAAO,CAACS,KAAR,CAAcpB,KAAd,EAAqBqB,OAArB,CAAZ;;AACA,YAAIE,GAAJ,EAAS;AACL,iBAAOA,GAAP;AACH;AACJ;AACJ;;AACD,UAAM,IAAIf,KAAJ,CAAW,8BAA6BR,KAAM,GAA9C,CAAN;AACH;AACD;AACJ;AACA;;;AACIwB,EAAAA,wBAAwB,GAAG;AACvB,WAAO,KAAKrB,qBAAZ;AACH;AACD;AACJ;AACA;;;AACIsB,EAAAA,gCAAgC,GAAG;AAC/B,WAAO5B,MAAM,CAAC6B,IAAP,CAAY,KAAKrB,aAAjB,CAAP;AACH;;AAtDY;;AAwDjBN,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Translates between an RDF literal and a JavaScript primitive.\n */\nclass Translator {\n    constructor() {\n        this.supportedRdfDatatypes = [];\n        this.fromRdfHandlers = {};\n        this.toRdfHandlers = {};\n    }\n    static incorrectRdfDataType(literal) {\n        throw new Error(`Invalid RDF ${literal.datatype.value} value: '${literal.value}'`);\n    }\n    registerHandler(handler, rdfDatatypes, javaScriptDataTypes) {\n        for (const rdfDatatype of rdfDatatypes) {\n            this.supportedRdfDatatypes.push(rdfDatatype);\n            this.fromRdfHandlers[rdfDatatype.value] = handler;\n        }\n        for (const javaScriptDataType of javaScriptDataTypes) {\n            let existingToRdfHandlers = this.toRdfHandlers[javaScriptDataType];\n            if (!existingToRdfHandlers) {\n                this.toRdfHandlers[javaScriptDataType] = existingToRdfHandlers = [];\n            }\n            existingToRdfHandlers.push(handler);\n        }\n    }\n    fromRdf(literal, validate) {\n        const handler = this.fromRdfHandlers[literal.datatype.value];\n        if (handler) {\n            return handler.fromRdf(literal, validate);\n        }\n        else {\n            return literal.value;\n        }\n    }\n    toRdf(value, options) {\n        const handlers = this.toRdfHandlers[typeof value];\n        if (handlers) {\n            for (const handler of handlers) {\n                const ret = handler.toRdf(value, options);\n                if (ret) {\n                    return ret;\n                }\n            }\n        }\n        throw new Error(`Invalid JavaScript value: '${value}'`);\n    }\n    /**\n     * @return {NamedNode[]} An array of all supported RDF datatypes.\n     */\n    getSupportedRdfDatatypes() {\n        return this.supportedRdfDatatypes;\n    }\n    /**\n     * @return {string[]} An array of all supported JavaScript types.\n     */\n    getSupportedJavaScriptPrimitives() {\n        return Object.keys(this.toRdfHandlers);\n    }\n}\nexports.Translator = Translator;\n//# sourceMappingURL=Translator.js.map"]},"metadata":{},"sourceType":"script"}