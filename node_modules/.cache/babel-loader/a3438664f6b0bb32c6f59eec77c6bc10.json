{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nconst graphql_to_sparql_1 = require(\"graphql-to-sparql\");\n\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n\nconst sparqljson_to_tree_1 = require(\"sparqljson-to-tree\");\n/**\n * A GraphQL-LD client.\n *\n * Typical usage:\n * ```\n * const client = new Client({ context, queryEngine });\n * const { data } = await client.query({ query: `{ books { name author { name } } }` });\n * ```\n */\n\n\nclass Client {\n  constructor(args) {\n    this.context = (args.contextParser || new jsonld_context_parser_1.ContextParser()).parse(args.context, {\n      baseIRI: args.baseIRI\n    });\n    this.queryEngine = args.queryEngine;\n    this.graphqlToSparqlConverter = args.graphqlToSparqlConverter || new graphql_to_sparql_1.Converter({\n      dataFactory: args.dataFactory,\n      requireContext: true\n    });\n    this.sparqlJsonToTreeConverter = args.sparqlJsonToTreeConverter || new sparqljson_to_tree_1.Converter({\n      dataFactory: args.dataFactory,\n      materializeRdfJsTerms: true\n    });\n  }\n  /**\n   * Execute a GraphQL-LD query.\n   *\n   * There are three ways of invoking this methods:\n   * 1. with a GraphQL query string and optional variables:\n   *    `client.query({ query: `{...}`, variables: { varName: 123 } })`\n   * 2. with a parsed GraphQL query and optional variables:\n   *    `client.query({ query: gql`{...}`, variables: { varName: 123 } })`\n   * 3. with a SPARQL algebra object and a singularizeVariables object\n   *    `client.query({ sparqlAlgebra, singularizeVariables })`\n   *    This corresponds to the result of {@link Client#graphQlToSparql}.\n   *\n   * @param {QueryArgs} args Query+variables, or SPARQL algebra+singularize variables.\n   * @return {Promise<ExecutionResult>} A promise resolving to a GraphQL result.\n   */\n\n\n  query(args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Convert GraphQL to SPARQL\n      const {\n        sparqlAlgebra,\n        singularizeVariables\n      } = 'query' in args ? yield this.graphQlToSparql({\n        query: args.query,\n        variables: args.variables\n      }) : args; // Execute SPARQL query\n\n      const sparqlJsonResult = yield this.queryEngine.query(sparqlAlgebra, args.queryEngineOptions); // Convert SPARQL response to GraphQL response\n\n      const data = this.sparqlJsonToTreeConverter.sparqlJsonResultsToTree(sparqlJsonResult, {\n        singularizeVariables\n      });\n      return {\n        data\n      };\n    });\n  }\n  /**\n   * Convert a GraphQL query to SPARQL algebra and a singularize variables object.\n   * @param {string | DocumentNode} query\n   * @param {{[p: string]: any}} variables\n   * @return {Promise<IGraphQlToSparqlResult>}\n   */\n\n\n  graphQlToSparql({\n    query,\n    variables\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const singularizeVariables = {};\n      const options = {\n        singularizeVariables,\n        variablesDict: {}\n      };\n      const sparqlAlgebra = yield this.graphqlToSparqlConverter.graphqlToSparqlAlgebra(query, (yield this.context).getContextRaw(), options);\n      return {\n        sparqlAlgebra,\n        singularizeVariables\n      };\n    });\n  }\n\n}\n\nexports.Client = Client;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-ld/lib/Client.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","Client","graphql_to_sparql_1","require","jsonld_context_parser_1","sparqljson_to_tree_1","constructor","args","context","contextParser","ContextParser","parse","baseIRI","queryEngine","graphqlToSparqlConverter","Converter","dataFactory","requireContext","sparqlJsonToTreeConverter","materializeRdfJsTerms","query","sparqlAlgebra","singularizeVariables","graphQlToSparql","variables","sparqlJsonResult","queryEngineOptions","data","sparqlJsonResultsToTree","options","variablesDict","graphqlToSparqlAlgebra","getContextRaw"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = void 0;\nconst graphql_to_sparql_1 = require(\"graphql-to-sparql\");\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst sparqljson_to_tree_1 = require(\"sparqljson-to-tree\");\n/**\n * A GraphQL-LD client.\n *\n * Typical usage:\n * ```\n * const client = new Client({ context, queryEngine });\n * const { data } = await client.query({ query: `{ books { name author { name } } }` });\n * ```\n */\nclass Client {\n    constructor(args) {\n        this.context = (args.contextParser || new jsonld_context_parser_1.ContextParser()).parse(args.context, { baseIRI: args.baseIRI });\n        this.queryEngine = args.queryEngine;\n        this.graphqlToSparqlConverter = args.graphqlToSparqlConverter ||\n            new graphql_to_sparql_1.Converter({ dataFactory: args.dataFactory, requireContext: true });\n        this.sparqlJsonToTreeConverter = args.sparqlJsonToTreeConverter ||\n            new sparqljson_to_tree_1.Converter({ dataFactory: args.dataFactory, materializeRdfJsTerms: true });\n    }\n    /**\n     * Execute a GraphQL-LD query.\n     *\n     * There are three ways of invoking this methods:\n     * 1. with a GraphQL query string and optional variables:\n     *    `client.query({ query: `{...}`, variables: { varName: 123 } })`\n     * 2. with a parsed GraphQL query and optional variables:\n     *    `client.query({ query: gql`{...}`, variables: { varName: 123 } })`\n     * 3. with a SPARQL algebra object and a singularizeVariables object\n     *    `client.query({ sparqlAlgebra, singularizeVariables })`\n     *    This corresponds to the result of {@link Client#graphQlToSparql}.\n     *\n     * @param {QueryArgs} args Query+variables, or SPARQL algebra+singularize variables.\n     * @return {Promise<ExecutionResult>} A promise resolving to a GraphQL result.\n     */\n    query(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Convert GraphQL to SPARQL\n            const { sparqlAlgebra, singularizeVariables } = 'query' in args\n                ? yield this.graphQlToSparql({ query: args.query, variables: args.variables }) : args;\n            // Execute SPARQL query\n            const sparqlJsonResult = yield this.queryEngine.query(sparqlAlgebra, args.queryEngineOptions);\n            // Convert SPARQL response to GraphQL response\n            const data = this.sparqlJsonToTreeConverter.sparqlJsonResultsToTree(sparqlJsonResult, { singularizeVariables });\n            return { data };\n        });\n    }\n    /**\n     * Convert a GraphQL query to SPARQL algebra and a singularize variables object.\n     * @param {string | DocumentNode} query\n     * @param {{[p: string]: any}} variables\n     * @return {Promise<IGraphQlToSparqlResult>}\n     */\n    graphQlToSparql({ query, variables }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const singularizeVariables = {};\n            const options = {\n                singularizeVariables,\n                variablesDict: {},\n            };\n            const sparqlAlgebra = yield this.graphqlToSparqlConverter\n                .graphqlToSparqlAlgebra(query, (yield this.context).getContextRaw(), options);\n            return { sparqlAlgebra, singularizeVariables };\n        });\n    }\n}\nexports.Client = Client;\n//# sourceMappingURL=Client.js.map"]},"metadata":{},"sourceType":"script"}