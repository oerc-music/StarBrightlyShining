{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationPathZeroOrOne = void 0;\n\nconst ActorAbstractPath_1 = require(\"@comunica/actor-abstract-path/lib/ActorAbstractPath\");\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst asynciterator_1 = require(\"asynciterator\");\n\nconst rdf_string_1 = require(\"rdf-string\");\n\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica Path ZeroOrOne Query Operation Actor.\n */\n\n\nclass ActorQueryOperationPathZeroOrOne extends ActorAbstractPath_1.ActorAbstractPath {\n  constructor(args) {\n    super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH);\n  }\n\n  async runOperation(path, context) {\n    const predicate = path.predicate;\n    const sVar = path.subject.termType === 'Variable';\n    const oVar = path.object.termType === 'Variable';\n    const extra = []; // Both subject and object non-variables\n\n    if (!sVar && !oVar && path.subject.equals(path.object)) {\n      return {\n        type: 'bindings',\n        bindingsStream: new asynciterator_1.SingletonIterator(bus_query_operation_1.Bindings({})),\n        variables: [],\n        canContainUndefs: false\n      };\n    }\n\n    if (sVar && oVar) {\n      throw new Error('ZeroOrOne path expressions with 2 variables not supported yet');\n    }\n\n    const distinct = await this.isPathArbitraryLengthDistinct(context, path);\n\n    if (distinct.operation) {\n      return distinct.operation;\n    }\n\n    context = distinct.context;\n\n    if (sVar) {\n      extra.push(bus_query_operation_1.Bindings({\n        [rdf_string_1.termToString(path.subject)]: path.object\n      }));\n    }\n\n    if (oVar) {\n      extra.push(bus_query_operation_1.Bindings({\n        [rdf_string_1.termToString(path.object)]: path.subject\n      }));\n    }\n\n    const single = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      context,\n      operation: ActorAbstractPath_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.path, path.object, path.graph)\n    }));\n    const bindingsStream = single.bindingsStream.prepend(extra);\n    return {\n      type: 'bindings',\n      bindingsStream,\n      variables: single.variables,\n      canContainUndefs: false\n    };\n  }\n\n}\n\nexports.ActorQueryOperationPathZeroOrOne = ActorQueryOperationPathZeroOrOne;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/ActorQueryOperationPathZeroOrOne.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationPathZeroOrOne","ActorAbstractPath_1","require","bus_query_operation_1","asynciterator_1","rdf_string_1","sparqlalgebrajs_1","ActorAbstractPath","constructor","args","Algebra","types","ZERO_OR_ONE_PATH","runOperation","path","context","predicate","sVar","subject","termType","oVar","object","extra","equals","type","bindingsStream","SingletonIterator","Bindings","variables","canContainUndefs","Error","distinct","isPathArbitraryLengthDistinct","operation","push","termToString","single","ActorQueryOperation","getSafeBindings","mediatorQueryOperation","mediate","FACTORY","createPath","graph","prepend"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationPathZeroOrOne = void 0;\nconst ActorAbstractPath_1 = require(\"@comunica/actor-abstract-path/lib/ActorAbstractPath\");\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst asynciterator_1 = require(\"asynciterator\");\nconst rdf_string_1 = require(\"rdf-string\");\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica Path ZeroOrOne Query Operation Actor.\n */\nclass ActorQueryOperationPathZeroOrOne extends ActorAbstractPath_1.ActorAbstractPath {\n    constructor(args) {\n        super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH);\n    }\n    async runOperation(path, context) {\n        const predicate = path.predicate;\n        const sVar = path.subject.termType === 'Variable';\n        const oVar = path.object.termType === 'Variable';\n        const extra = [];\n        // Both subject and object non-variables\n        if (!sVar && !oVar && path.subject.equals(path.object)) {\n            return {\n                type: 'bindings',\n                bindingsStream: new asynciterator_1.SingletonIterator(bus_query_operation_1.Bindings({})),\n                variables: [],\n                canContainUndefs: false,\n            };\n        }\n        if (sVar && oVar) {\n            throw new Error('ZeroOrOne path expressions with 2 variables not supported yet');\n        }\n        const distinct = await this.isPathArbitraryLengthDistinct(context, path);\n        if (distinct.operation) {\n            return distinct.operation;\n        }\n        context = distinct.context;\n        if (sVar) {\n            extra.push(bus_query_operation_1.Bindings({ [rdf_string_1.termToString(path.subject)]: path.object }));\n        }\n        if (oVar) {\n            extra.push(bus_query_operation_1.Bindings({ [rdf_string_1.termToString(path.object)]: path.subject }));\n        }\n        const single = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n            context,\n            operation: ActorAbstractPath_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.path, path.object, path.graph),\n        }));\n        const bindingsStream = single.bindingsStream.prepend(extra);\n        return { type: 'bindings', bindingsStream, variables: single.variables, canContainUndefs: false };\n    }\n}\nexports.ActorQueryOperationPathZeroOrOne = ActorQueryOperationPathZeroOrOne;\n//# sourceMappingURL=ActorQueryOperationPathZeroOrOne.js.map"]},"metadata":{},"sourceType":"script"}