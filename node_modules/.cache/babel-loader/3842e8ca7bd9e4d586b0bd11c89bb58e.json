{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfParseN3 = void 0;\n\nconst bus_rdf_parse_1 = require(\"@comunica/bus-rdf-parse\");\n\nconst n3_1 = require(\"n3\");\n/**\n * An N3 RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse N3-based RDF serializations and announce the presence of them by media type.\n */\n\n\nclass ActorRdfParseN3 extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {\n  constructor(args) {\n    super(args);\n  }\n\n  async runHandle(action, mediaType, context) {\n    action.input.on('error', error => quads.emit('error', error));\n    const quads = action.input.pipe(new n3_1.StreamParser({\n      baseIRI: action.baseIRI\n    }));\n    return {\n      quads,\n      triples: mediaType === 'text/turtle' || mediaType === 'application/n-triples' || mediaType === 'text/n3'\n    };\n  }\n\n}\n\nexports.ActorRdfParseN3 = ActorRdfParseN3;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-parse-n3/lib/ActorRdfParseN3.js"],"names":["Object","defineProperty","exports","value","ActorRdfParseN3","bus_rdf_parse_1","require","n3_1","ActorRdfParseFixedMediaTypes","constructor","args","runHandle","action","mediaType","context","input","on","error","quads","emit","pipe","StreamParser","baseIRI","triples"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,yBAAD,CAA/B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAD,CAApB;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,eAAN,SAA8BC,eAAe,CAACG,4BAA9C,CAA2E;AACvEC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACc,QAATC,SAAS,CAACC,MAAD,EAASC,SAAT,EAAoBC,OAApB,EAA6B;AACxCF,IAAAA,MAAM,CAACG,KAAP,CAAaC,EAAb,CAAgB,OAAhB,EAAyBC,KAAK,IAAIC,KAAK,CAACC,IAAN,CAAW,OAAX,EAAoBF,KAApB,CAAlC;AACA,UAAMC,KAAK,GAAGN,MAAM,CAACG,KAAP,CAAaK,IAAb,CAAkB,IAAIb,IAAI,CAACc,YAAT,CAAsB;AAAEC,MAAAA,OAAO,EAAEV,MAAM,CAACU;AAAlB,KAAtB,CAAlB,CAAd;AACA,WAAO;AACHJ,MAAAA,KADG;AAEHK,MAAAA,OAAO,EAAEV,SAAS,KAAK,aAAd,IACLA,SAAS,KAAK,uBADT,IAELA,SAAS,KAAK;AAJf,KAAP;AAMH;;AAbsE;;AAe3EX,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfParseN3 = void 0;\nconst bus_rdf_parse_1 = require(\"@comunica/bus-rdf-parse\");\nconst n3_1 = require(\"n3\");\n/**\n * An N3 RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse N3-based RDF serializations and announce the presence of them by media type.\n */\nclass ActorRdfParseN3 extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {\n    constructor(args) {\n        super(args);\n    }\n    async runHandle(action, mediaType, context) {\n        action.input.on('error', error => quads.emit('error', error));\n        const quads = action.input.pipe(new n3_1.StreamParser({ baseIRI: action.baseIRI }));\n        return {\n            quads,\n            triples: mediaType === 'text/turtle' ||\n                mediaType === 'application/n-triples' ||\n                mediaType === 'text/n3',\n        };\n    }\n}\nexports.ActorRdfParseN3 = ActorRdfParseN3;\n//# sourceMappingURL=ActorRdfParseN3.js.map"]},"metadata":{},"sourceType":"script"}