{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationUpdateDeleteInsert = void 0;\n\nconst actor_query_operation_construct_1 = require(\"@comunica/actor-query-operation-construct\");\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst asynciterator_1 = require(\"asynciterator\");\n/**\n * A comunica Update DeleteInsert Query Operation Actor.\n */\n\n\nclass ActorQueryOperationUpdateDeleteInsert extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'deleteinsert');\n    this.blankNodeCounter = 0;\n  }\n\n  async testOperation(pattern, context) {\n    bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    // Evaluate the where clause\n    const whereBindings = pattern.where ? bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      operation: pattern.where,\n      context\n    })).bindingsStream : new asynciterator_1.ArrayIterator([bus_query_operation_1.Bindings({})], {\n      autoStart: false\n    }); // Construct triples using the result based on the pattern.\n\n    let quadStreamInsert;\n    let quadStreamDelete;\n\n    if (pattern.insert) {\n      // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n      quadStreamInsert = new actor_query_operation_construct_1.BindingsToQuadsIterator(pattern.insert.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone(), false);\n      this.blankNodeCounter++;\n    }\n\n    if (pattern.delete) {\n      // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n      quadStreamDelete = new actor_query_operation_construct_1.BindingsToQuadsIterator(pattern.delete.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone(), false);\n      this.blankNodeCounter++;\n    } // Evaluate the required modifications\n\n\n    const {\n      updateResult\n    } = await this.mediatorUpdateQuads.mediate({\n      quadStreamInsert,\n      quadStreamDelete,\n      context\n    });\n    return {\n      type: 'update',\n      updateResult\n    };\n  }\n\n}\n\nexports.ActorQueryOperationUpdateDeleteInsert = ActorQueryOperationUpdateDeleteInsert;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/ActorQueryOperationUpdateDeleteInsert.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationUpdateDeleteInsert","actor_query_operation_construct_1","require","bus_query_operation_1","asynciterator_1","ActorQueryOperationTypedMediated","constructor","args","blankNodeCounter","testOperation","pattern","context","ActorQueryOperation","throwOnReadOnly","runOperation","whereBindings","where","getSafeBindings","mediatorQueryOperation","mediate","operation","bindingsStream","ArrayIterator","Bindings","autoStart","quadStreamInsert","quadStreamDelete","insert","BindingsToQuadsIterator","map","localizeQuad","bind","clone","delete","updateResult","mediatorUpdateQuads","type"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qCAAR,GAAgD,KAAK,CAArD;;AACA,MAAMC,iCAAiC,GAAGC,OAAO,CAAC,2CAAD,CAAjD;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,eAAD,CAA/B;AACA;AACA;AACA;;;AACA,MAAMF,qCAAN,SAAoDG,qBAAqB,CAACE,gCAA1E,CAA2G;AACvGC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,cAAZ;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClCR,IAAAA,qBAAqB,CAACS,mBAAtB,CAA0CC,eAA1C,CAA0DF,OAA1D;AACA,WAAO,IAAP;AACH;;AACiB,QAAZG,YAAY,CAACJ,OAAD,EAAUC,OAAV,EAAmB;AACjC;AACA,UAAMI,aAAa,GAAGL,OAAO,CAACM,KAAR,GAClBb,qBAAqB,CAACS,mBAAtB,CAA0CK,eAA1C,CAA0D,MAAM,KAAKC,sBAAL,CAC3DC,OAD2D,CACnD;AAAEC,MAAAA,SAAS,EAAEV,OAAO,CAACM,KAArB;AAA4BL,MAAAA;AAA5B,KADmD,CAAhE,EACqDU,cAFnC,GAGlB,IAAIjB,eAAe,CAACkB,aAApB,CAAkC,CAACnB,qBAAqB,CAACoB,QAAtB,CAA+B,EAA/B,CAAD,CAAlC,EAAwE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAxE,CAHJ,CAFiC,CAMjC;;AACA,QAAIC,gBAAJ;AACA,QAAIC,gBAAJ;;AACA,QAAIhB,OAAO,CAACiB,MAAZ,EAAoB;AAChB;AACAF,MAAAA,gBAAgB,GAAG,IAAIxB,iCAAiC,CAAC2B,uBAAtC,CAA8DlB,OAAO,CAACiB,MAAR,CAAeE,GAAf,CAAmB5B,iCAAiC,CAAC2B,uBAAlC,CAA0DE,YAA1D,CAAuEC,IAAvE,CAA4E,IAA5E,EAAkF,KAAKvB,gBAAvF,CAAnB,CAA9D,EAA4LO,aAAa,CAACiB,KAAd,EAA5L,EAAmN,KAAnN,CAAnB;AACA,WAAKxB,gBAAL;AACH;;AACD,QAAIE,OAAO,CAACuB,MAAZ,EAAoB;AAChB;AACAP,MAAAA,gBAAgB,GAAG,IAAIzB,iCAAiC,CAAC2B,uBAAtC,CAA8DlB,OAAO,CAACuB,MAAR,CAAeJ,GAAf,CAAmB5B,iCAAiC,CAAC2B,uBAAlC,CAA0DE,YAA1D,CAAuEC,IAAvE,CAA4E,IAA5E,EAAkF,KAAKvB,gBAAvF,CAAnB,CAA9D,EAA4LO,aAAa,CAACiB,KAAd,EAA5L,EAAmN,KAAnN,CAAnB;AACA,WAAKxB,gBAAL;AACH,KAlBgC,CAmBjC;;;AACA,UAAM;AAAE0B,MAAAA;AAAF,QAAmB,MAAM,KAAKC,mBAAL,CAAyBhB,OAAzB,CAAiC;AAC5DM,MAAAA,gBAD4D;AAE5DC,MAAAA,gBAF4D;AAG5Df,MAAAA;AAH4D,KAAjC,CAA/B;AAKA,WAAO;AACHyB,MAAAA,IAAI,EAAE,QADH;AAEHF,MAAAA;AAFG,KAAP;AAIH;;AAtCsG;;AAwC3GpC,OAAO,CAACE,qCAAR,GAAgDA,qCAAhD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationUpdateDeleteInsert = void 0;\nconst actor_query_operation_construct_1 = require(\"@comunica/actor-query-operation-construct\");\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst asynciterator_1 = require(\"asynciterator\");\n/**\n * A comunica Update DeleteInsert Query Operation Actor.\n */\nclass ActorQueryOperationUpdateDeleteInsert extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'deleteinsert');\n        this.blankNodeCounter = 0;\n    }\n    async testOperation(pattern, context) {\n        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n        return true;\n    }\n    async runOperation(pattern, context) {\n        // Evaluate the where clause\n        const whereBindings = pattern.where ?\n            bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation\n                .mediate({ operation: pattern.where, context })).bindingsStream :\n            new asynciterator_1.ArrayIterator([bus_query_operation_1.Bindings({})], { autoStart: false });\n        // Construct triples using the result based on the pattern.\n        let quadStreamInsert;\n        let quadStreamDelete;\n        if (pattern.insert) {\n            // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n            quadStreamInsert = new actor_query_operation_construct_1.BindingsToQuadsIterator(pattern.insert.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone(), false);\n            this.blankNodeCounter++;\n        }\n        if (pattern.delete) {\n            // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n            quadStreamDelete = new actor_query_operation_construct_1.BindingsToQuadsIterator(pattern.delete.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone(), false);\n            this.blankNodeCounter++;\n        }\n        // Evaluate the required modifications\n        const { updateResult } = await this.mediatorUpdateQuads.mediate({\n            quadStreamInsert,\n            quadStreamDelete,\n            context,\n        });\n        return {\n            type: 'update',\n            updateResult,\n        };\n    }\n}\nexports.ActorQueryOperationUpdateDeleteInsert = ActorQueryOperationUpdateDeleteInsert;\n//# sourceMappingURL=ActorQueryOperationUpdateDeleteInsert.js.map"]},"metadata":{},"sourceType":"script"}