{"ast":null,"code":"import { useState, useEffect, useDebugValue } from 'react';\nimport useWebId from './useWebId';\nimport useLiveUpdate from './useLiveUpdate';\nimport ExpressionEvaluator from '../ExpressionEvaluator';\nconst value = {\n  result: undefined,\n  pending: true,\n  error: undefined\n};\nconst list = {\n  result: [],\n  pending: true,\n  error: undefined\n};\nconst none = {};\n/**\n * Evaluates the Solid LDflex expression.\n * Returns an array of [result, pending, error].\n */\n\nexport default function useLDflex(expression, listMode = false) {\n  // The user's WebID and recent updates might influence the evaluation\n  const webId = useWebId();\n  const latestUpdate = useLiveUpdate(); // Obtain the latest expression result from the state\n\n  const [{\n    result,\n    pending,\n    error\n  }, update] = useState(listMode ? list : value);\n  useDebugValue(error || result, toString); // Set up the expression evaluator\n\n  useEffect(() => {\n    const evaluator = new ExpressionEvaluator();\n    const query = {\n      result: expression\n    };\n    evaluator.evaluate(!listMode ? query : none, listMode ? query : none, changed => update(current => ({ ...current,\n      ...changed\n    })));\n    return () => evaluator.destroy();\n  }, [expression, latestUpdate, webId && typeof expression === 'string']); // Return the state components\n\n  return [result, pending, error];\n}\nexport function toString(object) {\n  return Array.isArray(object) ? object.map(toString) : `${object}`;\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/react/module/hooks/useLDflex.js"],"names":["useState","useEffect","useDebugValue","useWebId","useLiveUpdate","ExpressionEvaluator","value","result","undefined","pending","error","list","none","useLDflex","expression","listMode","webId","latestUpdate","update","toString","evaluator","query","evaluate","changed","current","destroy","object","Array","isArray","map"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAEC,SADI;AAEZC,EAAAA,OAAO,EAAE,IAFG;AAGZC,EAAAA,KAAK,EAAEF;AAHK,CAAd;AAKA,MAAMG,IAAI,GAAG;AACXJ,EAAAA,MAAM,EAAE,EADG;AAEXE,EAAAA,OAAO,EAAE,IAFE;AAGXC,EAAAA,KAAK,EAAEF;AAHI,CAAb;AAKA,MAAMI,IAAI,GAAG,EAAb;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,UAAnB,EAA+BC,QAAQ,GAAG,KAA1C,EAAiD;AAC9D;AACA,QAAMC,KAAK,GAAGb,QAAQ,EAAtB;AACA,QAAMc,YAAY,GAAGb,aAAa,EAAlC,CAH8D,CAGxB;;AAEtC,QAAM,CAAC;AACLG,IAAAA,MADK;AAELE,IAAAA,OAFK;AAGLC,IAAAA;AAHK,GAAD,EAIHQ,MAJG,IAIOlB,QAAQ,CAACe,QAAQ,GAAGJ,IAAH,GAAUL,KAAnB,CAJrB;AAKAJ,EAAAA,aAAa,CAACQ,KAAK,IAAIH,MAAV,EAAkBY,QAAlB,CAAb,CAV8D,CAUpB;;AAE1ClB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,SAAS,GAAG,IAAIf,mBAAJ,EAAlB;AACA,UAAMgB,KAAK,GAAG;AACZd,MAAAA,MAAM,EAAEO;AADI,KAAd;AAGAM,IAAAA,SAAS,CAACE,QAAV,CAAmB,CAACP,QAAD,GAAYM,KAAZ,GAAoBT,IAAvC,EAA6CG,QAAQ,GAAGM,KAAH,GAAWT,IAAhE,EAAsEW,OAAO,IAAIL,MAAM,CAACM,OAAO,KAAK,EAAE,GAAGA,OAAL;AAClG,SAAGD;AAD+F,KAAL,CAAR,CAAvF;AAGA,WAAO,MAAMH,SAAS,CAACK,OAAV,EAAb;AACD,GATQ,EASN,CAACX,UAAD,EAAaG,YAAb,EAA2BD,KAAK,IAAI,OAAOF,UAAP,KAAsB,QAA1D,CATM,CAAT,CAZ8D,CAqBW;;AAEzE,SAAO,CAACP,MAAD,EAASE,OAAT,EAAkBC,KAAlB,CAAP;AACD;AACD,OAAO,SAASS,QAAT,CAAkBO,MAAlB,EAA0B;AAC/B,SAAOC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAM,CAACG,GAAP,CAAWV,QAAX,CAAxB,GAAgD,GAAEO,MAAO,EAAhE;AACD","sourcesContent":["import { useState, useEffect, useDebugValue } from 'react';\nimport useWebId from './useWebId';\nimport useLiveUpdate from './useLiveUpdate';\nimport ExpressionEvaluator from '../ExpressionEvaluator';\nconst value = {\n  result: undefined,\n  pending: true,\n  error: undefined\n};\nconst list = {\n  result: [],\n  pending: true,\n  error: undefined\n};\nconst none = {};\n/**\n * Evaluates the Solid LDflex expression.\n * Returns an array of [result, pending, error].\n */\n\nexport default function useLDflex(expression, listMode = false) {\n  // The user's WebID and recent updates might influence the evaluation\n  const webId = useWebId();\n  const latestUpdate = useLiveUpdate(); // Obtain the latest expression result from the state\n\n  const [{\n    result,\n    pending,\n    error\n  }, update] = useState(listMode ? list : value);\n  useDebugValue(error || result, toString); // Set up the expression evaluator\n\n  useEffect(() => {\n    const evaluator = new ExpressionEvaluator();\n    const query = {\n      result: expression\n    };\n    evaluator.evaluate(!listMode ? query : none, listMode ? query : none, changed => update(current => ({ ...current,\n      ...changed\n    })));\n    return () => evaluator.destroy();\n  }, [expression, latestUpdate, webId && typeof expression === 'string']); // Return the state components\n\n  return [result, pending, error];\n}\nexport function toString(object) {\n  return Array.isArray(object) ? object.map(toString) : `${object}`;\n}"]},"metadata":{},"sourceType":"module"}