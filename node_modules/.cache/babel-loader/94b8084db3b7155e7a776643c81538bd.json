{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQlQueryEngine = void 0;\n\nconst stringifyStream = require(\"stream-to-string\");\n/**\n * A comunica-based GraphQL-LD query engine.\n */\n\n\nclass GraphQlQueryEngine {\n  constructor(comunicaEngine) {\n    this.comunicaEngine = comunicaEngine;\n  }\n\n  async query(query, options) {\n    const {\n      data\n    } = await this.comunicaEngine.resultToString(await this.comunicaEngine.query(query, options), 'application/sparql-results+json');\n    return JSON.parse(await stringifyStream(data));\n  }\n\n}\n\nexports.GraphQlQueryEngine = GraphQlQueryEngine;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-metadata-extract/lib/GraphQlQueryEngine.js"],"names":["Object","defineProperty","exports","value","GraphQlQueryEngine","stringifyStream","require","constructor","comunicaEngine","query","options","data","resultToString","JSON","parse"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,kBAAD,CAA/B;AACA;AACA;AACA;;;AACA,MAAMF,kBAAN,CAAyB;AACrBG,EAAAA,WAAW,CAACC,cAAD,EAAiB;AACxB,SAAKA,cAAL,GAAsBA,cAAtB;AACH;;AACU,QAALC,KAAK,CAACA,KAAD,EAAQC,OAAR,EAAiB;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAM,KAAKH,cAAL,CAAoBI,cAApB,CAAmC,MAAM,KAAKJ,cAAL,CAAoBC,KAApB,CAA0BA,KAA1B,EAAiCC,OAAjC,CAAzC,EAAoF,iCAApF,CAAvB;AACA,WAAOG,IAAI,CAACC,KAAL,CAAW,MAAMT,eAAe,CAACM,IAAD,CAAhC,CAAP;AACH;;AAPoB;;AASzBT,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQlQueryEngine = void 0;\nconst stringifyStream = require(\"stream-to-string\");\n/**\n * A comunica-based GraphQL-LD query engine.\n */\nclass GraphQlQueryEngine {\n    constructor(comunicaEngine) {\n        this.comunicaEngine = comunicaEngine;\n    }\n    async query(query, options) {\n        const { data } = await this.comunicaEngine.resultToString(await this.comunicaEngine.query(query, options), 'application/sparql-results+json');\n        return JSON.parse(await stringifyStream(data));\n    }\n}\nexports.GraphQlQueryEngine = GraphQlQueryEngine;\n//# sourceMappingURL=GraphQlQueryEngine.js.map"]},"metadata":{},"sourceType":"script"}