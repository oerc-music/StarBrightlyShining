{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationExtend = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst rdf_string_1 = require(\"rdf-string\");\n\nconst sparqlee_1 = require(\"sparqlee\");\n/**\n * A comunica Extend Query Operation Actor.\n *\n * See https://www.w3.org/TR/sparql11-query/#sparqlAlgebra;\n */\n\n\nclass ActorQueryOperationExtend extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'extend');\n  }\n\n  async testOperation(pattern, context) {\n    // Will throw error for unsupported opperations\n    const _ = Boolean(new sparqlee_1.AsyncEvaluator(pattern.expression));\n\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    const {\n      expression,\n      input,\n      variable\n    } = pattern;\n    const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      operation: input,\n      context\n    }));\n    const extendKey = rdf_string_1.termToString(variable);\n    const config = Object.assign({}, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));\n    const evaluator = new sparqlee_1.AsyncEvaluator(expression, config); // Transform the stream by extending each Bindings with the expression result\n\n    const transform = async (bindings, next, push) => {\n      try {\n        const result = await evaluator.evaluate(bindings); // Extend operation is undefined when the key already exists\n        // We just override it here.\n\n        const extended = bindings.set(extendKey, result);\n        push(extended);\n      } catch (error) {\n        if (sparqlee_1.isExpressionError(error)) {\n          // Errors silently don't actually extend according to the spec\n          push(bindings); // But let's warn anyway\n\n          this.logWarn(context, `Expression error for extend operation with bindings '${JSON.stringify(bindings)}'`);\n        } else {\n          bindingsStream.emit('error', error);\n        }\n      }\n\n      next();\n    };\n\n    const variables = [...output.variables, extendKey];\n    const bindingsStream = output.bindingsStream.transform({\n      transform\n    });\n    const {\n      metadata\n    } = output;\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata,\n      variables,\n      canContainUndefs: output.canContainUndefs\n    };\n  }\n\n}\n\nexports.ActorQueryOperationExtend = ActorQueryOperationExtend;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-extend/lib/ActorQueryOperationExtend.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationExtend","bus_query_operation_1","require","rdf_string_1","sparqlee_1","ActorQueryOperationTypedMediated","constructor","args","testOperation","pattern","context","_","Boolean","AsyncEvaluator","expression","runOperation","input","variable","output","ActorQueryOperation","getSafeBindings","mediatorQueryOperation","mediate","operation","extendKey","termToString","config","assign","getAsyncExpressionContext","evaluator","transform","bindings","next","push","result","evaluate","extended","set","error","isExpressionError","logWarn","JSON","stringify","bindingsStream","emit","variables","metadata","type","canContainUndefs"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,YAAD,CAA5B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,UAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,yBAAN,SAAwCC,qBAAqB,CAACI,gCAA9D,CAA+F;AAC3FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,QAAZ;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClC;AACA,UAAMC,CAAC,GAAGC,OAAO,CAAC,IAAIR,UAAU,CAACS,cAAf,CAA8BJ,OAAO,CAACK,UAAtC,CAAD,CAAjB;;AACA,WAAO,IAAP;AACH;;AACiB,QAAZC,YAAY,CAACN,OAAD,EAAUC,OAAV,EAAmB;AACjC,UAAM;AAAEI,MAAAA,UAAF;AAAcE,MAAAA,KAAd;AAAqBC,MAAAA;AAArB,QAAkCR,OAAxC;AACA,UAAMS,MAAM,GAAGjB,qBAAqB,CAACkB,mBAAtB,CAA0CC,eAA1C,CAA0D,MAAM,KAAKC,sBAAL,CAA4BC,OAA5B,CAAoC;AAAEC,MAAAA,SAAS,EAAEP,KAAb;AAAoBN,MAAAA;AAApB,KAApC,CAAhE,CAAf;AACA,UAAMc,SAAS,GAAGrB,YAAY,CAACsB,YAAb,CAA0BR,QAA1B,CAAlB;AACA,UAAMS,MAAM,GAAG9B,MAAM,CAAC+B,MAAP,CAAc,EAAd,EAAkB1B,qBAAqB,CAACkB,mBAAtB,CAA0CS,yBAA1C,CAAoElB,OAApE,EAA6E,KAAKW,sBAAlF,CAAlB,CAAf;AACA,UAAMQ,SAAS,GAAG,IAAIzB,UAAU,CAACS,cAAf,CAA8BC,UAA9B,EAA0CY,MAA1C,CAAlB,CALiC,CAMjC;;AACA,UAAMI,SAAS,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,EAAuBC,IAAvB,KAAgC;AAC9C,UAAI;AACA,cAAMC,MAAM,GAAG,MAAML,SAAS,CAACM,QAAV,CAAmBJ,QAAnB,CAArB,CADA,CAEA;AACA;;AACA,cAAMK,QAAQ,GAAGL,QAAQ,CAACM,GAAT,CAAab,SAAb,EAAwBU,MAAxB,CAAjB;AACAD,QAAAA,IAAI,CAACG,QAAD,CAAJ;AACH,OAND,CAOA,OAAOE,KAAP,EAAc;AACV,YAAIlC,UAAU,CAACmC,iBAAX,CAA6BD,KAA7B,CAAJ,EAAyC;AACrC;AACAL,UAAAA,IAAI,CAACF,QAAD,CAAJ,CAFqC,CAGrC;;AACA,eAAKS,OAAL,CAAa9B,OAAb,EAAuB,wDAAuD+B,IAAI,CAACC,SAAL,CAAeX,QAAf,CAAyB,GAAvG;AACH,SALD,MAMK;AACDY,UAAAA,cAAc,CAACC,IAAf,CAAoB,OAApB,EAA6BN,KAA7B;AACH;AACJ;;AACDN,MAAAA,IAAI;AACP,KApBD;;AAqBA,UAAMa,SAAS,GAAG,CAAC,GAAG3B,MAAM,CAAC2B,SAAX,EAAsBrB,SAAtB,CAAlB;AACA,UAAMmB,cAAc,GAAGzB,MAAM,CAACyB,cAAP,CAAsBb,SAAtB,CAAgC;AAAEA,MAAAA;AAAF,KAAhC,CAAvB;AACA,UAAM;AAAEgB,MAAAA;AAAF,QAAe5B,MAArB;AACA,WAAO;AAAE6B,MAAAA,IAAI,EAAE,UAAR;AAAoBJ,MAAAA,cAApB;AAAoCG,MAAAA,QAApC;AAA8CD,MAAAA,SAA9C;AAAyDG,MAAAA,gBAAgB,EAAE9B,MAAM,CAAC8B;AAAlF,KAAP;AACH;;AAzC0F;;AA2C/FlD,OAAO,CAACE,yBAAR,GAAoCA,yBAApC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationExtend = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst rdf_string_1 = require(\"rdf-string\");\nconst sparqlee_1 = require(\"sparqlee\");\n/**\n * A comunica Extend Query Operation Actor.\n *\n * See https://www.w3.org/TR/sparql11-query/#sparqlAlgebra;\n */\nclass ActorQueryOperationExtend extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'extend');\n    }\n    async testOperation(pattern, context) {\n        // Will throw error for unsupported opperations\n        const _ = Boolean(new sparqlee_1.AsyncEvaluator(pattern.expression));\n        return true;\n    }\n    async runOperation(pattern, context) {\n        const { expression, input, variable } = pattern;\n        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: input, context }));\n        const extendKey = rdf_string_1.termToString(variable);\n        const config = Object.assign({}, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));\n        const evaluator = new sparqlee_1.AsyncEvaluator(expression, config);\n        // Transform the stream by extending each Bindings with the expression result\n        const transform = async (bindings, next, push) => {\n            try {\n                const result = await evaluator.evaluate(bindings);\n                // Extend operation is undefined when the key already exists\n                // We just override it here.\n                const extended = bindings.set(extendKey, result);\n                push(extended);\n            }\n            catch (error) {\n                if (sparqlee_1.isExpressionError(error)) {\n                    // Errors silently don't actually extend according to the spec\n                    push(bindings);\n                    // But let's warn anyway\n                    this.logWarn(context, `Expression error for extend operation with bindings '${JSON.stringify(bindings)}'`);\n                }\n                else {\n                    bindingsStream.emit('error', error);\n                }\n            }\n            next();\n        };\n        const variables = [...output.variables, extendKey];\n        const bindingsStream = output.bindingsStream.transform({ transform });\n        const { metadata } = output;\n        return { type: 'bindings', bindingsStream, metadata, variables, canContainUndefs: output.canContainUndefs };\n    }\n}\nexports.ActorQueryOperationExtend = ActorQueryOperationExtend;\n//# sourceMappingURL=ActorQueryOperationExtend.js.map"]},"metadata":{},"sourceType":"script"}