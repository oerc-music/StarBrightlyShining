{"ast":null,"code":"'use strict';\n\nconst nodeStream = require('stream');\n\nconst isNodeStream = require('is-stream');\n\nconst conversions = require('./lib/conversions');\n\nmodule.exports = require('web-streams-ponyfill');\n/**\n * Convert Web streams to Node streams. Until WritableStream / TransformStream\n * is finalized, only ReadableStream is supported.\n *\n * @param {ReadableStream} stream, a web stream.\n * @return {stream.Readable}, a Node Readable stream.\n */\n\nmodule.exports.toNodeReadable = function (stream) {\n  if (stream instanceof module.exports.ReadableStream || stream && typeof stream.getReader === 'function') {\n    return conversions.readable.webToNode(stream);\n  } else {\n    throw new TypeError(\"Expected a ReadableStream.\");\n  }\n};\n/**\n * Convert Node Readable streams, an Array, Buffer or String to a Web\n * ReadableStream.\n *\n * @param {Readable|Array|Buffer|String} stream, a Node Readable stream,\n * Array, Buffer or String.\n * @return {ReadableStream}, a web ReadableStream.\n */\n\n\nmodule.exports.toWebReadableStream = function (stream) {\n  if (isNodeStream(stream) && stream.readable) {\n    return conversions.readable.nodeToWeb(stream);\n  } else if (Array.isArray(stream)) {\n    return conversions.readable.arrayToWeb(stream);\n  } else if (Buffer.isBuffer(stream) || typeof stream === 'string') {\n    return conversions.readable.arrayToWeb([stream]);\n  } else {\n    throw new TypeError(\"Expected a Node streams.Readable, an Array, Buffer or String.\");\n  }\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/web-streams-node/index.js"],"names":["nodeStream","require","isNodeStream","conversions","module","exports","toNodeReadable","stream","ReadableStream","getReader","readable","webToNode","TypeError","toWebReadableStream","nodeToWeb","Array","isArray","arrayToWeb","Buffer","isBuffer"],"mappings":"AAAA;;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,WAAD,CAA5B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,mBAAD,CAA3B;;AAEAG,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CAAC,sBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,MAAM,CAACC,OAAP,CAAeC,cAAf,GAAgC,UAASC,MAAT,EAAiB;AAC7C,MAAIA,MAAM,YAAYH,MAAM,CAACC,OAAP,CAAeG,cAAjC,IACGD,MAAM,IAAI,OAAOA,MAAM,CAACE,SAAd,KAA4B,UAD7C,EACyD;AACrD,WAAON,WAAW,CAACO,QAAZ,CAAqBC,SAArB,CAA+BJ,MAA/B,CAAP;AACH,GAHD,MAGO;AACH,UAAM,IAAIK,SAAJ,CAAc,4BAAd,CAAN;AACH;AACJ,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,MAAM,CAACC,OAAP,CAAeQ,mBAAf,GAAqC,UAASN,MAAT,EAAiB;AAClD,MAAIL,YAAY,CAACK,MAAD,CAAZ,IAAwBA,MAAM,CAACG,QAAnC,EAA6C;AACzC,WAAOP,WAAW,CAACO,QAAZ,CAAqBI,SAArB,CAA+BP,MAA/B,CAAP;AACH,GAFD,MAEO,IAAIQ,KAAK,CAACC,OAAN,CAAcT,MAAd,CAAJ,EAA2B;AAC9B,WAAOJ,WAAW,CAACO,QAAZ,CAAqBO,UAArB,CAAgCV,MAAhC,CAAP;AACH,GAFM,MAEA,IAAIW,MAAM,CAACC,QAAP,CAAgBZ,MAAhB,KAA2B,OAAOA,MAAP,KAAkB,QAAjD,EAA2D;AAC9D,WAAOJ,WAAW,CAACO,QAAZ,CAAqBO,UAArB,CAAgC,CAACV,MAAD,CAAhC,CAAP;AACH,GAFM,MAEA;AACH,UAAM,IAAIK,SAAJ,CAAc,+DAAd,CAAN;AACH;AACJ,CAVD","sourcesContent":["'use strict';\nconst nodeStream = require('stream');\nconst isNodeStream = require('is-stream');\nconst conversions = require('./lib/conversions');\n\nmodule.exports = require('web-streams-ponyfill');\n\n/**\n * Convert Web streams to Node streams. Until WritableStream / TransformStream\n * is finalized, only ReadableStream is supported.\n *\n * @param {ReadableStream} stream, a web stream.\n * @return {stream.Readable}, a Node Readable stream.\n */\nmodule.exports.toNodeReadable = function(stream) {\n    if (stream instanceof module.exports.ReadableStream\n        || stream && typeof stream.getReader === 'function') {\n        return conversions.readable.webToNode(stream);\n    } else {\n        throw new TypeError(\"Expected a ReadableStream.\");\n    }\n};\n\n/**\n * Convert Node Readable streams, an Array, Buffer or String to a Web\n * ReadableStream.\n *\n * @param {Readable|Array|Buffer|String} stream, a Node Readable stream,\n * Array, Buffer or String.\n * @return {ReadableStream}, a web ReadableStream.\n */\nmodule.exports.toWebReadableStream = function(stream) {\n    if (isNodeStream(stream) && stream.readable) {\n        return conversions.readable.nodeToWeb(stream);\n    } else if (Array.isArray(stream)) {\n        return conversions.readable.arrayToWeb(stream);\n    } else if (Buffer.isBuffer(stream) || typeof stream === 'string') {\n        return conversions.readable.arrayToWeb([stream]);\n    } else {\n        throw new TypeError(\"Expected a Node streams.Readable, an Array, Buffer or String.\");\n    }\n};\n"]},"metadata":{},"sourceType":"script"}