{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationReducedHash = void 0;\n\nconst actor_abstract_bindings_hash_1 = require(\"@comunica/actor-abstract-bindings-hash\");\n\nconst LRU = require(\"lru-cache\");\n/**\n * A comunica Reduced Hash Query Operation Actor.\n */\n\n\nclass ActorQueryOperationReducedHash extends actor_abstract_bindings_hash_1.AbstractBindingsHash {\n  constructor(args) {\n    super(args, 'reduced');\n  }\n  /**\n   * Create a new distinct filter function for the given hash algorithm and digest algorithm.\n   * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n   * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n   */\n\n\n  newHashFilter() {\n    const hashes = new LRU({\n      max: this.cacheSize\n    });\n    return bindings => {\n      const hash = actor_abstract_bindings_hash_1.AbstractFilterHash.hash(bindings);\n      return !hashes.has(hash) && hashes.set(hash, true);\n    };\n  }\n\n}\n\nexports.ActorQueryOperationReducedHash = ActorQueryOperationReducedHash;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-reduced-hash/lib/ActorQueryOperationReducedHash.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationReducedHash","actor_abstract_bindings_hash_1","require","LRU","AbstractBindingsHash","constructor","args","newHashFilter","hashes","max","cacheSize","bindings","hash","AbstractFilterHash","has","set"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,8BAAR,GAAyC,KAAK,CAA9C;;AACA,MAAMC,8BAA8B,GAAGC,OAAO,CAAC,wCAAD,CAA9C;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;AACA;AACA;AACA;;;AACA,MAAMF,8BAAN,SAA6CC,8BAA8B,CAACG,oBAA5E,CAAiG;AAC7FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,aAAa,GAAG;AACZ,UAAMC,MAAM,GAAG,IAAIL,GAAJ,CAAQ;AAAEM,MAAAA,GAAG,EAAE,KAAKC;AAAZ,KAAR,CAAf;AACA,WAAQC,QAAD,IAAc;AACjB,YAAMC,IAAI,GAAGX,8BAA8B,CAACY,kBAA/B,CAAkDD,IAAlD,CAAuDD,QAAvD,CAAb;AACA,aAAO,CAACH,MAAM,CAACM,GAAP,CAAWF,IAAX,CAAD,IAAqBJ,MAAM,CAACO,GAAP,CAAWH,IAAX,EAAiB,IAAjB,CAA5B;AACH,KAHD;AAIH;;AAf4F;;AAiBjGd,OAAO,CAACE,8BAAR,GAAyCA,8BAAzC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationReducedHash = void 0;\nconst actor_abstract_bindings_hash_1 = require(\"@comunica/actor-abstract-bindings-hash\");\nconst LRU = require(\"lru-cache\");\n/**\n * A comunica Reduced Hash Query Operation Actor.\n */\nclass ActorQueryOperationReducedHash extends actor_abstract_bindings_hash_1.AbstractBindingsHash {\n    constructor(args) {\n        super(args, 'reduced');\n    }\n    /**\n     * Create a new distinct filter function for the given hash algorithm and digest algorithm.\n     * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n     * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n     */\n    newHashFilter() {\n        const hashes = new LRU({ max: this.cacheSize });\n        return (bindings) => {\n            const hash = actor_abstract_bindings_hash_1.AbstractFilterHash.hash(bindings);\n            return !hashes.has(hash) && hashes.set(hash, true);\n        };\n    }\n}\nexports.ActorQueryOperationReducedHash = ActorQueryOperationReducedHash;\n//# sourceMappingURL=ActorQueryOperationReducedHash.js.map"]},"metadata":{},"sourceType":"script"}