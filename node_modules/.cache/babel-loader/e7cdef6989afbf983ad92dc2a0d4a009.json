{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationDistinctHash = void 0;\n\nconst actor_abstract_bindings_hash_1 = require(\"@comunica/actor-abstract-bindings-hash\");\n/**\n * A comunica Distinct Hash Query Operation Actor.\n */\n\n\nclass ActorQueryOperationDistinctHash extends actor_abstract_bindings_hash_1.AbstractBindingsHash {\n  constructor(args) {\n    super(args, 'distinct');\n  }\n  /**\n     * Create a new distinct filter function for the given hash algorithm and digest algorithm.\n     * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n     * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n     */\n\n\n  newHashFilter() {\n    const hashes = {};\n    return bindings => {\n      const hash = actor_abstract_bindings_hash_1.AbstractFilterHash.hash(bindings); // eslint-disable-next-line no-return-assign\n\n      return !(hash in hashes) && (hashes[hash] = true);\n    };\n  }\n\n}\n\nexports.ActorQueryOperationDistinctHash = ActorQueryOperationDistinctHash;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-distinct-hash/lib/ActorQueryOperationDistinctHash.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationDistinctHash","actor_abstract_bindings_hash_1","require","AbstractBindingsHash","constructor","args","newHashFilter","hashes","bindings","hash","AbstractFilterHash"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,+BAAR,GAA0C,KAAK,CAA/C;;AACA,MAAMC,8BAA8B,GAAGC,OAAO,CAAC,wCAAD,CAA9C;AACA;AACA;AACA;;;AACA,MAAMF,+BAAN,SAA8CC,8BAA8B,CAACE,oBAA7E,CAAkG;AAC9FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,UAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,aAAa,GAAG;AACZ,UAAMC,MAAM,GAAG,EAAf;AACA,WAAQC,QAAD,IAAc;AACjB,YAAMC,IAAI,GAAGR,8BAA8B,CAACS,kBAA/B,CAAkDD,IAAlD,CAAuDD,QAAvD,CAAb,CADiB,CAEjB;;AACA,aAAO,EAAEC,IAAI,IAAIF,MAAV,MAAsBA,MAAM,CAACE,IAAD,CAAN,GAAe,IAArC,CAAP;AACH,KAJD;AAKH;;AAhB6F;;AAkBlGX,OAAO,CAACE,+BAAR,GAA0CA,+BAA1C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationDistinctHash = void 0;\nconst actor_abstract_bindings_hash_1 = require(\"@comunica/actor-abstract-bindings-hash\");\n/**\n * A comunica Distinct Hash Query Operation Actor.\n */\nclass ActorQueryOperationDistinctHash extends actor_abstract_bindings_hash_1.AbstractBindingsHash {\n    constructor(args) {\n        super(args, 'distinct');\n    }\n    /**\n       * Create a new distinct filter function for the given hash algorithm and digest algorithm.\n       * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n       * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n       */\n    newHashFilter() {\n        const hashes = {};\n        return (bindings) => {\n            const hash = actor_abstract_bindings_hash_1.AbstractFilterHash.hash(bindings);\n            // eslint-disable-next-line no-return-assign\n            return !(hash in hashes) && (hashes[hash] = true);\n        };\n    }\n}\nexports.ActorQueryOperationDistinctHash = ActorQueryOperationDistinctHash;\n//# sourceMappingURL=ActorQueryOperationDistinctHash.js.map"]},"metadata":{},"sourceType":"script"}