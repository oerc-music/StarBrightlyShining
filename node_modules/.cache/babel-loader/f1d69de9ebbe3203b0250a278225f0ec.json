{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfParseHtmlRdfa = void 0;\n\nconst bus_rdf_parse_html_1 = require(\"@comunica/bus-rdf-parse-html\");\n\nconst rdfa_streaming_parser_1 = require(\"rdfa-streaming-parser\");\n/**\n * A comunica RDFa RDF Parse Html Actor.\n */\n\n\nclass ActorRdfParseHtmlRdfa extends bus_rdf_parse_html_1.ActorRdfParseHtml {\n  constructor(args) {\n    super(args);\n  }\n\n  async test(action) {\n    return true;\n  }\n\n  async run(action) {\n    var _a;\n\n    const mediaType = action.headers ? action.headers.get('content-type') : null;\n    const language = (_a = action.headers && action.headers.get('content-language')) !== null && _a !== void 0 ? _a : undefined;\n    const profile = mediaType && mediaType.includes('xml') ? 'xhtml' : 'html';\n    const htmlParseListener = new rdfa_streaming_parser_1.RdfaParser({\n      baseIRI: action.baseIRI,\n      profile,\n      language\n    });\n    htmlParseListener.on('error', action.error);\n    htmlParseListener.on('data', action.emit);\n    const onTagEndOld = htmlParseListener.onEnd;\n\n    htmlParseListener.onEnd = () => {\n      onTagEndOld.call(htmlParseListener);\n      action.end();\n    };\n\n    return {\n      htmlParseListener\n    };\n  }\n\n}\n\nexports.ActorRdfParseHtmlRdfa = ActorRdfParseHtmlRdfa;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-parse-html-rdfa/lib/ActorRdfParseHtmlRdfa.js"],"names":["Object","defineProperty","exports","value","ActorRdfParseHtmlRdfa","bus_rdf_parse_html_1","require","rdfa_streaming_parser_1","ActorRdfParseHtml","constructor","args","test","action","run","_a","mediaType","headers","get","language","undefined","profile","includes","htmlParseListener","RdfaParser","baseIRI","on","error","emit","onTagEndOld","onEnd","call","end"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC;;AACA,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,8BAAD,CAApC;;AACA,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,uBAAD,CAAvC;AACA;AACA;AACA;;;AACA,MAAMF,qBAAN,SAAoCC,oBAAoB,CAACG,iBAAzD,CAA2E;AACvEC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACD,MAAD,EAAS;AACd,QAAIE,EAAJ;;AACA,UAAMC,SAAS,GAAGH,MAAM,CAACI,OAAP,GAAiBJ,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAmB,cAAnB,CAAjB,GAAsD,IAAxE;AACA,UAAMC,QAAQ,GAAG,CAACJ,EAAE,GAAIF,MAAM,CAACI,OAAP,IAAkBJ,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAmB,kBAAnB,CAAzB,MAAsE,IAAtE,IAA8EH,EAAE,KAAK,KAAK,CAA1F,GAA8FA,EAA9F,GAAmGK,SAApH;AACA,UAAMC,OAAO,GAAGL,SAAS,IAAIA,SAAS,CAACM,QAAV,CAAmB,KAAnB,CAAb,GAAyC,OAAzC,GAAmD,MAAnE;AACA,UAAMC,iBAAiB,GAAG,IAAIf,uBAAuB,CAACgB,UAA5B,CAAuC;AAAEC,MAAAA,OAAO,EAAEZ,MAAM,CAACY,OAAlB;AAA2BJ,MAAAA,OAA3B;AAAoCF,MAAAA;AAApC,KAAvC,CAA1B;AACAI,IAAAA,iBAAiB,CAACG,EAAlB,CAAqB,OAArB,EAA8Bb,MAAM,CAACc,KAArC;AACAJ,IAAAA,iBAAiB,CAACG,EAAlB,CAAqB,MAArB,EAA6Bb,MAAM,CAACe,IAApC;AACA,UAAMC,WAAW,GAAGN,iBAAiB,CAACO,KAAtC;;AACAP,IAAAA,iBAAiB,CAACO,KAAlB,GAA0B,MAAM;AAC5BD,MAAAA,WAAW,CAACE,IAAZ,CAAiBR,iBAAjB;AACAV,MAAAA,MAAM,CAACmB,GAAP;AACH,KAHD;;AAIA,WAAO;AAAET,MAAAA;AAAF,KAAP;AACH;;AArBsE;;AAuB3EpB,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfParseHtmlRdfa = void 0;\nconst bus_rdf_parse_html_1 = require(\"@comunica/bus-rdf-parse-html\");\nconst rdfa_streaming_parser_1 = require(\"rdfa-streaming-parser\");\n/**\n * A comunica RDFa RDF Parse Html Actor.\n */\nclass ActorRdfParseHtmlRdfa extends bus_rdf_parse_html_1.ActorRdfParseHtml {\n    constructor(args) {\n        super(args);\n    }\n    async test(action) {\n        return true;\n    }\n    async run(action) {\n        var _a;\n        const mediaType = action.headers ? action.headers.get('content-type') : null;\n        const language = (_a = (action.headers && action.headers.get('content-language'))) !== null && _a !== void 0 ? _a : undefined;\n        const profile = mediaType && mediaType.includes('xml') ? 'xhtml' : 'html';\n        const htmlParseListener = new rdfa_streaming_parser_1.RdfaParser({ baseIRI: action.baseIRI, profile, language });\n        htmlParseListener.on('error', action.error);\n        htmlParseListener.on('data', action.emit);\n        const onTagEndOld = htmlParseListener.onEnd;\n        htmlParseListener.onEnd = () => {\n            onTagEndOld.call(htmlParseListener);\n            action.end();\n        };\n        return { htmlParseListener };\n    }\n}\nexports.ActorRdfParseHtmlRdfa = ActorRdfParseHtmlRdfa;\n//# sourceMappingURL=ActorRdfParseHtmlRdfa.js.map"]},"metadata":{},"sourceType":"script"}