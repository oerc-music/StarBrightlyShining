{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationAsk = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n/**\n * A comunica Ask Query Operation Actor.\n */\n\n\nclass ActorQueryOperationAsk extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'ask');\n  }\n\n  async testOperation(pattern, context) {\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    // Call other query operations like this:\n    const output = await this.mediatorQueryOperation.mediate({\n      operation: pattern.input,\n      context\n    });\n    const bindings = bus_query_operation_1.ActorQueryOperation.getSafeBindings(output);\n    const booleanResult = new Promise((resolve, reject) => {\n      // Resolve to true if we find one element, and close immediately\n      bindings.bindingsStream.once('data', () => {\n        resolve(true);\n        bindings.bindingsStream.close();\n      }); // If we reach the end of the stream without finding anything, resolve to false\n\n      bindings.bindingsStream.on('end', () => resolve(false)); // Reject if an error occurs in the stream\n\n      bindings.bindingsStream.on('error', reject);\n    });\n    return {\n      type: 'boolean',\n      booleanResult\n    };\n  }\n\n}\n\nexports.ActorQueryOperationAsk = ActorQueryOperationAsk;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-ask/lib/ActorQueryOperationAsk.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationAsk","bus_query_operation_1","require","ActorQueryOperationTypedMediated","constructor","args","testOperation","pattern","context","runOperation","output","mediatorQueryOperation","mediate","operation","input","bindings","ActorQueryOperation","getSafeBindings","booleanResult","Promise","resolve","reject","bindingsStream","once","close","on","type"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;AACA;AACA;AACA;;;AACA,MAAMF,sBAAN,SAAqCC,qBAAqB,CAACE,gCAA3D,CAA4F;AACxFC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,KAAZ;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClC,WAAO,IAAP;AACH;;AACiB,QAAZC,YAAY,CAACF,OAAD,EAAUC,OAAV,EAAmB;AACjC;AACA,UAAME,MAAM,GAAG,MAAM,KAAKC,sBAAL,CAA4BC,OAA5B,CAAoC;AAAEC,MAAAA,SAAS,EAAEN,OAAO,CAACO,KAArB;AAA4BN,MAAAA;AAA5B,KAApC,CAArB;AACA,UAAMO,QAAQ,GAAGd,qBAAqB,CAACe,mBAAtB,CAA0CC,eAA1C,CAA0DP,MAA1D,CAAjB;AACA,UAAMQ,aAAa,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnD;AACAN,MAAAA,QAAQ,CAACO,cAAT,CAAwBC,IAAxB,CAA6B,MAA7B,EAAqC,MAAM;AACvCH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAL,QAAAA,QAAQ,CAACO,cAAT,CAAwBE,KAAxB;AACH,OAHD,EAFmD,CAMnD;;AACAT,MAAAA,QAAQ,CAACO,cAAT,CAAwBG,EAAxB,CAA2B,KAA3B,EAAkC,MAAML,OAAO,CAAC,KAAD,CAA/C,EAPmD,CAQnD;;AACAL,MAAAA,QAAQ,CAACO,cAAT,CAAwBG,EAAxB,CAA2B,OAA3B,EAAoCJ,MAApC;AACH,KAVqB,CAAtB;AAWA,WAAO;AAAEK,MAAAA,IAAI,EAAE,SAAR;AAAmBR,MAAAA;AAAnB,KAAP;AACH;;AAvBuF;;AAyB5FpB,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationAsk = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n/**\n * A comunica Ask Query Operation Actor.\n */\nclass ActorQueryOperationAsk extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'ask');\n    }\n    async testOperation(pattern, context) {\n        return true;\n    }\n    async runOperation(pattern, context) {\n        // Call other query operations like this:\n        const output = await this.mediatorQueryOperation.mediate({ operation: pattern.input, context });\n        const bindings = bus_query_operation_1.ActorQueryOperation.getSafeBindings(output);\n        const booleanResult = new Promise((resolve, reject) => {\n            // Resolve to true if we find one element, and close immediately\n            bindings.bindingsStream.once('data', () => {\n                resolve(true);\n                bindings.bindingsStream.close();\n            });\n            // If we reach the end of the stream without finding anything, resolve to false\n            bindings.bindingsStream.on('end', () => resolve(false));\n            // Reject if an error occurs in the stream\n            bindings.bindingsStream.on('error', reject);\n        });\n        return { type: 'boolean', booleanResult };\n    }\n}\nexports.ActorQueryOperationAsk = ActorQueryOperationAsk;\n//# sourceMappingURL=ActorQueryOperationAsk.js.map"]},"metadata":{},"sourceType":"script"}