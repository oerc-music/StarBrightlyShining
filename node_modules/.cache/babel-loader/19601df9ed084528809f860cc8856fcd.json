{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntryHandlerKeywordContext = void 0;\n\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\n\n\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n  constructor() {\n    super('@context');\n  }\n\n  isStackProcessor() {\n    return false;\n  }\n\n  async handle(parsingContext, util, key, keys, value, depth) {\n    // Error if an out-of-order context was found when support is not enabled.\n    if (parsingContext.streamingProfile && (parsingContext.processingStack[depth] || parsingContext.processingType[depth] || parsingContext.idStack[depth] !== undefined)) {\n      parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' + '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n    } // Find the parent context to inherit from.\n    // We actually request a context for the current depth (with fallback to parent)\n    // because we want to take into account any property-scoped contexts that are defined for this depth.\n\n\n    const parentContext = parsingContext.getContext(keys); // Set the context for this scope\n\n    const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n    parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n    parsingContext.emitContext(value);\n    await parsingContext.validateContext(await context);\n  }\n\n}\n\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js"],"names":["Object","defineProperty","exports","value","EntryHandlerKeywordContext","jsonld_context_parser_1","require","EntryHandlerKeyword_1","EntryHandlerKeyword","constructor","isStackProcessor","handle","parsingContext","util","key","keys","depth","streamingProfile","processingStack","processingType","idStack","undefined","emitError","ErrorCoded","ERROR_CODES","INVALID_STREAMING_KEY_ORDER","parentContext","getContext","context","parseContext","getContextRaw","contextTree","setContext","slice","emitContext","validateContext"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,0BAAR,GAAqC,KAAK,CAA1C;;AACA,MAAMC,uBAAuB,GAAGC,OAAO,CAAC,uBAAD,CAAvC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;;;AACA,MAAMF,0BAAN,SAAyCG,qBAAqB,CAACC,mBAA/D,CAAmF;AAC/EC,EAAAA,WAAW,GAAG;AACV,UAAM,UAAN;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAP;AACH;;AACW,QAANC,MAAM,CAACC,cAAD,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCZ,KAAlC,EAAyCa,KAAzC,EAAgD;AACxD;AACA,QAAIJ,cAAc,CAACK,gBAAf,KACIL,cAAc,CAACM,eAAf,CAA+BF,KAA/B,KACGJ,cAAc,CAACO,cAAf,CAA8BH,KAA9B,CADH,IAEGJ,cAAc,CAACQ,OAAf,CAAuBJ,KAAvB,MAAkCK,SAHzC,CAAJ,EAGyD;AACrDT,MAAAA,cAAc,CAACU,SAAf,CAAyB,IAAIjB,uBAAuB,CAACkB,UAA5B,CAAuC,+DAC5D,8BADqB,EACWlB,uBAAuB,CAACmB,WAAxB,CAAoCC,2BAD/C,CAAzB;AAEH,KARuD,CASxD;AACA;AACA;;;AACA,UAAMC,aAAa,GAAGd,cAAc,CAACe,UAAf,CAA0BZ,IAA1B,CAAtB,CAZwD,CAaxD;;AACA,UAAMa,OAAO,GAAGhB,cAAc,CAACiB,YAAf,CAA4B1B,KAA5B,EAAmC,CAAC,MAAMuB,aAAP,EAAsBI,aAAtB,EAAnC,CAAhB;AACAlB,IAAAA,cAAc,CAACmB,WAAf,CAA2BC,UAA3B,CAAsCjB,IAAI,CAACkB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAtC,EAAyDL,OAAzD;AACAhB,IAAAA,cAAc,CAACsB,WAAf,CAA2B/B,KAA3B;AACA,UAAMS,cAAc,CAACuB,eAAf,CAA+B,MAAMP,OAArC,CAAN;AACH;;AAzB8E;;AA2BnF1B,OAAO,CAACE,0BAAR,GAAqCA,0BAArC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map"]},"metadata":{},"sourceType":"script"}