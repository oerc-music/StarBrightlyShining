{"ast":null,"code":"import { DeleteFunctionHandler } from 'ldflex';\n/**\n * node-solid-server deviates from the SPARQL UPDATE spec:\n * whereas the spec asks for DELETE on non-existing triples to silently succeed,\n * node-solid-server will only DELETE if exactly one triple matches.\n *\n * This delete handler works around that limitation\n * by first requesting all existing values for a path,\n * and then only issuing DELETE statements for those that exist.\n */\n\nexport default class SolidDeleteFunctionHandler extends DeleteFunctionHandler {\n  async extractObjects(pathData, path, args) {\n    // Obtain all values whose deletion was requested\n    const objects = await super.extractObjects(pathData, path, args); // Obtain all values that currently exist\n\n    const existing = [];\n\n    for await (const term of path) {\n      if (term.termType !== 'BlankNode') existing.push(term);\n    } // Perform deletions only for values that exist\n\n\n    return !objects ? existing : existing.filter(e => objects.some(o => o.equals(e)));\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/query-ldflex/module/handlers/SolidDeleteFunctionHandler.js"],"names":["DeleteFunctionHandler","SolidDeleteFunctionHandler","extractObjects","pathData","path","args","objects","existing","term","termType","push","filter","e","some","o","equals"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,QAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,0BAAN,SAAyCD,qBAAzC,CAA+D;AACxD,QAAdE,cAAc,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAjB,EAAuB;AACzC;AACA,UAAMC,OAAO,GAAG,MAAM,MAAMJ,cAAN,CAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,IAArC,CAAtB,CAFyC,CAEyB;;AAElE,UAAME,QAAQ,GAAG,EAAjB;;AAEA,eAAW,MAAMC,IAAjB,IAAyBJ,IAAzB,EAA+B;AAC7B,UAAII,IAAI,CAACC,QAAL,KAAkB,WAAtB,EAAmCF,QAAQ,CAACG,IAAT,CAAcF,IAAd;AACpC,KARwC,CAQvC;;;AAGF,WAAO,CAACF,OAAD,GAAWC,QAAX,GAAsBA,QAAQ,CAACI,MAAT,CAAgBC,CAAC,IAAIN,OAAO,CAACO,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACC,MAAF,CAASH,CAAT,CAAlB,CAArB,CAA7B;AACD;;AAb2E","sourcesContent":["import { DeleteFunctionHandler } from 'ldflex';\n/**\n * node-solid-server deviates from the SPARQL UPDATE spec:\n * whereas the spec asks for DELETE on non-existing triples to silently succeed,\n * node-solid-server will only DELETE if exactly one triple matches.\n *\n * This delete handler works around that limitation\n * by first requesting all existing values for a path,\n * and then only issuing DELETE statements for those that exist.\n */\n\nexport default class SolidDeleteFunctionHandler extends DeleteFunctionHandler {\n  async extractObjects(pathData, path, args) {\n    // Obtain all values whose deletion was requested\n    const objects = await super.extractObjects(pathData, path, args); // Obtain all values that currently exist\n\n    const existing = [];\n\n    for await (const term of path) {\n      if (term.termType !== 'BlankNode') existing.push(term);\n    } // Perform deletions only for values that exist\n\n\n    return !objects ? existing : existing.filter(e => objects.some(o => o.equals(e)));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}