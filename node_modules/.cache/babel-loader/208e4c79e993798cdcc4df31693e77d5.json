{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MediatorRace = void 0;\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * A mediator that picks the first actor that resolves its test.\n */\n\n\nclass MediatorRace extends core_1.Mediator {\n  constructor(args) {\n    super(args);\n  }\n\n  mediateWith(action, testResults) {\n    return new Promise((resolve, reject) => {\n      const errors = [];\n\n      for (const testResult of testResults) {\n        testResult.reply.then(() => {\n          resolve(testResult.actor);\n        }).catch(error => {\n          // Reject if all replies were rejected\n          errors.push(error);\n\n          if (errors.length === testResults.length) {\n            reject(new Error(`${this.name} mediated over all rejecting actors:\\n${errors.map(subError => subError.message).join('\\n')}`));\n          }\n        });\n      }\n    });\n  }\n\n}\n\nexports.MediatorRace = MediatorRace;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/mediator-race/lib/MediatorRace.js"],"names":["Object","defineProperty","exports","value","MediatorRace","core_1","require","Mediator","constructor","args","mediateWith","action","testResults","Promise","resolve","reject","errors","testResult","reply","then","actor","catch","error","push","length","Error","name","map","subError","message","join"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;;;AACA,MAAMF,YAAN,SAA2BC,MAAM,CAACE,QAAlC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACDC,EAAAA,WAAW,CAACC,MAAD,EAASC,WAAT,EAAsB;AAC7B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,MAAMC,UAAX,IAAyBL,WAAzB,EAAsC;AAClCK,QAAAA,UAAU,CAACC,KAAX,CAAiBC,IAAjB,CAAsB,MAAM;AACxBL,UAAAA,OAAO,CAACG,UAAU,CAACG,KAAZ,CAAP;AACH,SAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACd;AACAN,UAAAA,MAAM,CAACO,IAAP,CAAYD,KAAZ;;AACA,cAAIN,MAAM,CAACQ,MAAP,KAAkBZ,WAAW,CAACY,MAAlC,EAA0C;AACtCT,YAAAA,MAAM,CAAC,IAAIU,KAAJ,CAAW,GAAE,KAAKC,IAAK,yCAAwCV,MAAM,CAACW,GAAP,CAAWC,QAAQ,IAAIA,QAAQ,CAACC,OAAhC,EAAyCC,IAAzC,CAA8C,IAA9C,CAAoD,EAAnH,CAAD,CAAN;AACH;AACJ,SARD;AASH;AACJ,KAbM,CAAP;AAcH;;AAnBsC;;AAqB3C5B,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MediatorRace = void 0;\nconst core_1 = require(\"@comunica/core\");\n/**\n * A mediator that picks the first actor that resolves its test.\n */\nclass MediatorRace extends core_1.Mediator {\n    constructor(args) {\n        super(args);\n    }\n    mediateWith(action, testResults) {\n        return new Promise((resolve, reject) => {\n            const errors = [];\n            for (const testResult of testResults) {\n                testResult.reply.then(() => {\n                    resolve(testResult.actor);\n                }).catch(error => {\n                    // Reject if all replies were rejected\n                    errors.push(error);\n                    if (errors.length === testResults.length) {\n                        reject(new Error(`${this.name} mediated over all rejecting actors:\\n${errors.map(subError => subError.message).join('\\n')}`));\n                    }\n                });\n            }\n        });\n    }\n}\nexports.MediatorRace = MediatorRace;\n//# sourceMappingURL=MediatorRace.js.map"]},"metadata":{},"sourceType":"script"}