{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationAddRewrite = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\n\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL add operations.\n */\n\nclass ActorQueryOperationAddRewrite extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'add');\n    this.factory = new sparqlalgebrajs_1.Factory();\n  }\n\n  async testOperation(pattern, context) {\n    bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  runOperation(pattern, context) {\n    // CONSTRUCT all quads from the source, and INSERT them into the destination\n    const destination = pattern.destination === 'DEFAULT' ? DF.defaultGraph() : pattern.destination;\n    const source = pattern.source === 'DEFAULT' ? DF.defaultGraph() : pattern.source;\n    const operation = this.factory.createDeleteInsert(undefined, [this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), destination)], this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), source));\n    return this.mediatorQueryOperation.mediate({\n      operation,\n      context\n    });\n  }\n\n}\n\nexports.ActorQueryOperationAddRewrite = ActorQueryOperationAddRewrite;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-update-add-rewrite/lib/ActorQueryOperationAddRewrite.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationAddRewrite","bus_query_operation_1","require","rdf_data_factory_1","sparqlalgebrajs_1","DF","DataFactory","ActorQueryOperationTypedMediated","constructor","args","factory","Factory","testOperation","pattern","context","ActorQueryOperation","throwOnReadOnly","runOperation","destination","defaultGraph","source","operation","createDeleteInsert","undefined","createPattern","variable","mediatorQueryOperation","mediate"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,6BAAR,GAAwC,KAAK,CAA7C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,iBAAD,CAAjC;;AACA,MAAMG,EAAE,GAAG,IAAIF,kBAAkB,CAACG,WAAvB,EAAX;AACA;AACA;AACA;AACA;;AACA,MAAMN,6BAAN,SAA4CC,qBAAqB,CAACM,gCAAlE,CAAmG;AAC/FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,KAAZ;AACA,SAAKC,OAAL,GAAe,IAAIN,iBAAiB,CAACO,OAAtB,EAAf;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClCb,IAAAA,qBAAqB,CAACc,mBAAtB,CAA0CC,eAA1C,CAA0DF,OAA1D;AACA,WAAO,IAAP;AACH;;AACDG,EAAAA,YAAY,CAACJ,OAAD,EAAUC,OAAV,EAAmB;AAC3B;AACA,UAAMI,WAAW,GAAGL,OAAO,CAACK,WAAR,KAAwB,SAAxB,GAAoCb,EAAE,CAACc,YAAH,EAApC,GAAwDN,OAAO,CAACK,WAApF;AACA,UAAME,MAAM,GAAGP,OAAO,CAACO,MAAR,KAAmB,SAAnB,GAA+Bf,EAAE,CAACc,YAAH,EAA/B,GAAmDN,OAAO,CAACO,MAA1E;AACA,UAAMC,SAAS,GAAG,KAAKX,OAAL,CAAaY,kBAAb,CAAgCC,SAAhC,EAA2C,CACzD,KAAKb,OAAL,CAAac,aAAb,CAA2BnB,EAAE,CAACoB,QAAH,CAAY,GAAZ,CAA3B,EAA6CpB,EAAE,CAACoB,QAAH,CAAY,GAAZ,CAA7C,EAA+DpB,EAAE,CAACoB,QAAH,CAAY,GAAZ,CAA/D,EAAiFP,WAAjF,CADyD,CAA3C,EAEf,KAAKR,OAAL,CAAac,aAAb,CAA2BnB,EAAE,CAACoB,QAAH,CAAY,GAAZ,CAA3B,EAA6CpB,EAAE,CAACoB,QAAH,CAAY,GAAZ,CAA7C,EAA+DpB,EAAE,CAACoB,QAAH,CAAY,GAAZ,CAA/D,EAAiFL,MAAjF,CAFe,CAAlB;AAGA,WAAO,KAAKM,sBAAL,CAA4BC,OAA5B,CAAoC;AAAEN,MAAAA,SAAF;AAAaP,MAAAA;AAAb,KAApC,CAAP;AACH;;AAjB8F;;AAmBnGhB,OAAO,CAACE,6BAAR,GAAwCA,6BAAxC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationAddRewrite = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL add operations.\n */\nclass ActorQueryOperationAddRewrite extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'add');\n        this.factory = new sparqlalgebrajs_1.Factory();\n    }\n    async testOperation(pattern, context) {\n        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n        return true;\n    }\n    runOperation(pattern, context) {\n        // CONSTRUCT all quads from the source, and INSERT them into the destination\n        const destination = pattern.destination === 'DEFAULT' ? DF.defaultGraph() : pattern.destination;\n        const source = pattern.source === 'DEFAULT' ? DF.defaultGraph() : pattern.source;\n        const operation = this.factory.createDeleteInsert(undefined, [\n            this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), destination),\n        ], this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), source));\n        return this.mediatorQueryOperation.mediate({ operation, context });\n    }\n}\nexports.ActorQueryOperationAddRewrite = ActorQueryOperationAddRewrite;\n//# sourceMappingURL=ActorQueryOperationAddRewrite.js.map"]},"metadata":{},"sourceType":"script"}