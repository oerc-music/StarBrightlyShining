{"ast":null,"code":"const done = {};\n/**\n * Returns the elements of the iterable as an array\n */\n\nexport async function iterableToArray(iterable) {\n  const items = [];\n\n  for await (const item of iterable) items.push(item);\n\n  return items;\n}\n/**\n * Gets the first element of the iterable.\n */\n\nexport function getFirstItem(iterable) {\n  const iterator = iterable[Symbol.asyncIterator]();\n  return iterator.next().then(item => item.value);\n}\n/**\n * Creates an async iterator with the item as only element.\n */\n\nexport function iteratorFor(item) {\n  return {\n    async next() {\n      if (item !== done) {\n        const value = await item;\n        item = done;\n        return {\n          value\n        };\n      }\n\n      return {\n        done: true\n      };\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/ldflex/module/iterableUtils.js"],"names":["done","iterableToArray","iterable","items","item","push","getFirstItem","iterator","Symbol","asyncIterator","next","then","value","iteratorFor"],"mappings":"AAAA,MAAMA,IAAI,GAAG,EAAb;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,eAAf,CAA+BC,QAA/B,EAAyC;AAC9C,QAAMC,KAAK,GAAG,EAAd;;AAEA,aAAW,MAAMC,IAAjB,IAAyBF,QAAzB,EAAmCC,KAAK,CAACE,IAAN,CAAWD,IAAX;;AAEnC,SAAOD,KAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASG,YAAT,CAAsBJ,QAAtB,EAAgC;AACrC,QAAMK,QAAQ,GAAGL,QAAQ,CAACM,MAAM,CAACC,aAAR,CAAR,EAAjB;AACA,SAAOF,QAAQ,CAACG,IAAT,GAAgBC,IAAhB,CAAqBP,IAAI,IAAIA,IAAI,CAACQ,KAAlC,CAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBT,IAArB,EAA2B;AAChC,SAAO;AACL,UAAMM,IAAN,GAAa;AACX,UAAIN,IAAI,KAAKJ,IAAb,EAAmB;AACjB,cAAMY,KAAK,GAAG,MAAMR,IAApB;AACAA,QAAAA,IAAI,GAAGJ,IAAP;AACA,eAAO;AACLY,UAAAA;AADK,SAAP;AAGD;;AAED,aAAO;AACLZ,QAAAA,IAAI,EAAE;AADD,OAAP;AAGD;;AAbI,GAAP;AAgBD","sourcesContent":["const done = {};\n/**\n * Returns the elements of the iterable as an array\n */\n\nexport async function iterableToArray(iterable) {\n  const items = [];\n\n  for await (const item of iterable) items.push(item);\n\n  return items;\n}\n/**\n * Gets the first element of the iterable.\n */\n\nexport function getFirstItem(iterable) {\n  const iterator = iterable[Symbol.asyncIterator]();\n  return iterator.next().then(item => item.value);\n}\n/**\n * Creates an async iterator with the item as only element.\n */\n\nexport function iteratorFor(item) {\n  return {\n    async next() {\n      if (item !== done) {\n        const value = await item;\n        item = done;\n        return {\n          value\n        };\n      }\n\n      return {\n        done: true\n      };\n    }\n\n  };\n}"]},"metadata":{},"sourceType":"module"}