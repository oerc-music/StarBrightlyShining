{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureActionContext = exports.ActionContext = exports.Actor = void 0;\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n\nconst immutable_1 = require(\"immutable\");\n/**\n * An actor can act on messages of certain types and provide output of a certain type.\n *\n * The flow of an actor is as follows:\n * 1. Send a message to {@link Actor#test} to test if an actor can run that action.\n * 2. If the actor can reply to the message, let the actor run the action using {@link Actor#run}.\n *\n * An actor is typically subscribed to a bus,\n * using which the applicability to an action can be tested.\n *\n * @see Bus\n *\n * @template I The input type of an actor.\n * @template T The test type of an actor.\n * @template O The output type of an actor.\n */\n\n\nclass Actor {\n  /**\n   * All enumerable properties from the `args` object are inherited to this actor.\n   *\n   * The actor will subscribe to the given bus when this constructor is called.\n   *\n   * @param {IActorArgs<I extends IAction, T extends IActorTest, O extends IActorOutput>} args Arguments object\n   * @param {string} args.name The name for this actor.\n   * @param {Bus<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>} args.bus\n   *        The bus this actor subscribes to.\n   * @throws When required arguments are missing.\n   */\n  constructor(args) {\n    this.beforeActors = [];\n    Object.assign(this, args);\n    this.bus.subscribe(this);\n\n    if (this.beforeActors.length > 0) {\n      this.bus.addDependencies(this, this.beforeActors);\n    }\n  }\n  /**\n   * Get the logger from the given context.\n   * @param {ActionContext} context An optional context.\n   * @return {Logger} The logger or undefined.\n   */\n\n\n  static getContextLogger(context) {\n    return context && context.get(context_entries_1.KeysCore.log);\n  }\n  /**\n   * Run the given action on this actor\n   * AND invokes the {@link Bus#onRun} method.\n   *\n   * @param {I} action The action to run.\n   * @return {Promise<T>} A promise that resolves to the run result.\n   */\n\n\n  runObservable(action) {\n    const output = this.run(action);\n    this.bus.onRun(this, action, output);\n    return output;\n  }\n  /**\n   * Initialize this actor.\n   * This should be used for doing things that take a while,\n   * such as opening files.\n   *\n   * @return {Promise<void>} A promise that resolves when the actor has been initialized.\n   */\n\n\n  async initialize() {\n    return true;\n  }\n  /**\n   * Deinitialize this actor.\n   * This should be used for cleaning up things when the application is shut down,\n   * such as closing files and removing temporary files.\n   *\n   * @return {Promise<void>} A promise that resolves when the actor has been deinitialized.\n   */\n\n\n  async deinitialize() {\n    return true;\n  }\n  /* Proxy methods for the (optional) logger that is defined in the context */\n\n\n  getDefaultLogData(context, data) {\n    const dataActual = data ? data() : {};\n    dataActual.actor = this.name;\n    return dataActual;\n  }\n\n  logTrace(context, message, data) {\n    const logger = Actor.getContextLogger(context);\n\n    if (logger) {\n      logger.trace(message, this.getDefaultLogData(context, data));\n    }\n  }\n\n  logDebug(context, message, data) {\n    const logger = Actor.getContextLogger(context);\n\n    if (logger) {\n      logger.debug(message, this.getDefaultLogData(context, data));\n    }\n  }\n\n  logInfo(context, message, data) {\n    const logger = Actor.getContextLogger(context);\n\n    if (logger) {\n      logger.info(message, this.getDefaultLogData(context, data));\n    }\n  }\n\n  logWarn(context, message, data) {\n    const logger = Actor.getContextLogger(context);\n\n    if (logger) {\n      logger.warn(message, this.getDefaultLogData(context, data));\n    }\n  }\n\n  logError(context, message, data) {\n    const logger = Actor.getContextLogger(context);\n\n    if (logger) {\n      logger.error(message, this.getDefaultLogData(context, data));\n    }\n  }\n\n  logFatal(context, message, data) {\n    const logger = Actor.getContextLogger(context);\n\n    if (logger) {\n      logger.fatal(message, this.getDefaultLogData(context, data));\n    }\n  }\n\n}\n\nexports.Actor = Actor;\n/**\n * A convenience constructor for {@link ActionContext} based on a given hash.\n * @param {{[p: string]: any}} hash A hash that maps keys to values.\n * @return {ActionContext} The immutable action context from the hash.\n * @constructor\n */\n// eslint-disable-next-line no-redeclare\n\nfunction ActionContext(hash) {\n  return immutable_1.Map(hash);\n}\n\nexports.ActionContext = ActionContext;\n/**\n * Convert the given object to an action context object if it is not an action context object yet.\n * If it already is an action context object, return the object as-is.\n * @param maybeActionContext Any object.\n * @return {ActionContext} An action context object.\n */\n\nfunction ensureActionContext(maybeActionContext) {\n  return immutable_1.Map.isMap(maybeActionContext) ? maybeActionContext : ActionContext(maybeActionContext);\n}\n\nexports.ensureActionContext = ensureActionContext;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/core/lib/Actor.js"],"names":["Object","defineProperty","exports","value","ensureActionContext","ActionContext","Actor","context_entries_1","require","immutable_1","constructor","args","beforeActors","assign","bus","subscribe","length","addDependencies","getContextLogger","context","get","KeysCore","log","runObservable","action","output","run","onRun","initialize","deinitialize","getDefaultLogData","data","dataActual","actor","name","logTrace","message","logger","trace","logDebug","debug","logInfo","info","logWarn","warn","logError","error","logFatal","fatal","hash","Map","maybeActionContext","isMap"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ensureActionContext = exports.ActionContext = exports.Actor = void 0;\nconst context_entries_1 = require(\"@comunica/context-entries\");\nconst immutable_1 = require(\"immutable\");\n/**\n * An actor can act on messages of certain types and provide output of a certain type.\n *\n * The flow of an actor is as follows:\n * 1. Send a message to {@link Actor#test} to test if an actor can run that action.\n * 2. If the actor can reply to the message, let the actor run the action using {@link Actor#run}.\n *\n * An actor is typically subscribed to a bus,\n * using which the applicability to an action can be tested.\n *\n * @see Bus\n *\n * @template I The input type of an actor.\n * @template T The test type of an actor.\n * @template O The output type of an actor.\n */\nclass Actor {\n    /**\n     * All enumerable properties from the `args` object are inherited to this actor.\n     *\n     * The actor will subscribe to the given bus when this constructor is called.\n     *\n     * @param {IActorArgs<I extends IAction, T extends IActorTest, O extends IActorOutput>} args Arguments object\n     * @param {string} args.name The name for this actor.\n     * @param {Bus<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>} args.bus\n     *        The bus this actor subscribes to.\n     * @throws When required arguments are missing.\n     */\n    constructor(args) {\n        this.beforeActors = [];\n        Object.assign(this, args);\n        this.bus.subscribe(this);\n        if (this.beforeActors.length > 0) {\n            this.bus.addDependencies(this, this.beforeActors);\n        }\n    }\n    /**\n     * Get the logger from the given context.\n     * @param {ActionContext} context An optional context.\n     * @return {Logger} The logger or undefined.\n     */\n    static getContextLogger(context) {\n        return context && context.get(context_entries_1.KeysCore.log);\n    }\n    /**\n     * Run the given action on this actor\n     * AND invokes the {@link Bus#onRun} method.\n     *\n     * @param {I} action The action to run.\n     * @return {Promise<T>} A promise that resolves to the run result.\n     */\n    runObservable(action) {\n        const output = this.run(action);\n        this.bus.onRun(this, action, output);\n        return output;\n    }\n    /**\n     * Initialize this actor.\n     * This should be used for doing things that take a while,\n     * such as opening files.\n     *\n     * @return {Promise<void>} A promise that resolves when the actor has been initialized.\n     */\n    async initialize() {\n        return true;\n    }\n    /**\n     * Deinitialize this actor.\n     * This should be used for cleaning up things when the application is shut down,\n     * such as closing files and removing temporary files.\n     *\n     * @return {Promise<void>} A promise that resolves when the actor has been deinitialized.\n     */\n    async deinitialize() {\n        return true;\n    }\n    /* Proxy methods for the (optional) logger that is defined in the context */\n    getDefaultLogData(context, data) {\n        const dataActual = data ? data() : {};\n        dataActual.actor = this.name;\n        return dataActual;\n    }\n    logTrace(context, message, data) {\n        const logger = Actor.getContextLogger(context);\n        if (logger) {\n            logger.trace(message, this.getDefaultLogData(context, data));\n        }\n    }\n    logDebug(context, message, data) {\n        const logger = Actor.getContextLogger(context);\n        if (logger) {\n            logger.debug(message, this.getDefaultLogData(context, data));\n        }\n    }\n    logInfo(context, message, data) {\n        const logger = Actor.getContextLogger(context);\n        if (logger) {\n            logger.info(message, this.getDefaultLogData(context, data));\n        }\n    }\n    logWarn(context, message, data) {\n        const logger = Actor.getContextLogger(context);\n        if (logger) {\n            logger.warn(message, this.getDefaultLogData(context, data));\n        }\n    }\n    logError(context, message, data) {\n        const logger = Actor.getContextLogger(context);\n        if (logger) {\n            logger.error(message, this.getDefaultLogData(context, data));\n        }\n    }\n    logFatal(context, message, data) {\n        const logger = Actor.getContextLogger(context);\n        if (logger) {\n            logger.fatal(message, this.getDefaultLogData(context, data));\n        }\n    }\n}\nexports.Actor = Actor;\n/**\n * A convenience constructor for {@link ActionContext} based on a given hash.\n * @param {{[p: string]: any}} hash A hash that maps keys to values.\n * @return {ActionContext} The immutable action context from the hash.\n * @constructor\n */\n// eslint-disable-next-line no-redeclare\nfunction ActionContext(hash) {\n    return immutable_1.Map(hash);\n}\nexports.ActionContext = ActionContext;\n/**\n * Convert the given object to an action context object if it is not an action context object yet.\n * If it already is an action context object, return the object as-is.\n * @param maybeActionContext Any object.\n * @return {ActionContext} An action context object.\n */\nfunction ensureActionContext(maybeActionContext) {\n    return immutable_1.Map.isMap(maybeActionContext) ? maybeActionContext : ActionContext(maybeActionContext);\n}\nexports.ensureActionContext = ensureActionContext;\n//# sourceMappingURL=Actor.js.map"]},"metadata":{},"sourceType":"script"}