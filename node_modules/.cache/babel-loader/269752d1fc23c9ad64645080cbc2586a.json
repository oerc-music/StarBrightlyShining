{"ast":null,"code":"let AsyncIterator = require('asynciterator').AsyncIterator; // merges the contents of multiple streams\n\n\nclass MergeIterator extends AsyncIterator {\n  constructor(streams) {\n    super();\n    if (!Array.isArray(streams)) streams = Array.prototype.slice.call(arguments);\n    this.streams = streams;\n\n    for (let stream of streams) {\n      stream.on('readable', () => this.emit('readable'));\n      stream.on('end', () => this._removeStream(stream));\n    }\n\n    if (this.streams.length === 0) this.close();\n    this.idx = this.streams.length - 1;\n  }\n\n  _removeStream(stream) {\n    let idx = this.streams.indexOf(stream);\n    if (idx < 0) return;\n    this.streams.splice(idx, 1);\n    if (this.idx >= this.streams.length) --this.idx;\n    if (this.streams.length === 0) this._end();\n  }\n\n  close() {\n    super.close();\n\n    for (let stream of this.streams) stream.close();\n  }\n\n  read() {\n    for (let attempts = 0; attempts < this.streams.length; ++attempts) {\n      this.idx = (this.idx + 1) % this.streams.length;\n      let item = this.streams[this.idx].read();\n      if (item !== null) return item;\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = MergeIterator;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/asyncjoin/util/MergeIterator.js"],"names":["AsyncIterator","require","MergeIterator","constructor","streams","Array","isArray","prototype","slice","call","arguments","stream","on","emit","_removeStream","length","close","idx","indexOf","splice","_end","read","attempts","item","module","exports"],"mappings":"AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,aAA7C,C,CAEA;;;AACA,MAAME,aAAN,SAA4BF,aAA5B,CACA;AACIG,EAAAA,WAAW,CAAEC,OAAF,EACX;AACI;AAEA,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EACIA,OAAO,GAAGC,KAAK,CAACE,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAV;AAEJ,SAAKN,OAAL,GAAeA,OAAf;;AAEA,SAAK,IAAIO,MAAT,IAAmBP,OAAnB,EACA;AACIO,MAAAA,MAAM,CAACC,EAAP,CAAU,UAAV,EAAsB,MAAM,KAAKC,IAAL,CAAU,UAAV,CAA5B;AACAF,MAAAA,MAAM,CAACC,EAAP,CAAU,KAAV,EAAiB,MAAM,KAAKE,aAAL,CAAmBH,MAAnB,CAAvB;AACH;;AAED,QAAI,KAAKP,OAAL,CAAaW,MAAb,KAAwB,CAA5B,EACI,KAAKC,KAAL;AAEJ,SAAKC,GAAL,GAAW,KAAKb,OAAL,CAAaW,MAAb,GAAoB,CAA/B;AACH;;AAEDD,EAAAA,aAAa,CAAEH,MAAF,EACb;AACI,QAAIM,GAAG,GAAG,KAAKb,OAAL,CAAac,OAAb,CAAqBP,MAArB,CAAV;AACA,QAAIM,GAAG,GAAG,CAAV,EACI;AAEJ,SAAKb,OAAL,CAAae,MAAb,CAAoBF,GAApB,EAAyB,CAAzB;AACA,QAAI,KAAKA,GAAL,IAAY,KAAKb,OAAL,CAAaW,MAA7B,EACI,EAAE,KAAKE,GAAP;AAEJ,QAAI,KAAKb,OAAL,CAAaW,MAAb,KAAwB,CAA5B,EACI,KAAKK,IAAL;AACP;;AAEDJ,EAAAA,KAAK,GACL;AACI,UAAMA,KAAN;;AACA,SAAK,IAAIL,MAAT,IAAmB,KAAKP,OAAxB,EACIO,MAAM,CAACK,KAAP;AACP;;AAEDK,EAAAA,IAAI,GACJ;AACI,SAAK,IAAIC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,KAAKlB,OAAL,CAAaW,MAA/C,EAAuD,EAAEO,QAAzD,EACA;AACI,WAAKL,GAAL,GAAW,CAAC,KAAKA,GAAL,GAAW,CAAZ,IAAiB,KAAKb,OAAL,CAAaW,MAAzC;AACA,UAAIQ,IAAI,GAAG,KAAKnB,OAAL,CAAa,KAAKa,GAAlB,EAAuBI,IAAvB,EAAX;AACA,UAAIE,IAAI,KAAK,IAAb,EACI,OAAOA,IAAP;AACP;;AAED,WAAO,IAAP;AACH;;AAtDL;;AAyDAC,MAAM,CAACC,OAAP,GAAiBvB,aAAjB","sourcesContent":["\nlet AsyncIterator = require('asynciterator').AsyncIterator;\n\n// merges the contents of multiple streams\nclass MergeIterator extends AsyncIterator\n{\n    constructor (streams)\n    {\n        super();\n        \n        if (!Array.isArray(streams))\n            streams = Array.prototype.slice.call(arguments);\n        \n        this.streams = streams;\n        \n        for (let stream of streams)\n        {\n            stream.on('readable', () => this.emit('readable'));\n            stream.on('end', () => this._removeStream(stream));\n        }\n        \n        if (this.streams.length === 0)\n            this.close();\n        \n        this.idx = this.streams.length-1;\n    }\n    \n    _removeStream (stream)\n    {\n        let idx = this.streams.indexOf(stream);\n        if (idx < 0)\n            return;\n        \n        this.streams.splice(idx, 1);\n        if (this.idx >= this.streams.length)\n            --this.idx;\n        \n        if (this.streams.length === 0)\n            this._end();\n    }\n    \n    close ()\n    {\n        super.close();\n        for (let stream of this.streams)\n            stream.close();\n    }\n    \n    read ()\n    {\n        for (let attempts = 0; attempts < this.streams.length; ++attempts)\n        {\n            this.idx = (this.idx + 1) % this.streams.length;\n            let item = this.streams[this.idx].read();\n            if (item !== null)\n                return item;\n        }\n        \n        return null;\n    }\n}\n\nmodule.exports = MergeIterator;"]},"metadata":{},"sourceType":"script"}