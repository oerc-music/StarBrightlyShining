{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expressionTypes = exports.types = void 0; // TODO: add aggregates?\n// TODO: can't find a way to use these values as string types in the interfaces\n\nexports.types = Object.freeze({\n  ALT: 'alt',\n  ASK: 'ask',\n  BGP: 'bgp',\n  CONSTRUCT: 'construct',\n  DESC: 'desc',\n  DESCRIBE: 'describe',\n  DISTINCT: 'distinct',\n  EXPRESSION: 'expression',\n  EXTEND: 'extend',\n  FILTER: 'filter',\n  FROM: 'from',\n  GRAPH: 'graph',\n  GROUP: 'group',\n  INV: 'inv',\n  JOIN: 'join',\n  LEFT_JOIN: 'leftjoin',\n  LINK: 'link',\n  MINUS: 'minus',\n  NPS: 'nps',\n  ONE_OR_MORE_PATH: 'OneOrMorePath',\n  ORDER_BY: 'orderby',\n  PATH: 'path',\n  PATTERN: 'pattern',\n  PROJECT: 'project',\n  REDUCED: 'reduced',\n  SEQ: 'seq',\n  SERVICE: 'service',\n  SLICE: 'slice',\n  UNION: 'union',\n  VALUES: 'values',\n  ZERO_OR_MORE_PATH: 'ZeroOrMorePath',\n  ZERO_OR_ONE_PATH: 'ZeroOrOnePath',\n  COMPOSITE_UPDATE: 'compositeupdate',\n  DELETE_INSERT: 'deleteinsert',\n  LOAD: 'load',\n  CLEAR: 'clear',\n  CREATE: 'create',\n  DROP: 'drop',\n  ADD: 'add',\n  MOVE: 'move',\n  COPY: 'copy'\n});\nexports.expressionTypes = Object.freeze({\n  AGGREGATE: 'aggregate',\n  EXISTENCE: 'existence',\n  NAMED: 'named',\n  OPERATOR: 'operator',\n  TERM: 'term',\n  WILDCARD: 'wildcard'\n});","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/sparqlalgebrajs/lib/algebra.js"],"names":["Object","defineProperty","exports","value","expressionTypes","types","freeze","ALT","ASK","BGP","CONSTRUCT","DESC","DESCRIBE","DISTINCT","EXPRESSION","EXTEND","FILTER","FROM","GRAPH","GROUP","INV","JOIN","LEFT_JOIN","LINK","MINUS","NPS","ONE_OR_MORE_PATH","ORDER_BY","PATH","PATTERN","PROJECT","REDUCED","SEQ","SERVICE","SLICE","UNION","VALUES","ZERO_OR_MORE_PATH","ZERO_OR_ONE_PATH","COMPOSITE_UPDATE","DELETE_INSERT","LOAD","CLEAR","CREATE","DROP","ADD","MOVE","COPY","AGGREGATE","EXISTENCE","NAMED","OPERATOR","TERM","WILDCARD"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0BF,OAAO,CAACG,KAAR,GAAgB,KAAK,CAA/C,C,CACA;AACA;;AACAH,OAAO,CAACG,KAAR,GAAgBL,MAAM,CAACM,MAAP,CAAc;AAC1BC,EAAAA,GAAG,EAAE,KADqB;AAE1BC,EAAAA,GAAG,EAAE,KAFqB;AAG1BC,EAAAA,GAAG,EAAE,KAHqB;AAI1BC,EAAAA,SAAS,EAAE,WAJe;AAK1BC,EAAAA,IAAI,EAAE,MALoB;AAM1BC,EAAAA,QAAQ,EAAE,UANgB;AAO1BC,EAAAA,QAAQ,EAAE,UAPgB;AAQ1BC,EAAAA,UAAU,EAAE,YARc;AAS1BC,EAAAA,MAAM,EAAE,QATkB;AAU1BC,EAAAA,MAAM,EAAE,QAVkB;AAW1BC,EAAAA,IAAI,EAAE,MAXoB;AAY1BC,EAAAA,KAAK,EAAE,OAZmB;AAa1BC,EAAAA,KAAK,EAAE,OAbmB;AAc1BC,EAAAA,GAAG,EAAE,KAdqB;AAe1BC,EAAAA,IAAI,EAAE,MAfoB;AAgB1BC,EAAAA,SAAS,EAAE,UAhBe;AAiB1BC,EAAAA,IAAI,EAAE,MAjBoB;AAkB1BC,EAAAA,KAAK,EAAE,OAlBmB;AAmB1BC,EAAAA,GAAG,EAAE,KAnBqB;AAoB1BC,EAAAA,gBAAgB,EAAE,eApBQ;AAqB1BC,EAAAA,QAAQ,EAAE,SArBgB;AAsB1BC,EAAAA,IAAI,EAAE,MAtBoB;AAuB1BC,EAAAA,OAAO,EAAE,SAvBiB;AAwB1BC,EAAAA,OAAO,EAAE,SAxBiB;AAyB1BC,EAAAA,OAAO,EAAE,SAzBiB;AA0B1BC,EAAAA,GAAG,EAAE,KA1BqB;AA2B1BC,EAAAA,OAAO,EAAE,SA3BiB;AA4B1BC,EAAAA,KAAK,EAAE,OA5BmB;AA6B1BC,EAAAA,KAAK,EAAE,OA7BmB;AA8B1BC,EAAAA,MAAM,EAAE,QA9BkB;AA+B1BC,EAAAA,iBAAiB,EAAE,gBA/BO;AAgC1BC,EAAAA,gBAAgB,EAAE,eAhCQ;AAiC1BC,EAAAA,gBAAgB,EAAE,iBAjCQ;AAkC1BC,EAAAA,aAAa,EAAE,cAlCW;AAmC1BC,EAAAA,IAAI,EAAE,MAnCoB;AAoC1BC,EAAAA,KAAK,EAAE,OApCmB;AAqC1BC,EAAAA,MAAM,EAAE,QArCkB;AAsC1BC,EAAAA,IAAI,EAAE,MAtCoB;AAuC1BC,EAAAA,GAAG,EAAE,KAvCqB;AAwC1BC,EAAAA,IAAI,EAAE,MAxCoB;AAyC1BC,EAAAA,IAAI,EAAE;AAzCoB,CAAd,CAAhB;AA2CA7C,OAAO,CAACE,eAAR,GAA0BJ,MAAM,CAACM,MAAP,CAAc;AACpC0C,EAAAA,SAAS,EAAE,WADyB;AAEpCC,EAAAA,SAAS,EAAE,WAFyB;AAGpCC,EAAAA,KAAK,EAAE,OAH6B;AAIpCC,EAAAA,QAAQ,EAAE,UAJ0B;AAKpCC,EAAAA,IAAI,EAAE,MAL8B;AAMpCC,EAAAA,QAAQ,EAAE;AAN0B,CAAd,CAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expressionTypes = exports.types = void 0;\n// TODO: add aggregates?\n// TODO: can't find a way to use these values as string types in the interfaces\nexports.types = Object.freeze({\n    ALT: 'alt',\n    ASK: 'ask',\n    BGP: 'bgp',\n    CONSTRUCT: 'construct',\n    DESC: 'desc',\n    DESCRIBE: 'describe',\n    DISTINCT: 'distinct',\n    EXPRESSION: 'expression',\n    EXTEND: 'extend',\n    FILTER: 'filter',\n    FROM: 'from',\n    GRAPH: 'graph',\n    GROUP: 'group',\n    INV: 'inv',\n    JOIN: 'join',\n    LEFT_JOIN: 'leftjoin',\n    LINK: 'link',\n    MINUS: 'minus',\n    NPS: 'nps',\n    ONE_OR_MORE_PATH: 'OneOrMorePath',\n    ORDER_BY: 'orderby',\n    PATH: 'path',\n    PATTERN: 'pattern',\n    PROJECT: 'project',\n    REDUCED: 'reduced',\n    SEQ: 'seq',\n    SERVICE: 'service',\n    SLICE: 'slice',\n    UNION: 'union',\n    VALUES: 'values',\n    ZERO_OR_MORE_PATH: 'ZeroOrMorePath',\n    ZERO_OR_ONE_PATH: 'ZeroOrOnePath',\n    COMPOSITE_UPDATE: 'compositeupdate',\n    DELETE_INSERT: 'deleteinsert',\n    LOAD: 'load',\n    CLEAR: 'clear',\n    CREATE: 'create',\n    DROP: 'drop',\n    ADD: 'add',\n    MOVE: 'move',\n    COPY: 'copy',\n});\nexports.expressionTypes = Object.freeze({\n    AGGREGATE: 'aggregate',\n    EXISTENCE: 'existence',\n    NAMED: 'named',\n    OPERATOR: 'operator',\n    TERM: 'term',\n    WILDCARD: 'wildcard',\n});\n//# sourceMappingURL=algebra.js.map"]},"metadata":{},"sourceType":"script"}