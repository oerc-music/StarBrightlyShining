{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfMetadataExtractSparqlService = void 0;\n\nconst bus_rdf_metadata_extract_1 = require(\"@comunica/bus-rdf-metadata-extract\");\n\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * A comunica RDF Metadata Extract Actor for SPARQL service descriptions.\n */\n\n\nclass ActorRdfMetadataExtractSparqlService extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {\n  constructor(args) {\n    super(args);\n  }\n\n  async test(action) {\n    return true;\n  }\n\n  async run(action) {\n    return new Promise((resolve, reject) => {\n      // Forward errors\n      action.metadata.on('error', reject); // Immediately resolve when a SPARQL service endpoint URL has been found\n\n      const metadata = {};\n      action.metadata.on('data', quad => {\n        if (quad.predicate.value === 'http://www.w3.org/ns/sparql-service-description#endpoint' && (quad.subject.termType === 'BlankNode' || quad.subject.value === action.url)) {\n          metadata.sparqlService = quad.object.termType === 'Literal' ? relative_to_absolute_iri_1.resolve(quad.object.value, action.url) : quad.object.value; // Fix a common mistake in SPARQL endpoint setups where HTTPS SD's refer to a non-existing HTTP API\n\n          if (this.inferHttpsEndpoint && action.url.startsWith('https') && !metadata.sparqlService.startsWith('https')) {\n            metadata.sparqlService = metadata.sparqlService.replace('http:', 'https:');\n          }\n        } else if (quad.predicate.value === 'http://www.w3.org/ns/sparql-service-description#defaultGraph') {\n          metadata.defaultGraph = quad.object.value;\n        }\n      }); // If no value has been found, emit nothing.\n\n      action.metadata.on('end', () => {\n        resolve({\n          metadata\n        });\n      });\n    });\n  }\n\n}\n\nexports.ActorRdfMetadataExtractSparqlService = ActorRdfMetadataExtractSparqlService;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-metadata-extract-sparql-service/lib/ActorRdfMetadataExtractSparqlService.js"],"names":["Object","defineProperty","exports","value","ActorRdfMetadataExtractSparqlService","bus_rdf_metadata_extract_1","require","relative_to_absolute_iri_1","ActorRdfMetadataExtract","constructor","args","test","action","run","Promise","resolve","reject","metadata","on","quad","predicate","subject","termType","url","sparqlService","object","inferHttpsEndpoint","startsWith","replace","defaultGraph"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oCAAR,GAA+C,KAAK,CAApD;;AACA,MAAMC,0BAA0B,GAAGC,OAAO,CAAC,oCAAD,CAA1C;;AACA,MAAMC,0BAA0B,GAAGD,OAAO,CAAC,0BAAD,CAA1C;AACA;AACA;AACA;;;AACA,MAAMF,oCAAN,SAAmDC,0BAA0B,CAACG,uBAA9E,CAAsG;AAClGC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACD,MAAD,EAAS;AACd,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC;AACAJ,MAAAA,MAAM,CAACK,QAAP,CAAgBC,EAAhB,CAAmB,OAAnB,EAA4BF,MAA5B,EAFoC,CAGpC;;AACA,YAAMC,QAAQ,GAAG,EAAjB;AACAL,MAAAA,MAAM,CAACK,QAAP,CAAgBC,EAAhB,CAAmB,MAAnB,EAA2BC,IAAI,IAAI;AAC/B,YAAIA,IAAI,CAACC,SAAL,CAAejB,KAAf,KAAyB,0DAAzB,KACCgB,IAAI,CAACE,OAAL,CAAaC,QAAb,KAA0B,WAA1B,IAAyCH,IAAI,CAACE,OAAL,CAAalB,KAAb,KAAuBS,MAAM,CAACW,GADxE,CAAJ,EACkF;AAC9EN,UAAAA,QAAQ,CAACO,aAAT,GAAyBL,IAAI,CAACM,MAAL,CAAYH,QAAZ,KAAyB,SAAzB,GACrBf,0BAA0B,CAACQ,OAA3B,CAAmCI,IAAI,CAACM,MAAL,CAAYtB,KAA/C,EAAsDS,MAAM,CAACW,GAA7D,CADqB,GAErBJ,IAAI,CAACM,MAAL,CAAYtB,KAFhB,CAD8E,CAI9E;;AACA,cAAI,KAAKuB,kBAAL,IACAd,MAAM,CAACW,GAAP,CAAWI,UAAX,CAAsB,OAAtB,CADA,IACkC,CAACV,QAAQ,CAACO,aAAT,CAAuBG,UAAvB,CAAkC,OAAlC,CADvC,EACmF;AAC/EV,YAAAA,QAAQ,CAACO,aAAT,GAAyBP,QAAQ,CAACO,aAAT,CAAuBI,OAAvB,CAA+B,OAA/B,EAAwC,QAAxC,CAAzB;AACH;AACJ,SAVD,MAWK,IAAIT,IAAI,CAACC,SAAL,CAAejB,KAAf,KAAyB,8DAA7B,EAA6F;AAC9Fc,UAAAA,QAAQ,CAACY,YAAT,GAAwBV,IAAI,CAACM,MAAL,CAAYtB,KAApC;AACH;AACJ,OAfD,EALoC,CAqBpC;;AACAS,MAAAA,MAAM,CAACK,QAAP,CAAgBC,EAAhB,CAAmB,KAAnB,EAA0B,MAAM;AAC5BH,QAAAA,OAAO,CAAC;AAAEE,UAAAA;AAAF,SAAD,CAAP;AACH,OAFD;AAGH,KAzBM,CAAP;AA0BH;;AAlCiG;;AAoCtGf,OAAO,CAACE,oCAAR,GAA+CA,oCAA/C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfMetadataExtractSparqlService = void 0;\nconst bus_rdf_metadata_extract_1 = require(\"@comunica/bus-rdf-metadata-extract\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * A comunica RDF Metadata Extract Actor for SPARQL service descriptions.\n */\nclass ActorRdfMetadataExtractSparqlService extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {\n    constructor(args) {\n        super(args);\n    }\n    async test(action) {\n        return true;\n    }\n    async run(action) {\n        return new Promise((resolve, reject) => {\n            // Forward errors\n            action.metadata.on('error', reject);\n            // Immediately resolve when a SPARQL service endpoint URL has been found\n            const metadata = {};\n            action.metadata.on('data', quad => {\n                if (quad.predicate.value === 'http://www.w3.org/ns/sparql-service-description#endpoint' &&\n                    (quad.subject.termType === 'BlankNode' || quad.subject.value === action.url)) {\n                    metadata.sparqlService = quad.object.termType === 'Literal' ?\n                        relative_to_absolute_iri_1.resolve(quad.object.value, action.url) :\n                        quad.object.value;\n                    // Fix a common mistake in SPARQL endpoint setups where HTTPS SD's refer to a non-existing HTTP API\n                    if (this.inferHttpsEndpoint &&\n                        action.url.startsWith('https') && !metadata.sparqlService.startsWith('https')) {\n                        metadata.sparqlService = metadata.sparqlService.replace('http:', 'https:');\n                    }\n                }\n                else if (quad.predicate.value === 'http://www.w3.org/ns/sparql-service-description#defaultGraph') {\n                    metadata.defaultGraph = quad.object.value;\n                }\n            });\n            // If no value has been found, emit nothing.\n            action.metadata.on('end', () => {\n                resolve({ metadata });\n            });\n        });\n    }\n}\nexports.ActorRdfMetadataExtractSparqlService = ActorRdfMetadataExtractSparqlService;\n//# sourceMappingURL=ActorRdfMetadataExtractSparqlService.js.map"]},"metadata":{},"sourceType":"script"}