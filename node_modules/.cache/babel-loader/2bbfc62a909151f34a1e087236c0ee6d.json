{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationTyped = exports.KEY_CONTEXT_QUERYOPERATION = void 0;\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n\nconst ActorQueryOperation_1 = require(\"./ActorQueryOperation\");\n/**\n * @type {string} Context entry for the current query operation.\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\n\nexports.KEY_CONTEXT_QUERYOPERATION = context_entries_1.KeysQueryOperation.operation;\n/**\n * A base implementation for query operation actors for a specific operation type.\n */\n\nclass ActorQueryOperationTyped extends ActorQueryOperation_1.ActorQueryOperation {\n  constructor(args, operationName) {\n    super(Object.assign(Object.assign({}, args), {\n      operationName\n    }));\n\n    if (!this.operationName) {\n      throw new Error('A valid \"operationName\" argument must be provided.');\n    }\n  }\n\n  async test(action) {\n    if (!action.operation) {\n      throw new Error('Missing field \\'operation\\' in a query operation action.');\n    }\n\n    if (action.operation.type !== this.operationName) {\n      throw new Error(`Actor ${this.name} only supports ${this.operationName} operations, but got ${action.operation.type}`);\n    }\n\n    const operation = action.operation;\n    return this.testOperation(operation, action.context);\n  }\n\n  async run(action) {\n    const operation = action.operation;\n    const subContext = action.context && action.context.set(context_entries_1.KeysQueryOperation.operation, operation);\n    const output = await this.runOperation(operation, subContext);\n\n    if (output.metadata) {\n      output.metadata = ActorQueryOperation_1.ActorQueryOperation.cachifyMetadata(output.metadata);\n    }\n\n    return output;\n  }\n\n}\n\nexports.ActorQueryOperationTyped = ActorQueryOperationTyped;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTyped.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationTyped","KEY_CONTEXT_QUERYOPERATION","context_entries_1","require","ActorQueryOperation_1","KeysQueryOperation","operation","ActorQueryOperation","constructor","args","operationName","assign","Error","test","action","type","name","testOperation","context","run","subContext","set","output","runOperation","metadata","cachifyMetadata"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmCF,OAAO,CAACG,0BAAR,GAAqC,KAAK,CAA7E;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,2BAAD,CAAjC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACG,0BAAR,GAAqCC,iBAAiB,CAACG,kBAAlB,CAAqCC,SAA1E;AACA;AACA;AACA;;AACA,MAAMN,wBAAN,SAAuCI,qBAAqB,CAACG,mBAA7D,CAAiF;AAC7EC,EAAAA,WAAW,CAACC,IAAD,EAAOC,aAAP,EAAsB;AAC7B,UAAMd,MAAM,CAACe,MAAP,CAAcf,MAAM,CAACe,MAAP,CAAc,EAAd,EAAkBF,IAAlB,CAAd,EAAuC;AAAEC,MAAAA;AAAF,KAAvC,CAAN;;AACA,QAAI,CAAC,KAAKA,aAAV,EAAyB;AACrB,YAAM,IAAIE,KAAJ,CAAU,oDAAV,CAAN;AACH;AACJ;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,QAAI,CAACA,MAAM,CAACR,SAAZ,EAAuB;AACnB,YAAM,IAAIM,KAAJ,CAAU,0DAAV,CAAN;AACH;;AACD,QAAIE,MAAM,CAACR,SAAP,CAAiBS,IAAjB,KAA0B,KAAKL,aAAnC,EAAkD;AAC9C,YAAM,IAAIE,KAAJ,CAAW,SAAQ,KAAKI,IAAK,kBAAiB,KAAKN,aAAc,wBAAuBI,MAAM,CAACR,SAAP,CAAiBS,IAAK,EAA9G,CAAN;AACH;;AACD,UAAMT,SAAS,GAAGQ,MAAM,CAACR,SAAzB;AACA,WAAO,KAAKW,aAAL,CAAmBX,SAAnB,EAA8BQ,MAAM,CAACI,OAArC,CAAP;AACH;;AACQ,QAAHC,GAAG,CAACL,MAAD,EAAS;AACd,UAAMR,SAAS,GAAGQ,MAAM,CAACR,SAAzB;AACA,UAAMc,UAAU,GAAGN,MAAM,CAACI,OAAP,IAAkBJ,MAAM,CAACI,OAAP,CAAeG,GAAf,CAAmBnB,iBAAiB,CAACG,kBAAlB,CAAqCC,SAAxD,EAAmEA,SAAnE,CAArC;AACA,UAAMgB,MAAM,GAAG,MAAM,KAAKC,YAAL,CAAkBjB,SAAlB,EAA6Bc,UAA7B,CAArB;;AACA,QAAIE,MAAM,CAACE,QAAX,EAAqB;AACjBF,MAAAA,MAAM,CAACE,QAAP,GACIpB,qBAAqB,CAACG,mBAAtB,CAA0CkB,eAA1C,CAA0DH,MAAM,CAACE,QAAjE,CADJ;AAEH;;AACD,WAAOF,MAAP;AACH;;AA1B4E;;AA4BjFxB,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationTyped = exports.KEY_CONTEXT_QUERYOPERATION = void 0;\nconst context_entries_1 = require(\"@comunica/context-entries\");\nconst ActorQueryOperation_1 = require(\"./ActorQueryOperation\");\n/**\n * @type {string} Context entry for the current query operation.\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_QUERYOPERATION = context_entries_1.KeysQueryOperation.operation;\n/**\n * A base implementation for query operation actors for a specific operation type.\n */\nclass ActorQueryOperationTyped extends ActorQueryOperation_1.ActorQueryOperation {\n    constructor(args, operationName) {\n        super(Object.assign(Object.assign({}, args), { operationName }));\n        if (!this.operationName) {\n            throw new Error('A valid \"operationName\" argument must be provided.');\n        }\n    }\n    async test(action) {\n        if (!action.operation) {\n            throw new Error('Missing field \\'operation\\' in a query operation action.');\n        }\n        if (action.operation.type !== this.operationName) {\n            throw new Error(`Actor ${this.name} only supports ${this.operationName} operations, but got ${action.operation.type}`);\n        }\n        const operation = action.operation;\n        return this.testOperation(operation, action.context);\n    }\n    async run(action) {\n        const operation = action.operation;\n        const subContext = action.context && action.context.set(context_entries_1.KeysQueryOperation.operation, operation);\n        const output = await this.runOperation(operation, subContext);\n        if (output.metadata) {\n            output.metadata =\n                ActorQueryOperation_1.ActorQueryOperation.cachifyMetadata(output.metadata);\n        }\n        return output;\n    }\n}\nexports.ActorQueryOperationTyped = ActorQueryOperationTyped;\n//# sourceMappingURL=ActorQueryOperationTyped.js.map"]},"metadata":{},"sourceType":"script"}