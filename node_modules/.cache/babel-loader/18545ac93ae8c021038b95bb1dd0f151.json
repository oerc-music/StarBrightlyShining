{"ast":null,"code":"import SubjectPathResolver from '../resolvers/SubjectPathResolver';\nimport auth from 'solid-auth-client';\nimport { namedNode } from '@rdfjs/data-model';\n/**\n * Creates a path with the current user as a subject.\n */\n\nexport default class UserPathHandler extends SubjectPathResolver {\n  handle({\n    settings\n  }) {\n    const subject = this.getWebId().then(namedNode);\n    return this._createSubjectPath(subject, settings);\n  }\n  /** Gets the WebID of the logged in user */\n\n\n  async getWebId() {\n    const session = await auth.currentSession();\n    if (!session) throw new Error('Cannot resolve user path: no user logged in');\n    return session.webId;\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/query-ldflex/module/handlers/UserPathHandler.js"],"names":["SubjectPathResolver","auth","namedNode","UserPathHandler","handle","settings","subject","getWebId","then","_createSubjectPath","session","currentSession","Error","webId"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,kCAAhC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,eAAN,SAA8BH,mBAA9B,CAAkD;AAC/DI,EAAAA,MAAM,CAAC;AACLC,IAAAA;AADK,GAAD,EAEH;AACD,UAAMC,OAAO,GAAG,KAAKC,QAAL,GAAgBC,IAAhB,CAAqBN,SAArB,CAAhB;AACA,WAAO,KAAKO,kBAAL,CAAwBH,OAAxB,EAAiCD,QAAjC,CAAP;AACD;AACD;;;AAGc,QAARE,QAAQ,GAAG;AACf,UAAMG,OAAO,GAAG,MAAMT,IAAI,CAACU,cAAL,EAAtB;AACA,QAAI,CAACD,OAAL,EAAc,MAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACd,WAAOF,OAAO,CAACG,KAAf;AACD;;AAd8D","sourcesContent":["import SubjectPathResolver from '../resolvers/SubjectPathResolver';\nimport auth from 'solid-auth-client';\nimport { namedNode } from '@rdfjs/data-model';\n/**\n * Creates a path with the current user as a subject.\n */\n\nexport default class UserPathHandler extends SubjectPathResolver {\n  handle({\n    settings\n  }) {\n    const subject = this.getWebId().then(namedNode);\n    return this._createSubjectPath(subject, settings);\n  }\n  /** Gets the WebID of the logged in user */\n\n\n  async getWebId() {\n    const session = await auth.currentSession();\n    if (!session) throw new Error('Cannot resolve user path: no user logged in');\n    return session.webId;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}