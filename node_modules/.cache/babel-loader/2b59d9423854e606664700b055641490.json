{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlParseGraphql = void 0;\n\nconst bus_sparql_parse_1 = require(\"@comunica/bus-sparql-parse\");\n\nconst graphql_to_sparql_1 = require(\"graphql-to-sparql\");\n/**\n * A comunica GraphQL SPARQL Parse Actor.\n */\n\n\nclass ActorSparqlParseGraphql extends bus_sparql_parse_1.ActorSparqlParse {\n  constructor(args) {\n    super(args);\n    this.graphqlToSparql = new graphql_to_sparql_1.Converter({\n      requireContext: true\n    });\n  }\n\n  async test(action) {\n    if (action.queryFormat !== 'graphql') {\n      throw new Error('This actor can only parse GraphQL queries');\n    }\n\n    return true;\n  }\n\n  async run(action) {\n    const context = action.context && action.context.has('@context') ? action.context.get('@context') : {};\n    const options = {\n      singularizeVariables: action.context && action.context.get('@comunica/actor-init-sparql:singularizeVariables')\n    };\n    return {\n      operation: await this.graphqlToSparql.graphqlToSparqlAlgebra(action.query, context, options)\n    };\n  }\n\n}\n\nexports.ActorSparqlParseGraphql = ActorSparqlParseGraphql;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-parse-graphql/lib/ActorSparqlParseGraphql.js"],"names":["Object","defineProperty","exports","value","ActorSparqlParseGraphql","bus_sparql_parse_1","require","graphql_to_sparql_1","ActorSparqlParse","constructor","args","graphqlToSparql","Converter","requireContext","test","action","queryFormat","Error","run","context","has","get","options","singularizeVariables","operation","graphqlToSparqlAlgebra","query"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAlC;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,mBAAD,CAAnC;AACA;AACA;AACA;;;AACA,MAAMF,uBAAN,SAAsCC,kBAAkB,CAACG,gBAAzD,CAA0E;AACtEC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACA,SAAKC,eAAL,GAAuB,IAAIJ,mBAAmB,CAACK,SAAxB,CAAkC;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAlC,CAAvB;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,QAAIA,MAAM,CAACC,WAAP,KAAuB,SAA3B,EAAsC;AAClC,YAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACH;;AACD,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACH,MAAD,EAAS;AACd,UAAMI,OAAO,GAAGJ,MAAM,CAACI,OAAP,IAAkBJ,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAmB,UAAnB,CAAlB,GAAmDL,MAAM,CAACI,OAAP,CAAeE,GAAf,CAAmB,UAAnB,CAAnD,GAAoF,EAApG;AACA,UAAMC,OAAO,GAAG;AACZC,MAAAA,oBAAoB,EAAER,MAAM,CAACI,OAAP,IAAkBJ,MAAM,CAACI,OAAP,CAAeE,GAAf,CAAmB,kDAAnB;AAD5B,KAAhB;AAGA,WAAO;AAAEG,MAAAA,SAAS,EAAE,MAAM,KAAKb,eAAL,CAAqBc,sBAArB,CAA4CV,MAAM,CAACW,KAAnD,EAA0DP,OAA1D,EAAmEG,OAAnE;AAAnB,KAAP;AACH;;AAjBqE;;AAmB1EpB,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlParseGraphql = void 0;\nconst bus_sparql_parse_1 = require(\"@comunica/bus-sparql-parse\");\nconst graphql_to_sparql_1 = require(\"graphql-to-sparql\");\n/**\n * A comunica GraphQL SPARQL Parse Actor.\n */\nclass ActorSparqlParseGraphql extends bus_sparql_parse_1.ActorSparqlParse {\n    constructor(args) {\n        super(args);\n        this.graphqlToSparql = new graphql_to_sparql_1.Converter({ requireContext: true });\n    }\n    async test(action) {\n        if (action.queryFormat !== 'graphql') {\n            throw new Error('This actor can only parse GraphQL queries');\n        }\n        return true;\n    }\n    async run(action) {\n        const context = action.context && action.context.has('@context') ? action.context.get('@context') : {};\n        const options = {\n            singularizeVariables: action.context && action.context.get('@comunica/actor-init-sparql:singularizeVariables'),\n        };\n        return { operation: await this.graphqlToSparql.graphqlToSparqlAlgebra(action.query, context, options) };\n    }\n}\nexports.ActorSparqlParseGraphql = ActorSparqlParseGraphql;\n//# sourceMappingURL=ActorSparqlParseGraphql.js.map"]},"metadata":{},"sourceType":"script"}