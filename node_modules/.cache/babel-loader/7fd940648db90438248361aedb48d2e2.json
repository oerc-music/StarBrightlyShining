{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlSerializeRdf = void 0;\n\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n/**\n * A comunica RDF SPARQL Serialize Actor.\n *\n * It serializes quad streams (for example resulting from a CONSTRUCT query)\n * to an RDF syntax.\n */\n\n\nclass ActorSparqlSerializeRdf extends bus_sparql_serialize_1.ActorSparqlSerialize {\n  constructor(args) {\n    super(args);\n  }\n\n  async testHandle(action, mediaType, context) {\n    // Check if we are provided with a quad stream\n    if (action.type !== 'quads') {\n      throw new Error(`Actor ${this.name} can only handle quad streams`);\n    } // Check if the given media type can be handled\n\n\n    const {\n      mediaTypes\n    } = await this.mediatorMediaTypeCombiner.mediate({\n      context,\n      mediaTypes: true\n    });\n\n    if (!(mediaType in mediaTypes)) {\n      throw new Error(`Actor ${this.name} can not handle media type ${mediaType}. All available types: ${Object.keys(mediaTypes)}`);\n    }\n\n    return true;\n  }\n\n  async runHandle(action, mediaType, context) {\n    // Delegate handling to the mediator\n    return (await this.mediatorRdfSerialize.mediate({\n      context,\n      handle: action,\n      handleMediaType: mediaType\n    })).handle;\n  }\n\n  async testMediaType(context) {\n    return true;\n  }\n\n  async getMediaTypes(context) {\n    return (await this.mediatorMediaTypeCombiner.mediate({\n      context,\n      mediaTypes: true\n    })).mediaTypes;\n  }\n\n  async testMediaTypeFormats(context) {\n    return true;\n  }\n\n  async getMediaTypeFormats(context) {\n    return (await this.mediatorMediaTypeFormatCombiner.mediate({\n      context,\n      mediaTypeFormats: true\n    })).mediaTypeFormats;\n  }\n\n}\n\nexports.ActorSparqlSerializeRdf = ActorSparqlSerializeRdf;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-serialize-rdf/lib/ActorSparqlSerializeRdf.js"],"names":["Object","defineProperty","exports","value","ActorSparqlSerializeRdf","bus_sparql_serialize_1","require","ActorSparqlSerialize","constructor","args","testHandle","action","mediaType","context","type","Error","name","mediaTypes","mediatorMediaTypeCombiner","mediate","keys","runHandle","mediatorRdfSerialize","handle","handleMediaType","testMediaType","getMediaTypes","testMediaTypeFormats","getMediaTypeFormats","mediatorMediaTypeFormatCombiner","mediaTypeFormats"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,sBAAsB,GAAGC,OAAO,CAAC,gCAAD,CAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,uBAAN,SAAsCC,sBAAsB,CAACE,oBAA7D,CAAkF;AAC9EC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACe,QAAVC,UAAU,CAACC,MAAD,EAASC,SAAT,EAAoBC,OAApB,EAA6B;AACzC;AACA,QAAIF,MAAM,CAACG,IAAP,KAAgB,OAApB,EAA6B;AACzB,YAAM,IAAIC,KAAJ,CAAW,SAAQ,KAAKC,IAAK,+BAA7B,CAAN;AACH,KAJwC,CAKzC;;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAiB,MAAM,KAAKC,yBAAL,CAA+BC,OAA/B,CAAuC;AAAEN,MAAAA,OAAF;AAAWI,MAAAA,UAAU,EAAE;AAAvB,KAAvC,CAA7B;;AACA,QAAI,EAAEL,SAAS,IAAIK,UAAf,CAAJ,EAAgC;AAC5B,YAAM,IAAIF,KAAJ,CAAW,SAAQ,KAAKC,IAAK,8BAA6BJ,SAAU,0BAAyBZ,MAAM,CAACoB,IAAP,CAAYH,UAAZ,CAAwB,EAArH,CAAN;AACH;;AACD,WAAO,IAAP;AACH;;AACc,QAATI,SAAS,CAACV,MAAD,EAASC,SAAT,EAAoBC,OAApB,EAA6B;AACxC;AACA,WAAO,CAAC,MAAM,KAAKS,oBAAL,CAA0BH,OAA1B,CAAkC;AAC5CN,MAAAA,OAD4C;AAE5CU,MAAAA,MAAM,EAAEZ,MAFoC;AAG5Ca,MAAAA,eAAe,EAAEZ;AAH2B,KAAlC,CAAP,EAIHW,MAJJ;AAKH;;AACkB,QAAbE,aAAa,CAACZ,OAAD,EAAU;AACzB,WAAO,IAAP;AACH;;AACkB,QAAba,aAAa,CAACb,OAAD,EAAU;AACzB,WAAO,CAAC,MAAM,KAAKK,yBAAL,CAA+BC,OAA/B,CAAuC;AAAEN,MAAAA,OAAF;AAAWI,MAAAA,UAAU,EAAE;AAAvB,KAAvC,CAAP,EAA8EA,UAArF;AACH;;AACyB,QAApBU,oBAAoB,CAACd,OAAD,EAAU;AAChC,WAAO,IAAP;AACH;;AACwB,QAAnBe,mBAAmB,CAACf,OAAD,EAAU;AAC/B,WAAO,CAAC,MAAM,KAAKgB,+BAAL,CAAqCV,OAArC,CAA6C;AAAEN,MAAAA,OAAF;AAAWiB,MAAAA,gBAAgB,EAAE;AAA7B,KAA7C,CAAP,EAA0FA,gBAAjG;AACH;;AAnC6E;;AAqClF5B,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlSerializeRdf = void 0;\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n/**\n * A comunica RDF SPARQL Serialize Actor.\n *\n * It serializes quad streams (for example resulting from a CONSTRUCT query)\n * to an RDF syntax.\n */\nclass ActorSparqlSerializeRdf extends bus_sparql_serialize_1.ActorSparqlSerialize {\n    constructor(args) {\n        super(args);\n    }\n    async testHandle(action, mediaType, context) {\n        // Check if we are provided with a quad stream\n        if (action.type !== 'quads') {\n            throw new Error(`Actor ${this.name} can only handle quad streams`);\n        }\n        // Check if the given media type can be handled\n        const { mediaTypes } = await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true });\n        if (!(mediaType in mediaTypes)) {\n            throw new Error(`Actor ${this.name} can not handle media type ${mediaType}. All available types: ${Object.keys(mediaTypes)}`);\n        }\n        return true;\n    }\n    async runHandle(action, mediaType, context) {\n        // Delegate handling to the mediator\n        return (await this.mediatorRdfSerialize.mediate({\n            context,\n            handle: action,\n            handleMediaType: mediaType,\n        })).handle;\n    }\n    async testMediaType(context) {\n        return true;\n    }\n    async getMediaTypes(context) {\n        return (await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;\n    }\n    async testMediaTypeFormats(context) {\n        return true;\n    }\n    async getMediaTypeFormats(context) {\n        return (await this.mediatorMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;\n    }\n}\nexports.ActorSparqlSerializeRdf = ActorSparqlSerializeRdf;\n//# sourceMappingURL=ActorSparqlSerializeRdf.js.map"]},"metadata":{},"sourceType":"script"}