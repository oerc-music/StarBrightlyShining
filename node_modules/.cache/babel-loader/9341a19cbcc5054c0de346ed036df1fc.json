{"ast":null,"code":"/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nrequire('setimmediate');\n\nconst crypto = self.crypto || self.msCrypto; // TODO: synchronous version no longer supported in browser\n\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  constructor(algorithm) {\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if (!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n\n    if (algorithm === 'sha256') {\n      this.algorithm = {\n        name: 'SHA-256'\n      };\n    } else if (algorithm === 'sha1') {\n      this.algorithm = {\n        name: 'SHA-1'\n      };\n    } else {\n      throw new Error(`Unsupport algorithm \"${algorithm}\".`);\n    }\n\n    this._content = '';\n  }\n\n  update(msg) {\n    this._content += msg;\n  }\n\n  async digest() {\n    const data = new TextEncoder().encode(this._content);\n    const buffer = new Uint8Array(await crypto.subtle.digest(this.algorithm, data)); // return digest in hex\n\n    let hex = '';\n\n    for (let i = 0; i < buffer.length; ++i) {\n      hex += buffer[i].toString(16).padStart(2, '0');\n    }\n\n    return hex;\n  }\n\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-canonize/lib/MessageDigest-browser.js"],"names":["require","crypto","self","msCrypto","module","exports","MessageDigest","constructor","algorithm","subtle","Error","name","_content","update","msg","digest","data","TextEncoder","encode","buffer","Uint8Array","hex","i","length","toString","padStart"],"mappings":"AAAA;AACA;AACA;AACA;;AAEAA,OAAO,CAAC,cAAD,CAAP;;AAEA,MAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,IAAeC,IAAI,CAACC,QAAnC,C,CAEA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,aAAN,CAAoB;AACnC;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB;AACA;AACA,QAAG,EAAEP,MAAM,IAAIA,MAAM,CAACQ,MAAnB,CAAH,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,QAAGF,SAAS,KAAK,QAAjB,EAA2B;AACzB,WAAKA,SAAL,GAAiB;AAACG,QAAAA,IAAI,EAAE;AAAP,OAAjB;AACD,KAFD,MAEO,IAAGH,SAAS,KAAK,MAAjB,EAAyB;AAC9B,WAAKA,SAAL,GAAiB;AAACG,QAAAA,IAAI,EAAE;AAAP,OAAjB;AACD,KAFM,MAEA;AACL,YAAM,IAAID,KAAJ,CAAW,wBAAuBF,SAAU,IAA5C,CAAN;AACD;;AACD,SAAKI,QAAL,GAAgB,EAAhB;AACD;;AAEDC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACV,SAAKF,QAAL,IAAiBE,GAAjB;AACD;;AAEW,QAANC,MAAM,GAAG;AACb,UAAMC,IAAI,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyB,KAAKN,QAA9B,CAAb;AACA,UAAMO,MAAM,GAAG,IAAIC,UAAJ,CACb,MAAMnB,MAAM,CAACQ,MAAP,CAAcM,MAAd,CAAqB,KAAKP,SAA1B,EAAqCQ,IAArC,CADO,CAAf,CAFa,CAIb;;AACA,QAAIK,GAAG,GAAG,EAAV;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,MAAM,CAACI,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrCD,MAAAA,GAAG,IAAIF,MAAM,CAACG,CAAD,CAAN,CAAUE,QAAV,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,CAAhC,EAAmC,GAAnC,CAAP;AACD;;AACD,WAAOJ,GAAP;AACD;;AApCkC,CAArC","sourcesContent":["/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nrequire('setimmediate');\n\nconst crypto = self.crypto || self.msCrypto;\n\n// TODO: synchronous version no longer supported in browser\n\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  constructor(algorithm) {\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if(!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n    if(algorithm === 'sha256') {\n      this.algorithm = {name: 'SHA-256'};\n    } else if(algorithm === 'sha1') {\n      this.algorithm = {name: 'SHA-1'};\n    } else {\n      throw new Error(`Unsupport algorithm \"${algorithm}\".`);\n    }\n    this._content = '';\n  }\n\n  update(msg) {\n    this._content += msg;\n  }\n\n  async digest() {\n    const data = new TextEncoder().encode(this._content);\n    const buffer = new Uint8Array(\n      await crypto.subtle.digest(this.algorithm, data));\n    // return digest in hex\n    let hex = '';\n    for(let i = 0; i < buffer.length; ++i) {\n      hex += buffer[i].toString(16).padStart(2, '0');\n    }\n    return hex;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}