{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectiveNodeHandlerPlural = void 0;\n\nconst IConvertContext_1 = require(\"../../IConvertContext\");\n\nconst DirectiveNodeHandlerAdapter_1 = require(\"./DirectiveNodeHandlerAdapter\");\n/**\n * A handler for plural directives.\n */\n\n\nclass DirectiveNodeHandlerPlural extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {\n  constructor(util, settings) {\n    super('plural', util, settings);\n  }\n\n  handle(directiveContext, convertContext) {\n    if (this.isDirectiveScopeAll(directiveContext.directive)) {\n      convertContext.singularizeState = IConvertContext_1.SingularizeState.PLURAL;\n    } // Delete the existing entry, as this may have already been set before if we were in a single scope.\n\n\n    delete convertContext.singularizeVariables[this.util.nameToVariable(directiveContext.fieldLabel, convertContext).value];\n    return {};\n  }\n\n}\n\nexports.DirectiveNodeHandlerPlural = DirectiveNodeHandlerPlural;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerPlural.js"],"names":["Object","defineProperty","exports","value","DirectiveNodeHandlerPlural","IConvertContext_1","require","DirectiveNodeHandlerAdapter_1","DirectiveNodeHandlerAdapter","constructor","util","settings","handle","directiveContext","convertContext","isDirectiveScopeAll","directive","singularizeState","SingularizeState","PLURAL","singularizeVariables","nameToVariable","fieldLabel"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,0BAAR,GAAqC,KAAK,CAA1C;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AACA,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,+BAAD,CAA7C;AACA;AACA;AACA;;;AACA,MAAMF,0BAAN,SAAyCG,6BAA6B,CAACC,2BAAvE,CAAmG;AAC/FC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAM,QAAN,EAAgBD,IAAhB,EAAsBC,QAAtB;AACH;;AACDC,EAAAA,MAAM,CAACC,gBAAD,EAAmBC,cAAnB,EAAmC;AACrC,QAAI,KAAKC,mBAAL,CAAyBF,gBAAgB,CAACG,SAA1C,CAAJ,EAA0D;AACtDF,MAAAA,cAAc,CAACG,gBAAf,GAAkCZ,iBAAiB,CAACa,gBAAlB,CAAmCC,MAArE;AACH,KAHoC,CAIrC;;;AACA,WAAOL,cAAc,CAACM,oBAAf,CAAoC,KAAKV,IAAL,CAAUW,cAAV,CAAyBR,gBAAgB,CAACS,UAA1C,EAAsDR,cAAtD,EAAsEX,KAA1G,CAAP;AACA,WAAO,EAAP;AACH;;AAX8F;;AAanGD,OAAO,CAACE,0BAAR,GAAqCA,0BAArC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DirectiveNodeHandlerPlural = void 0;\nconst IConvertContext_1 = require(\"../../IConvertContext\");\nconst DirectiveNodeHandlerAdapter_1 = require(\"./DirectiveNodeHandlerAdapter\");\n/**\n * A handler for plural directives.\n */\nclass DirectiveNodeHandlerPlural extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {\n    constructor(util, settings) {\n        super('plural', util, settings);\n    }\n    handle(directiveContext, convertContext) {\n        if (this.isDirectiveScopeAll(directiveContext.directive)) {\n            convertContext.singularizeState = IConvertContext_1.SingularizeState.PLURAL;\n        }\n        // Delete the existing entry, as this may have already been set before if we were in a single scope.\n        delete convertContext.singularizeVariables[this.util.nameToVariable(directiveContext.fieldLabel, convertContext).value];\n        return {};\n    }\n}\nexports.DirectiveNodeHandlerPlural = DirectiveNodeHandlerPlural;\n//# sourceMappingURL=DirectiveNodeHandlerPlural.js.map"]},"metadata":{},"sourceType":"script"}