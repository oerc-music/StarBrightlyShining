{"ast":null,"code":"var invariant = require('invariant');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\nvar toString = Object.prototype.toString;\n\nvar type = function (obj) {\n  return toString.call(obj).slice(8, -1);\n};\n\nvar assign = Object.assign ||\n/* istanbul ignore next */\nfunction assign(target, source) {\n  getAllKeys(source).forEach(function (key) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ? function (obj) {\n  return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj));\n} :\n/* istanbul ignore next */\nfunction (obj) {\n  return Object.keys(obj);\n};\n/* istanbul ignore next */\n\nfunction copy(object) {\n  if (Array.isArray(object)) {\n    return assign(object.constructor(object.length), object);\n  } else if (type(object) === 'Map') {\n    return new Map(object);\n  } else if (type(object) === 'Set') {\n    return new Set(object);\n  } else if (object && typeof object === 'object') {\n    var prototype = Object.getPrototypeOf(object);\n    return assign(Object.create(prototype), object);\n  } else {\n    return object;\n  }\n}\n\nfunction newContext() {\n  var commands = assign({}, defaultCommands);\n\n  update.extend = function (directive, fn) {\n    commands[directive] = fn;\n  };\n\n  update.isEquals = function (a, b) {\n    return a === b;\n  };\n\n  return update;\n\n  function update(object, spec) {\n    if (typeof spec === 'function') {\n      spec = {\n        $apply: spec\n      };\n    }\n\n    if (!(Array.isArray(object) && Array.isArray(spec))) {\n      invariant(!Array.isArray(spec), 'update(): You provided an invalid spec to update(). The spec may ' + 'not contain an array except as the value of $set, $push, $unshift, ' + '$splice or any custom command allowing an array value.');\n    }\n\n    invariant(typeof spec === 'object' && spec !== null, 'update(): You provided an invalid spec to update(). The spec and ' + 'every included key path must be plain objects containing one of the ' + 'following commands: %s.', Object.keys(commands).join(', '));\n    var nextObject = object;\n    var index, key;\n    getAllKeys(spec).forEach(function (key) {\n      if (hasOwnProperty.call(commands, key)) {\n        var objectWasNextObject = object === nextObject;\n        nextObject = commands[key](spec[key], nextObject, spec, object);\n\n        if (objectWasNextObject && update.isEquals(nextObject, object)) {\n          nextObject = object;\n        }\n      } else {\n        var nextValueForKey = type(object) === 'Map' ? update(object.get(key), spec[key]) : update(object[key], spec[key]);\n        var nextObjectValue = type(nextObject) === 'Map' ? nextObject.get(key) : nextObject[key];\n\n        if (!update.isEquals(nextValueForKey, nextObjectValue) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n\n          if (type(nextObject) === 'Map') {\n            nextObject.set(key, nextValueForKey);\n          } else {\n            nextObject[key] = nextValueForKey;\n          }\n        }\n      }\n    });\n    return nextObject;\n  }\n}\n\nvar defaultCommands = {\n  $push: function (value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: function (value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: function (value, nextObject, spec, originalObject) {\n    invariantSplices(nextObject, spec);\n    value.forEach(function (args) {\n      invariantSplice(args);\n      if (nextObject === originalObject && args.length) nextObject = copy(originalObject);\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: function (value, nextObject, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: function (targets, nextObject) {\n    invariantSpecArray(targets, '$toggle');\n    var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n    targets.forEach(function (target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n    return nextObjectCopy;\n  },\n  $unset: function (value, nextObject, spec, originalObject) {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function (key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: function (value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(value, '$add');\n\n    if (type(nextObject) === 'Map') {\n      value.forEach(function (pair) {\n        var key = pair[0];\n        var value = pair[1];\n        if (nextObject === originalObject && nextObject.get(key) !== value) nextObject = copy(originalObject);\n        nextObject.set(key, value);\n      });\n    } else {\n      value.forEach(function (value) {\n        if (nextObject === originalObject && !nextObject.has(value)) nextObject = copy(originalObject);\n        nextObject.add(value);\n      });\n    }\n\n    return nextObject;\n  },\n  $remove: function (value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach(function (key) {\n      if (nextObject === originalObject && nextObject.has(key)) nextObject = copy(originalObject);\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: function (value, nextObject, spec, originalObject) {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach(function (key) {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: function (value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\nvar contextForExport = newContext();\nmodule.exports = contextForExport;\nmodule.exports.default = contextForExport;\nmodule.exports.newContext = newContext; // invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(Array.isArray(value), 'update(): expected target of %s to be an array; got %s.', command, value);\n  invariantSpecArray(spec[command], command);\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(Array.isArray(spec), 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, spec);\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(Array.isArray(value), 'Expected $splice target to be an array; got %s', value);\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(Array.isArray(value), 'update(): expected spec of $splice to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', value);\n}\n\nfunction invariantApply(fn) {\n  invariant(typeof fn === 'function', 'update(): expected spec of $apply to be a function; got %s.', fn);\n}\n\nfunction invariantSet(spec) {\n  invariant(Object.keys(spec).length === 1, 'Cannot have more than one key in an object with $set');\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(specValue && typeof specValue === 'object', 'update(): $merge expects a spec of type \\'object\\'; got %s', specValue);\n  invariant(target && typeof target === 'object', 'update(): $merge expects a target of type \\'object\\'; got %s', target);\n}\n\nfunction invariantMapOrSet(target, command) {\n  var typeOfTarget = type(target);\n  invariant(typeOfTarget === 'Map' || typeOfTarget === 'Set', 'update(): %s expects a target of type Set or Map; got %s', command, typeOfTarget);\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/meld-clients-core/node_modules/immutability-helper/index.js"],"names":["invariant","require","hasOwnProperty","Object","prototype","splice","Array","toString","type","obj","call","slice","assign","target","source","getAllKeys","forEach","key","getOwnPropertySymbols","keys","concat","copy","object","isArray","constructor","length","Map","Set","getPrototypeOf","create","newContext","commands","defaultCommands","update","extend","directive","fn","isEquals","a","b","spec","$apply","join","nextObject","index","objectWasNextObject","nextValueForKey","get","nextObjectValue","set","$push","value","invariantPushAndUnshift","$unshift","$splice","originalObject","invariantSplices","args","invariantSplice","apply","$set","invariantSet","$toggle","targets","invariantSpecArray","nextObjectCopy","$unset","$add","invariantMapOrSet","pair","has","add","$remove","delete","$merge","invariantMerge","original","invariantApply","contextForExport","module","exports","default","command","specValue","typeOfTarget"],"mappings":"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","sourcesContent":["var invariant = require('invariant');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\n\nvar toString = Object.prototype.toString\nvar type = function(obj) {\n  return toString.call(obj).slice(8, -1);\n}\n\nvar assign = Object.assign || /* istanbul ignore next */ function assign(target, source) {\n  getAllKeys(source).forEach(function(key) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ?\n  function(obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)) } :\n  /* istanbul ignore next */ function(obj) { return Object.keys(obj) };\n\n/* istanbul ignore next */\nfunction copy(object) {\n  if (Array.isArray(object)) {\n    return assign(object.constructor(object.length), object)\n  } else if (type(object) === 'Map') {\n    return new Map(object)\n  } else if (type(object) === 'Set') {\n    return new Set(object)\n  } else if (object && typeof object === 'object') {\n    var prototype = Object.getPrototypeOf(object);\n    return assign(Object.create(prototype), object);\n  } else {\n    return object;\n  }\n}\n\nfunction newContext() {\n  var commands = assign({}, defaultCommands);\n  update.extend = function(directive, fn) {\n    commands[directive] = fn;\n  };\n  update.isEquals = function(a, b) { return a === b; };\n\n  return update;\n\n  function update(object, spec) {\n    if (typeof spec === 'function') {\n      spec = { $apply: spec };\n    }\n\n    if (!(Array.isArray(object) && Array.isArray(spec))) {\n      invariant(\n        !Array.isArray(spec),\n        'update(): You provided an invalid spec to update(). The spec may ' +\n        'not contain an array except as the value of $set, $push, $unshift, ' +\n        '$splice or any custom command allowing an array value.'\n      );\n    }\n\n    invariant(\n      typeof spec === 'object' && spec !== null,\n      'update(): You provided an invalid spec to update(). The spec and ' +\n      'every included key path must be plain objects containing one of the ' +\n      'following commands: %s.',\n      Object.keys(commands).join(', ')\n    );\n\n    var nextObject = object;\n    var index, key;\n    getAllKeys(spec).forEach(function(key) {\n      if (hasOwnProperty.call(commands, key)) {\n        var objectWasNextObject = object === nextObject;\n        nextObject = commands[key](spec[key], nextObject, spec, object);\n        if (objectWasNextObject && update.isEquals(nextObject, object)) {\n          nextObject = object;\n        }\n      } else {\n        var nextValueForKey =\n          type(object) === 'Map'\n            ? update(object.get(key), spec[key])\n            : update(object[key], spec[key]);\n        var nextObjectValue =\n          type(nextObject) === 'Map'\n              ? nextObject.get(key)\n              : nextObject[key];\n        if (!update.isEquals(nextValueForKey, nextObjectValue) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n          if (type(nextObject) === 'Map') {\n            nextObject.set(key, nextValueForKey);\n          } else {\n            nextObject[key] = nextValueForKey;\n          }\n        }\n      }\n    })\n    return nextObject;\n  }\n\n}\n\nvar defaultCommands = {\n  $push: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: function(value, nextObject, spec, originalObject) {\n    invariantSplices(nextObject, spec);\n    value.forEach(function(args) {\n      invariantSplice(args);\n      if (nextObject === originalObject && args.length) nextObject = copy(originalObject);\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: function(value, nextObject, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: function(targets, nextObject) {\n    invariantSpecArray(targets, '$toggle');\n    var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n\n    targets.forEach(function(target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n\n    return nextObjectCopy;\n  },\n  $unset: function(value, nextObject, spec, originalObject) {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function(key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(value, '$add');\n    if (type(nextObject) === 'Map') {\n      value.forEach(function(pair) {\n        var key = pair[0];\n        var value = pair[1];\n        if (nextObject === originalObject && nextObject.get(key) !== value) nextObject = copy(originalObject);\n        nextObject.set(key, value);\n      });\n    } else {\n      value.forEach(function(value) {\n        if (nextObject === originalObject && !nextObject.has(value)) nextObject = copy(originalObject);\n        nextObject.add(value);\n      });\n    }\n    return nextObject;\n  },\n  $remove: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach(function(key) {\n      if (nextObject === originalObject && nextObject.has(key)) nextObject = copy(originalObject);\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: function(value, nextObject, spec, originalObject) {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach(function(key) {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: function(value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\n\nvar contextForExport = newContext();\n\nmodule.exports = contextForExport;\nmodule.exports.default = contextForExport;\nmodule.exports.newContext = newContext;\n\n// invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  );\n  invariantSpecArray(spec[command], command)\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(\n    Array.isArray(spec),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    spec\n  );\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(\n    Array.isArray(value),\n    'Expected $splice target to be an array; got %s',\n    value\n  );\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected spec of $splice to be an array of arrays; got %s. ' +\n    'Did you forget to wrap your parameters in an array?',\n    value\n  );\n}\n\nfunction invariantApply(fn) {\n  invariant(\n    typeof fn === 'function',\n    'update(): expected spec of $apply to be a function; got %s.',\n    fn\n  );\n}\n\nfunction invariantSet(spec) {\n  invariant(\n    Object.keys(spec).length === 1,\n    'Cannot have more than one key in an object with $set'\n  );\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(\n    specValue && typeof specValue === 'object',\n    'update(): $merge expects a spec of type \\'object\\'; got %s',\n    specValue\n  );\n  invariant(\n    target && typeof target === 'object',\n    'update(): $merge expects a target of type \\'object\\'; got %s',\n    target\n  );\n}\n\nfunction invariantMapOrSet(target, command) {\n  var typeOfTarget = type(target);\n  invariant(\n    typeOfTarget === 'Map' || typeOfTarget === 'Set',\n    'update(): %s expects a target of type Set or Map; got %s',\n    command,\n    typeOfTarget\n  );\n}\n"]},"metadata":{},"sourceType":"script"}