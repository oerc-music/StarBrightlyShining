{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfUpdateQuadsDestination = void 0;\n\nconst ActorRdfUpdateQuads_1 = require(\"./ActorRdfUpdateQuads\");\n/**\n * A base implementation for rdf-update-quads events\n * that wraps around an {@link IQuadDestination}.\n *\n * @see IQuadDestination\n */\n\n\nclass ActorRdfUpdateQuadsDestination extends ActorRdfUpdateQuads_1.ActorRdfUpdateQuads {\n  async test(action) {\n    return true;\n  }\n\n  async run(action) {\n    const destination = await this.getDestination(action.context);\n    return await this.getOutput(destination, action, action.context);\n  }\n  /**\n   * Get the output of the given action on a destination.\n   * @param {IQuadDestination} destination A quad destination, possibly lazy.\n   * @param {IActionRdfUpdateQuads} action The action.\n   * @param {ActionContext} context Optional context data.\n   */\n\n\n  async getOutput(destination, action, context) {\n    const updateResult = Promise.all([action.quadStreamInsert ? destination.insert(action.quadStreamInsert) : Promise.resolve(), action.quadStreamDelete ? destination.delete(action.quadStreamDelete) : Promise.resolve(), action.deleteGraphs ? destination.deleteGraphs(action.deleteGraphs.graphs, action.deleteGraphs.requireExistence, action.deleteGraphs.dropGraphs) : Promise.resolve(), action.createGraphs ? destination.createGraphs(action.createGraphs.graphs, action.createGraphs.requireNonExistence) : Promise.resolve()]).then(() => {// Return void\n    });\n    return {\n      updateResult\n    };\n  }\n\n}\n\nexports.ActorRdfUpdateQuadsDestination = ActorRdfUpdateQuadsDestination;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuadsDestination.js"],"names":["Object","defineProperty","exports","value","ActorRdfUpdateQuadsDestination","ActorRdfUpdateQuads_1","require","ActorRdfUpdateQuads","test","action","run","destination","getDestination","context","getOutput","updateResult","Promise","all","quadStreamInsert","insert","resolve","quadStreamDelete","delete","deleteGraphs","graphs","requireExistence","dropGraphs","createGraphs","requireNonExistence","then"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,8BAAR,GAAyC,KAAK,CAA9C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,8BAAN,SAA6CC,qBAAqB,CAACE,mBAAnE,CAAuF;AACzE,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACD,MAAD,EAAS;AACd,UAAME,WAAW,GAAG,MAAM,KAAKC,cAAL,CAAoBH,MAAM,CAACI,OAA3B,CAA1B;AACA,WAAO,MAAM,KAAKC,SAAL,CAAeH,WAAf,EAA4BF,MAA5B,EAAoCA,MAAM,CAACI,OAA3C,CAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACmB,QAATC,SAAS,CAACH,WAAD,EAAcF,MAAd,EAAsBI,OAAtB,EAA+B;AAC1C,UAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAY,CAC7BR,MAAM,CAACS,gBAAP,GAA0BP,WAAW,CAACQ,MAAZ,CAAmBV,MAAM,CAACS,gBAA1B,CAA1B,GAAwEF,OAAO,CAACI,OAAR,EAD3C,EAE7BX,MAAM,CAACY,gBAAP,GAA0BV,WAAW,CAACW,MAAZ,CAAmBb,MAAM,CAACY,gBAA1B,CAA1B,GAAwEL,OAAO,CAACI,OAAR,EAF3C,EAG7BX,MAAM,CAACc,YAAP,GACIZ,WAAW,CAACY,YAAZ,CAAyBd,MAAM,CAACc,YAAP,CAAoBC,MAA7C,EAAqDf,MAAM,CAACc,YAAP,CAAoBE,gBAAzE,EAA2FhB,MAAM,CAACc,YAAP,CAAoBG,UAA/G,CADJ,GAEIV,OAAO,CAACI,OAAR,EALyB,EAM7BX,MAAM,CAACkB,YAAP,GACIhB,WAAW,CAACgB,YAAZ,CAAyBlB,MAAM,CAACkB,YAAP,CAAoBH,MAA7C,EAAqDf,MAAM,CAACkB,YAAP,CAAoBC,mBAAzE,CADJ,GAEIZ,OAAO,CAACI,OAAR,EARyB,CAAZ,EASlBS,IATkB,CASb,MAAM,CACV;AACH,KAXoB,CAArB;AAYA,WAAO;AAAEd,MAAAA;AAAF,KAAP;AACH;;AA5BkF;;AA8BvFb,OAAO,CAACE,8BAAR,GAAyCA,8BAAzC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfUpdateQuadsDestination = void 0;\nconst ActorRdfUpdateQuads_1 = require(\"./ActorRdfUpdateQuads\");\n/**\n * A base implementation for rdf-update-quads events\n * that wraps around an {@link IQuadDestination}.\n *\n * @see IQuadDestination\n */\nclass ActorRdfUpdateQuadsDestination extends ActorRdfUpdateQuads_1.ActorRdfUpdateQuads {\n    async test(action) {\n        return true;\n    }\n    async run(action) {\n        const destination = await this.getDestination(action.context);\n        return await this.getOutput(destination, action, action.context);\n    }\n    /**\n     * Get the output of the given action on a destination.\n     * @param {IQuadDestination} destination A quad destination, possibly lazy.\n     * @param {IActionRdfUpdateQuads} action The action.\n     * @param {ActionContext} context Optional context data.\n     */\n    async getOutput(destination, action, context) {\n        const updateResult = Promise.all([\n            action.quadStreamInsert ? destination.insert(action.quadStreamInsert) : Promise.resolve(),\n            action.quadStreamDelete ? destination.delete(action.quadStreamDelete) : Promise.resolve(),\n            action.deleteGraphs ?\n                destination.deleteGraphs(action.deleteGraphs.graphs, action.deleteGraphs.requireExistence, action.deleteGraphs.dropGraphs) :\n                Promise.resolve(),\n            action.createGraphs ?\n                destination.createGraphs(action.createGraphs.graphs, action.createGraphs.requireNonExistence) :\n                Promise.resolve(),\n        ]).then(() => {\n            // Return void\n        });\n        return { updateResult };\n    }\n}\nexports.ActorRdfUpdateQuadsDestination = ActorRdfUpdateQuadsDestination;\n//# sourceMappingURL=ActorRdfUpdateQuadsDestination.js.map"]},"metadata":{},"sourceType":"script"}