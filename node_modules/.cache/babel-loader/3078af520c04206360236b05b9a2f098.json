{"ast":null,"code":"/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict'; // TODO: convert to ES6 iterable?\n\nmodule.exports = class Permuter {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.current = list.sort(); // indicates whether there are more permutations\n\n    this.done = false; // directional info for permutation algorithm\n\n    this.dir = new Map();\n\n    for (let i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n\n\n  hasNext() {\n    return !this.done;\n  }\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n\n\n  next() {\n    // copy current permutation to return it\n    const {\n      current,\n      dir\n    } = this;\n    const rval = current.slice();\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n\n    let k = null;\n    let pos = 0;\n    const length = current.length;\n\n    for (let i = 0; i < length; ++i) {\n      const element = current[i];\n      const left = dir.get(element);\n\n      if ((k === null || element > k) && (left && i > 0 && element > current[i - 1] || !left && i < length - 1 && element > current[i + 1])) {\n        k = element;\n        pos = i;\n      }\n    } // no more permutations\n\n\n    if (k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = dir.get(k) ? pos - 1 : pos + 1;\n      current[pos] = current[swap];\n      current[swap] = k; // reverse the direction of all elements larger than k\n\n      for (const element of current) {\n        if (element > k) {\n          dir.set(element, !dir.get(element));\n        }\n      }\n    }\n\n    return rval;\n  }\n\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-canonize/lib/Permuter.js"],"names":["module","exports","Permuter","constructor","list","current","sort","done","dir","Map","i","length","set","hasNext","next","rval","slice","k","pos","element","left","get","swap"],"mappings":"AAAA;AACA;AACA;AACA,a,CAEA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,CAAe;AAC9B;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AACA,SAAKC,OAAL,GAAeD,IAAI,CAACE,IAAL,EAAf,CAFgB,CAGhB;;AACA,SAAKC,IAAL,GAAY,KAAZ,CAJgB,CAKhB;;AACA,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,IAAI,CAACO,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnC,WAAKF,GAAL,CAASI,GAAT,CAAaR,IAAI,CAACM,CAAD,CAAjB,EAAsB,IAAtB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEG,EAAAA,OAAO,GAAG;AACR,WAAO,CAAC,KAAKN,IAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,IAAI,GAAG;AACL;AACA,UAAM;AAACT,MAAAA,OAAD;AAAUG,MAAAA;AAAV,QAAiB,IAAvB;AACA,UAAMO,IAAI,GAAGV,OAAO,CAACW,KAAR,EAAb;AAEA;AACJ;AAEI;AACA;;AACA,QAAIC,CAAC,GAAG,IAAR;AACA,QAAIC,GAAG,GAAG,CAAV;AACA,UAAMP,MAAM,GAAGN,OAAO,CAACM,MAAvB;;AACA,SAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGC,MAAnB,EAA2B,EAAED,CAA7B,EAAgC;AAC9B,YAAMS,OAAO,GAAGd,OAAO,CAACK,CAAD,CAAvB;AACA,YAAMU,IAAI,GAAGZ,GAAG,CAACa,GAAJ,CAAQF,OAAR,CAAb;;AACA,UAAG,CAACF,CAAC,KAAK,IAAN,IAAcE,OAAO,GAAGF,CAAzB,MACCG,IAAI,IAAIV,CAAC,GAAG,CAAZ,IAAiBS,OAAO,GAAGd,OAAO,CAACK,CAAC,GAAG,CAAL,CAAnC,IACA,CAACU,IAAD,IAASV,CAAC,GAAIC,MAAM,GAAG,CAAvB,IAA6BQ,OAAO,GAAGd,OAAO,CAACK,CAAC,GAAG,CAAL,CAF9C,CAAH,EAE4D;AAC1DO,QAAAA,CAAC,GAAGE,OAAJ;AACAD,QAAAA,GAAG,GAAGR,CAAN;AACD;AACF,KAtBI,CAwBL;;;AACA,QAAGO,CAAC,KAAK,IAAT,EAAe;AACb,WAAKV,IAAL,GAAY,IAAZ;AACD,KAFD,MAEO;AACL;AACA,YAAMe,IAAI,GAAGd,GAAG,CAACa,GAAJ,CAAQJ,CAAR,IAAaC,GAAG,GAAG,CAAnB,GAAuBA,GAAG,GAAG,CAA1C;AACAb,MAAAA,OAAO,CAACa,GAAD,CAAP,GAAeb,OAAO,CAACiB,IAAD,CAAtB;AACAjB,MAAAA,OAAO,CAACiB,IAAD,CAAP,GAAgBL,CAAhB,CAJK,CAML;;AACA,WAAI,MAAME,OAAV,IAAqBd,OAArB,EAA8B;AAC5B,YAAGc,OAAO,GAAGF,CAAb,EAAgB;AACdT,UAAAA,GAAG,CAACI,GAAJ,CAAQO,OAAR,EAAiB,CAACX,GAAG,CAACa,GAAJ,CAAQF,OAAR,CAAlB;AACD;AACF;AACF;;AAED,WAAOJ,IAAP;AACD;;AA5E6B,CAAhC","sourcesContent":["/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n// TODO: convert to ES6 iterable?\n\nmodule.exports = class Permuter {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.current = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.dir = new Map();\n    for(let i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation to return it\n    const {current, dir} = this;\n    const rval = current.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = current.length;\n    for(let i = 0; i < length; ++i) {\n      const element = current[i];\n      const left = dir.get(element);\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > current[i - 1]) ||\n        (!left && i < (length - 1) && element > current[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = dir.get(k) ? pos - 1 : pos + 1;\n      current[pos] = current[swap];\n      current[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(const element of current) {\n        if(element > k) {\n          dir.set(element, !dir.get(element));\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}