{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfMetadataExtractQuery = void 0;\n\nconst graphql_ld_1 = require(\"graphql-ld\");\n\nconst rdf_store_stream_1 = require(\"rdf-store-stream\");\n\nconst ActorRdfMetadataExtract_1 = require(\"./ActorRdfMetadataExtract\");\n\nconst GraphQlQueryEngine_1 = require(\"./GraphQlQueryEngine\");\n/**\n * An {@link ActorRdfMetadataExtract} that extracts metadata based on a GraphQL-LD query.\n *\n * It exposes the {@link #queryData} method using which a query can be applied over the metadata stream.\n * For efficiency reasons, the query (and JSON-LD context) must be passed via the actor constructor\n * so that these can be pre-compiled.\n *\n * @see ActorRdfMetadataExtract\n */\n\n\nclass ActorRdfMetadataExtractQuery extends ActorRdfMetadataExtract_1.ActorRdfMetadataExtract {\n  constructor(context, query, args) {\n    super(args); // Pre-parse GraphQL-LD query\n\n    this.graphqlClient = new graphql_ld_1.Client({\n      context,\n      queryEngine: new GraphQlQueryEngine_1.GraphQlQueryEngine(this.queryEngine)\n    });\n    this.sparqlOperation = this.graphqlClient.graphQlToSparql({\n      query\n    });\n  }\n  /**\n   * Execute the configured query on the given metadata stream.\n   * @param {RDF.Stream} dataStream A quad stream to query on.\n   * @return The GraphQL query results.\n   */\n\n\n  async queryData(dataStream, initialBindings) {\n    // Load metadata quads into store\n    const store = await rdf_store_stream_1.storeStream(dataStream); // Execute query against out in-memory store\n\n    const {\n      data\n    } = await this.graphqlClient.query(Object.assign(Object.assign({}, await this.sparqlOperation), {\n      queryEngineOptions: {\n        source: {\n          type: 'rdfjsSource',\n          value: store\n        },\n        initialBindings\n      }\n    }));\n    return data;\n  }\n\n}\n\nexports.ActorRdfMetadataExtractQuery = ActorRdfMetadataExtractQuery;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-metadata-extract/lib/ActorRdfMetadataExtractQuery.js"],"names":["Object","defineProperty","exports","value","ActorRdfMetadataExtractQuery","graphql_ld_1","require","rdf_store_stream_1","ActorRdfMetadataExtract_1","GraphQlQueryEngine_1","ActorRdfMetadataExtract","constructor","context","query","args","graphqlClient","Client","queryEngine","GraphQlQueryEngine","sparqlOperation","graphQlToSparql","queryData","dataStream","initialBindings","store","storeStream","data","assign","queryEngineOptions","source","type"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,4BAAR,GAAuC,KAAK,CAA5C;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,YAAD,CAA5B;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,2BAAD,CAAzC;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,sBAAD,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,4BAAN,SAA2CI,yBAAyB,CAACE,uBAArE,CAA6F;AACzFC,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AAC9B,UAAMA,IAAN,EAD8B,CAE9B;;AACA,SAAKC,aAAL,GAAqB,IAAIV,YAAY,CAACW,MAAjB,CAAwB;AACzCJ,MAAAA,OADyC;AAEzCK,MAAAA,WAAW,EAAE,IAAIR,oBAAoB,CAACS,kBAAzB,CAA4C,KAAKD,WAAjD;AAF4B,KAAxB,CAArB;AAIA,SAAKE,eAAL,GAAuB,KAAKJ,aAAL,CAAmBK,eAAnB,CAAmC;AAAEP,MAAAA;AAAF,KAAnC,CAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACmB,QAATQ,SAAS,CAACC,UAAD,EAAaC,eAAb,EAA8B;AACzC;AACA,UAAMC,KAAK,GAAG,MAAMjB,kBAAkB,CAACkB,WAAnB,CAA+BH,UAA/B,CAApB,CAFyC,CAGzC;;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAM,KAAKX,aAAL,CAAmBF,KAAnB,CAAyBb,MAAM,CAAC2B,MAAP,CAAc3B,MAAM,CAAC2B,MAAP,CAAc,EAAd,EAAkB,MAAM,KAAKR,eAA7B,CAAd,EAA6D;AAAES,MAAAA,kBAAkB,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,aAAR;AAAuB3B,UAAAA,KAAK,EAAEqB;AAA9B,SAAV;AAAiDD,QAAAA;AAAjD;AAAtB,KAA7D,CAAzB,CAAvB;AACA,WAAOG,IAAP;AACH;;AArBwF;;AAuB7FxB,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfMetadataExtractQuery = void 0;\nconst graphql_ld_1 = require(\"graphql-ld\");\nconst rdf_store_stream_1 = require(\"rdf-store-stream\");\nconst ActorRdfMetadataExtract_1 = require(\"./ActorRdfMetadataExtract\");\nconst GraphQlQueryEngine_1 = require(\"./GraphQlQueryEngine\");\n/**\n * An {@link ActorRdfMetadataExtract} that extracts metadata based on a GraphQL-LD query.\n *\n * It exposes the {@link #queryData} method using which a query can be applied over the metadata stream.\n * For efficiency reasons, the query (and JSON-LD context) must be passed via the actor constructor\n * so that these can be pre-compiled.\n *\n * @see ActorRdfMetadataExtract\n */\nclass ActorRdfMetadataExtractQuery extends ActorRdfMetadataExtract_1.ActorRdfMetadataExtract {\n    constructor(context, query, args) {\n        super(args);\n        // Pre-parse GraphQL-LD query\n        this.graphqlClient = new graphql_ld_1.Client({\n            context,\n            queryEngine: new GraphQlQueryEngine_1.GraphQlQueryEngine(this.queryEngine),\n        });\n        this.sparqlOperation = this.graphqlClient.graphQlToSparql({ query });\n    }\n    /**\n     * Execute the configured query on the given metadata stream.\n     * @param {RDF.Stream} dataStream A quad stream to query on.\n     * @return The GraphQL query results.\n     */\n    async queryData(dataStream, initialBindings) {\n        // Load metadata quads into store\n        const store = await rdf_store_stream_1.storeStream(dataStream);\n        // Execute query against out in-memory store\n        const { data } = await this.graphqlClient.query(Object.assign(Object.assign({}, await this.sparqlOperation), { queryEngineOptions: { source: { type: 'rdfjsSource', value: store }, initialBindings } }));\n        return data;\n    }\n}\nexports.ActorRdfMetadataExtractQuery = ActorRdfMetadataExtractQuery;\n//# sourceMappingURL=ActorRdfMetadataExtractQuery.js.map"]},"metadata":{},"sourceType":"script"}