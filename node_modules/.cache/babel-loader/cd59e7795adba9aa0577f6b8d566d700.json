{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectiveNodeHandlerAdapter = void 0;\n/**\n * An abstract handler for GraphQL directives.\n */\n\nclass DirectiveNodeHandlerAdapter {\n  constructor(targetKind, util, settings) {\n    this.targetKind = targetKind;\n    this.util = util;\n    this.settings = settings;\n  }\n  /**\n   * Get the value of the 'if' argument in a directive.\n   * @param {DirectiveNode} directive A directive.\n   * @param {IConvertContext} convertContext A convert context.\n   * @return {Term} The term.\n   */\n\n\n  getDirectiveConditionalValue(directive, convertContext) {\n    const arg = this.util.getArgument(directive.arguments, 'if');\n\n    if (!arg) {\n      throw new Error(`The directive ${directive.name.value} is missing an if-argument.`);\n    }\n\n    const subValue = this.util.handleNodeValue(arg.value, arg.name.value, convertContext);\n\n    if (subValue.terms.length !== 1) {\n      throw new Error(`Can not apply the directive ${directive.name.value} with a list.`);\n    }\n\n    return subValue.terms[0];\n  }\n  /**\n   * If a `scope: all` directive param is present.\n   * @param {DirectiveNode} directive A directive.\n   * @return {boolean} If `scope: all` is present.\n   */\n\n\n  isDirectiveScopeAll(directive) {\n    const scopeArg = this.util.getArgument(directive.arguments, 'scope');\n    return scopeArg && scopeArg.value.kind === 'EnumValue' && scopeArg.value.value === 'all';\n  }\n\n}\n\nexports.DirectiveNodeHandlerAdapter = DirectiveNodeHandlerAdapter;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerAdapter.js"],"names":["Object","defineProperty","exports","value","DirectiveNodeHandlerAdapter","constructor","targetKind","util","settings","getDirectiveConditionalValue","directive","convertContext","arg","getArgument","arguments","Error","name","subValue","handleNodeValue","terms","length","isDirectiveScopeAll","scopeArg","kind"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,2BAAR,GAAsC,KAAK,CAA3C;AACA;AACA;AACA;;AACA,MAAMA,2BAAN,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,UAAD,EAAaC,IAAb,EAAmBC,QAAnB,EAA6B;AACpC,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,4BAA4B,CAACC,SAAD,EAAYC,cAAZ,EAA4B;AACpD,UAAMC,GAAG,GAAG,KAAKL,IAAL,CAAUM,WAAV,CAAsBH,SAAS,CAACI,SAAhC,EAA2C,IAA3C,CAAZ;;AACA,QAAI,CAACF,GAAL,EAAU;AACN,YAAM,IAAIG,KAAJ,CAAW,iBAAgBL,SAAS,CAACM,IAAV,CAAeb,KAAM,6BAAhD,CAAN;AACH;;AACD,UAAMc,QAAQ,GAAG,KAAKV,IAAL,CAAUW,eAAV,CAA0BN,GAAG,CAACT,KAA9B,EAAqCS,GAAG,CAACI,IAAJ,CAASb,KAA9C,EAAqDQ,cAArD,CAAjB;;AACA,QAAIM,QAAQ,CAACE,KAAT,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,YAAM,IAAIL,KAAJ,CAAW,+BAA8BL,SAAS,CAACM,IAAV,CAAeb,KAAM,eAA9D,CAAN;AACH;;AACD,WAAOc,QAAQ,CAACE,KAAT,CAAe,CAAf,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,mBAAmB,CAACX,SAAD,EAAY;AAC3B,UAAMY,QAAQ,GAAG,KAAKf,IAAL,CAAUM,WAAV,CAAsBH,SAAS,CAACI,SAAhC,EAA2C,OAA3C,CAAjB;AACA,WAAOQ,QAAQ,IAAIA,QAAQ,CAACnB,KAAT,CAAeoB,IAAf,KAAwB,WAApC,IAAmDD,QAAQ,CAACnB,KAAT,CAAeA,KAAf,KAAyB,KAAnF;AACH;;AA/B6B;;AAiClCD,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DirectiveNodeHandlerAdapter = void 0;\n/**\n * An abstract handler for GraphQL directives.\n */\nclass DirectiveNodeHandlerAdapter {\n    constructor(targetKind, util, settings) {\n        this.targetKind = targetKind;\n        this.util = util;\n        this.settings = settings;\n    }\n    /**\n     * Get the value of the 'if' argument in a directive.\n     * @param {DirectiveNode} directive A directive.\n     * @param {IConvertContext} convertContext A convert context.\n     * @return {Term} The term.\n     */\n    getDirectiveConditionalValue(directive, convertContext) {\n        const arg = this.util.getArgument(directive.arguments, 'if');\n        if (!arg) {\n            throw new Error(`The directive ${directive.name.value} is missing an if-argument.`);\n        }\n        const subValue = this.util.handleNodeValue(arg.value, arg.name.value, convertContext);\n        if (subValue.terms.length !== 1) {\n            throw new Error(`Can not apply the directive ${directive.name.value} with a list.`);\n        }\n        return subValue.terms[0];\n    }\n    /**\n     * If a `scope: all` directive param is present.\n     * @param {DirectiveNode} directive A directive.\n     * @return {boolean} If `scope: all` is present.\n     */\n    isDirectiveScopeAll(directive) {\n        const scopeArg = this.util.getArgument(directive.arguments, 'scope');\n        return scopeArg && scopeArg.value.kind === 'EnumValue' && scopeArg.value.value === 'all';\n    }\n}\nexports.DirectiveNodeHandlerAdapter = DirectiveNodeHandlerAdapter;\n//# sourceMappingURL=DirectiveNodeHandlerAdapter.js.map"]},"metadata":{},"sourceType":"script"}