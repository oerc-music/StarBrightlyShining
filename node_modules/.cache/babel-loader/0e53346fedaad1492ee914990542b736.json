{"ast":null,"code":"import { namedNode } from '@rdfjs/data-model';\n/**\n * LDflex property resolver that returns a new path\n * starting from the property name as a subject.\n *\n * For example, when triggered as\n *     data['http://person.example/#me'].friends.firstName\n * it will create a path with `http://person.example/#me` as subject\n * and then resolve `friends` and `firstName` against the JSON-LD context.\n *\n * In case a source object is given as input, data will be pulled from there.\n */\n\nexport default class SubjectPathResolver {\n  constructor(pathFactory, source) {\n    this._paths = pathFactory;\n    this._source = source;\n  }\n  /** Resolve all string properties (not Symbols) */\n\n\n  supports(property) {\n    return typeof property === 'string';\n  }\n\n  resolve(property, {\n    settings\n  }) {\n    return this._createSubjectPath(namedNode(property), settings);\n  }\n\n  _createSubjectPath(subject, {\n    createQueryEngine\n  }) {\n    const source = this._source || Promise.resolve(subject).catch(() => null);\n    const queryEngine = createQueryEngine(source);\n    return this._paths.create({\n      queryEngine\n    }, {\n      subject\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/query-ldflex/module/resolvers/SubjectPathResolver.js"],"names":["namedNode","SubjectPathResolver","constructor","pathFactory","source","_paths","_source","supports","property","resolve","settings","_createSubjectPath","subject","createQueryEngine","Promise","catch","queryEngine","create"],"mappings":"AAAA,SAASA,SAAT,QAA0B,mBAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,mBAAN,CAA0B;AACvCC,EAAAA,WAAW,CAACC,WAAD,EAAcC,MAAd,EAAsB;AAC/B,SAAKC,MAAL,GAAcF,WAAd;AACA,SAAKG,OAAL,GAAeF,MAAf;AACD;AACD;;;AAGAG,EAAAA,QAAQ,CAACC,QAAD,EAAW;AACjB,WAAO,OAAOA,QAAP,KAAoB,QAA3B;AACD;;AAEDC,EAAAA,OAAO,CAACD,QAAD,EAAW;AAChBE,IAAAA;AADgB,GAAX,EAEJ;AACD,WAAO,KAAKC,kBAAL,CAAwBX,SAAS,CAACQ,QAAD,CAAjC,EAA6CE,QAA7C,CAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,OAAD,EAAU;AAC1BC,IAAAA;AAD0B,GAAV,EAEf;AACD,UAAMT,MAAM,GAAG,KAAKE,OAAL,IAAgBQ,OAAO,CAACL,OAAR,CAAgBG,OAAhB,EAAyBG,KAAzB,CAA+B,MAAM,IAArC,CAA/B;AACA,UAAMC,WAAW,GAAGH,iBAAiB,CAACT,MAAD,CAArC;AACA,WAAO,KAAKC,MAAL,CAAYY,MAAZ,CAAmB;AACxBD,MAAAA;AADwB,KAAnB,EAEJ;AACDJ,MAAAA;AADC,KAFI,CAAP;AAKD;;AA5BsC","sourcesContent":["import { namedNode } from '@rdfjs/data-model';\n/**\n * LDflex property resolver that returns a new path\n * starting from the property name as a subject.\n *\n * For example, when triggered as\n *     data['http://person.example/#me'].friends.firstName\n * it will create a path with `http://person.example/#me` as subject\n * and then resolve `friends` and `firstName` against the JSON-LD context.\n *\n * In case a source object is given as input, data will be pulled from there.\n */\n\nexport default class SubjectPathResolver {\n  constructor(pathFactory, source) {\n    this._paths = pathFactory;\n    this._source = source;\n  }\n  /** Resolve all string properties (not Symbols) */\n\n\n  supports(property) {\n    return typeof property === 'string';\n  }\n\n  resolve(property, {\n    settings\n  }) {\n    return this._createSubjectPath(namedNode(property), settings);\n  }\n\n  _createSubjectPath(subject, {\n    createQueryEngine\n  }) {\n    const source = this._source || Promise.resolve(subject).catch(() => null);\n    const queryEngine = createQueryEngine(source);\n    return this._paths.create({\n      queryEngine\n    }, {\n      subject\n    });\n  }\n\n}"]},"metadata":{},"sourceType":"module"}