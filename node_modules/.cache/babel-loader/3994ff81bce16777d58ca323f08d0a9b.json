{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuadDestinationPatchSparqlUpdate = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_http_1 = require(\"@comunica/bus-http\");\n\nconst cross_fetch_1 = require(\"cross-fetch\");\n/**\n * A quad destination that represents an LDP resource.\n */\n\n\nclass QuadDestinationPatchSparqlUpdate {\n  constructor(url, context, mediatorHttp, mediatorRdfSerialize) {\n    this.url = url;\n    this.context = context;\n    this.mediatorHttp = mediatorHttp;\n    this.mediatorRdfSerialize = mediatorRdfSerialize;\n  }\n\n  insert(quads) {\n    return this.wrapSparqlUpdateRequest('INSERT', quads);\n  }\n\n  async delete(quads) {\n    return this.wrapSparqlUpdateRequest('DELETE', quads);\n  }\n\n  async wrapSparqlUpdateRequest(type, quads) {\n    var _a; // Serialize quads\n\n\n    const {\n      handle: {\n        data\n      }\n    } = await this.mediatorRdfSerialize.mediate({\n      handle: {\n        quadStream: quads\n      },\n      handleMediaType: 'text/turtle'\n    }); // Wrap triples in INSERT DATA block\n\n    const dataWrapped = new stream_1.PassThrough();\n    dataWrapped.push(`${type} DATA {`);\n    data.pipe(dataWrapped, {\n      end: false\n    });\n    data.on('end', () => {\n      dataWrapped.push('}');\n      dataWrapped.push(null);\n    }); // Send data in PUT request\n\n    const headers = new cross_fetch_1.Headers({\n      'content-type': 'application/sparql-update'\n    });\n    const httpResponse = await this.mediatorHttp.mediate({\n      context: this.context,\n      init: {\n        headers,\n        method: 'PATCH',\n        body: bus_http_1.ActorHttp.toWebReadableStream(dataWrapped)\n      },\n      input: this.url\n    }); // Check if update was successful\n\n    if (httpResponse.status >= 400) {\n      throw new Error(`Could not retrieve ${this.url} (${httpResponse.status}: ${httpResponse.statusText || 'unknown error'})`);\n    } // Close response body, as we don't need it\n\n\n    await ((_a = httpResponse.body) === null || _a === void 0 ? void 0 : _a.cancel());\n  }\n\n  async deleteGraphs(graphs, requireExistence, dropGraphs) {\n    throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);\n  }\n\n  async createGraphs(graphs, requireNonExistence) {\n    throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);\n  }\n\n}\n\nexports.QuadDestinationPatchSparqlUpdate = QuadDestinationPatchSparqlUpdate;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-update-hypermedia-patch-sparql-update/lib/QuadDestinationPatchSparqlUpdate.js"],"names":["Object","defineProperty","exports","value","QuadDestinationPatchSparqlUpdate","stream_1","require","bus_http_1","cross_fetch_1","constructor","url","context","mediatorHttp","mediatorRdfSerialize","insert","quads","wrapSparqlUpdateRequest","delete","type","_a","handle","data","mediate","quadStream","handleMediaType","dataWrapped","PassThrough","push","pipe","end","on","headers","Headers","httpResponse","init","method","body","ActorHttp","toWebReadableStream","input","status","Error","statusText","cancel","deleteGraphs","graphs","requireExistence","dropGraphs","createGraphs","requireNonExistence"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gCAAR,GAA2C,KAAK,CAAhD;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,aAAD,CAA7B;AACA;AACA;AACA;;;AACA,MAAMF,gCAAN,CAAuC;AACnCK,EAAAA,WAAW,CAACC,GAAD,EAAMC,OAAN,EAAeC,YAAf,EAA6BC,oBAA7B,EAAmD;AAC1D,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACH;;AACDC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,WAAO,KAAKC,uBAAL,CAA6B,QAA7B,EAAuCD,KAAvC,CAAP;AACH;;AACW,QAANE,MAAM,CAACF,KAAD,EAAQ;AAChB,WAAO,KAAKC,uBAAL,CAA6B,QAA7B,EAAuCD,KAAvC,CAAP;AACH;;AAC4B,QAAvBC,uBAAuB,CAACE,IAAD,EAAOH,KAAP,EAAc;AACvC,QAAII,EAAJ,CADuC,CAEvC;;;AACA,UAAM;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,QAAuB,MAAM,KAAKR,oBAAL,CAA0BS,OAA1B,CAAkC;AACjEF,MAAAA,MAAM,EAAE;AAAEG,QAAAA,UAAU,EAAER;AAAd,OADyD;AAEjES,MAAAA,eAAe,EAAE;AAFgD,KAAlC,CAAnC,CAHuC,CAOvC;;AACA,UAAMC,WAAW,GAAG,IAAIpB,QAAQ,CAACqB,WAAb,EAApB;AACAD,IAAAA,WAAW,CAACE,IAAZ,CAAkB,GAAET,IAAK,SAAzB;AACAG,IAAAA,IAAI,CAACO,IAAL,CAAUH,WAAV,EAAuB;AAAEI,MAAAA,GAAG,EAAE;AAAP,KAAvB;AACAR,IAAAA,IAAI,CAACS,EAAL,CAAQ,KAAR,EAAe,MAAM;AACjBL,MAAAA,WAAW,CAACE,IAAZ,CAAiB,GAAjB;AACAF,MAAAA,WAAW,CAACE,IAAZ,CAAiB,IAAjB;AACH,KAHD,EAXuC,CAevC;;AACA,UAAMI,OAAO,GAAG,IAAIvB,aAAa,CAACwB,OAAlB,CAA0B;AAAE,sBAAgB;AAAlB,KAA1B,CAAhB;AACA,UAAMC,YAAY,GAAG,MAAM,KAAKrB,YAAL,CAAkBU,OAAlB,CAA0B;AACjDX,MAAAA,OAAO,EAAE,KAAKA,OADmC;AAEjDuB,MAAAA,IAAI,EAAE;AACFH,QAAAA,OADE;AAEFI,QAAAA,MAAM,EAAE,OAFN;AAGFC,QAAAA,IAAI,EAAE7B,UAAU,CAAC8B,SAAX,CAAqBC,mBAArB,CAAyCb,WAAzC;AAHJ,OAF2C;AAOjDc,MAAAA,KAAK,EAAE,KAAK7B;AAPqC,KAA1B,CAA3B,CAjBuC,CA0BvC;;AACA,QAAIuB,YAAY,CAACO,MAAb,IAAuB,GAA3B,EAAgC;AAC5B,YAAM,IAAIC,KAAJ,CAAW,sBAAqB,KAAK/B,GAAI,KAAIuB,YAAY,CAACO,MAAO,KAAIP,YAAY,CAACS,UAAb,IAA2B,eAAgB,GAAhH,CAAN;AACH,KA7BsC,CA8BvC;;;AACA,WAAO,CAACvB,EAAE,GAAGc,YAAY,CAACG,IAAnB,MAA6B,IAA7B,IAAqCjB,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAACwB,MAAH,EAArE;AACH;;AACiB,QAAZC,YAAY,CAACC,MAAD,EAASC,gBAAT,EAA2BC,UAA3B,EAAuC;AACrD,UAAM,IAAIN,KAAJ,CAAW,mEAAX,CAAN;AACH;;AACiB,QAAZO,YAAY,CAACH,MAAD,EAASI,mBAAT,EAA8B;AAC5C,UAAM,IAAIR,KAAJ,CAAW,mEAAX,CAAN;AACH;;AAnDkC;;AAqDvCvC,OAAO,CAACE,gCAAR,GAA2CA,gCAA3C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QuadDestinationPatchSparqlUpdate = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_http_1 = require(\"@comunica/bus-http\");\nconst cross_fetch_1 = require(\"cross-fetch\");\n/**\n * A quad destination that represents an LDP resource.\n */\nclass QuadDestinationPatchSparqlUpdate {\n    constructor(url, context, mediatorHttp, mediatorRdfSerialize) {\n        this.url = url;\n        this.context = context;\n        this.mediatorHttp = mediatorHttp;\n        this.mediatorRdfSerialize = mediatorRdfSerialize;\n    }\n    insert(quads) {\n        return this.wrapSparqlUpdateRequest('INSERT', quads);\n    }\n    async delete(quads) {\n        return this.wrapSparqlUpdateRequest('DELETE', quads);\n    }\n    async wrapSparqlUpdateRequest(type, quads) {\n        var _a;\n        // Serialize quads\n        const { handle: { data } } = await this.mediatorRdfSerialize.mediate({\n            handle: { quadStream: quads },\n            handleMediaType: 'text/turtle',\n        });\n        // Wrap triples in INSERT DATA block\n        const dataWrapped = new stream_1.PassThrough();\n        dataWrapped.push(`${type} DATA {`);\n        data.pipe(dataWrapped, { end: false });\n        data.on('end', () => {\n            dataWrapped.push('}');\n            dataWrapped.push(null);\n        });\n        // Send data in PUT request\n        const headers = new cross_fetch_1.Headers({ 'content-type': 'application/sparql-update' });\n        const httpResponse = await this.mediatorHttp.mediate({\n            context: this.context,\n            init: {\n                headers,\n                method: 'PATCH',\n                body: bus_http_1.ActorHttp.toWebReadableStream(dataWrapped),\n            },\n            input: this.url,\n        });\n        // Check if update was successful\n        if (httpResponse.status >= 400) {\n            throw new Error(`Could not retrieve ${this.url} (${httpResponse.status}: ${httpResponse.statusText || 'unknown error'})`);\n        }\n        // Close response body, as we don't need it\n        await ((_a = httpResponse.body) === null || _a === void 0 ? void 0 : _a.cancel());\n    }\n    async deleteGraphs(graphs, requireExistence, dropGraphs) {\n        throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);\n    }\n    async createGraphs(graphs, requireNonExistence) {\n        throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);\n    }\n}\nexports.QuadDestinationPatchSparqlUpdate = QuadDestinationPatchSparqlUpdate;\n//# sourceMappingURL=QuadDestinationPatchSparqlUpdate.js.map"]},"metadata":{},"sourceType":"script"}