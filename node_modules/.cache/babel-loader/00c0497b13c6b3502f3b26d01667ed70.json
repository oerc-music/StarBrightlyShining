{"ast":null,"code":"/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   * @param existing an existing Map to use.\n   * @param counter the counter to use.\n   */\n  constructor(prefix, existing = new Map(), counter = 0) {\n    this.prefix = prefix;\n    this._existing = existing;\n    this.counter = counter;\n  }\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n\n\n  clone() {\n    const {\n      prefix,\n      _existing,\n      counter\n    } = this;\n    return new IdentifierIssuer(prefix, new Map(_existing), counter);\n  }\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n\n\n  getId(old) {\n    // return existing old identifier\n    const existing = old && this._existing.get(old);\n\n    if (existing) {\n      return existing;\n    } // get next identifier\n\n\n    const identifier = this.prefix + this.counter;\n    this.counter++; // save mapping\n\n    if (old) {\n      this._existing.set(old, identifier);\n    }\n\n    return identifier;\n  }\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n\n\n  hasId(old) {\n    return this._existing.has(old);\n  }\n  /**\n   * Returns all of the IDs that have been issued new IDs in the order in\n   * which they were issued new IDs.\n   *\n   * @return the list of old IDs that has been issued new IDs in order.\n   */\n\n\n  getOldIds() {\n    return [...this._existing.keys()];\n  }\n\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-canonize/lib/IdentifierIssuer.js"],"names":["module","exports","IdentifierIssuer","constructor","prefix","existing","Map","counter","_existing","clone","getId","old","get","identifier","set","hasId","has","getOldIds","keys"],"mappings":"AAAA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,gBAAN,CAAuB;AACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAQ,GAAG,IAAIC,GAAJ,EAApB,EAA+BC,OAAO,GAAG,CAAzC,EAA4C;AACrD,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AACA,SAAKE,OAAL,GAAeA,OAAf;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,KAAK,GAAG;AACN,UAAM;AAACL,MAAAA,MAAD;AAASI,MAAAA,SAAT;AAAoBD,MAAAA;AAApB,QAA+B,IAArC;AACA,WAAO,IAAIL,gBAAJ,CAAqBE,MAArB,EAA6B,IAAIE,GAAJ,CAAQE,SAAR,CAA7B,EAAiDD,OAAjD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,KAAK,CAACC,GAAD,EAAM;AACT;AACA,UAAMN,QAAQ,GAAGM,GAAG,IAAI,KAAKH,SAAL,CAAeI,GAAf,CAAmBD,GAAnB,CAAxB;;AACA,QAAGN,QAAH,EAAa;AACX,aAAOA,QAAP;AACD,KALQ,CAOT;;;AACA,UAAMQ,UAAU,GAAG,KAAKT,MAAL,GAAc,KAAKG,OAAtC;AACA,SAAKA,OAAL,GATS,CAWT;;AACA,QAAGI,GAAH,EAAQ;AACN,WAAKH,SAAL,CAAeM,GAAf,CAAmBH,GAAnB,EAAwBE,UAAxB;AACD;;AAED,WAAOA,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,KAAK,CAACJ,GAAD,EAAM;AACT,WAAO,KAAKH,SAAL,CAAeQ,GAAf,CAAmBL,GAAnB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,SAAS,GAAG;AACV,WAAO,CAAC,GAAG,KAAKT,SAAL,CAAeU,IAAf,EAAJ,CAAP;AACD;;AAzEqC,CAAxC","sourcesContent":["/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   * @param existing an existing Map to use.\n   * @param counter the counter to use.\n   */\n  constructor(prefix, existing = new Map(), counter = 0) {\n    this.prefix = prefix;\n    this._existing = existing;\n    this.counter = counter;\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const {prefix, _existing, counter} = this;\n    return new IdentifierIssuer(prefix, new Map(_existing), counter);\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    const existing = old && this._existing.get(old);\n    if(existing) {\n      return existing;\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter++;\n\n    // save mapping\n    if(old) {\n      this._existing.set(old, identifier);\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return this._existing.has(old);\n  }\n\n  /**\n   * Returns all of the IDs that have been issued new IDs in the order in\n   * which they were issued new IDs.\n   *\n   * @return the list of old IDs that has been issued new IDs in order.\n   */\n  getOldIds() {\n    return [...this._existing.keys()];\n  }\n};\n"]},"metadata":{},"sourceType":"script"}