{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeHandlerSelectionInlineFragment = void 0;\n\nconst NodeHandlerSelectionAdapter_1 = require(\"./NodeHandlerSelectionAdapter\");\n/**\n * Converts GraphQL inline fragment to one or more quad patterns with a given type within an optional.\n */\n\n\nclass NodeHandlerSelectionInlineFragment extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {\n  constructor(util, settings) {\n    super('InlineFragment', util, settings);\n  }\n\n  handle(inlineFragmentNode, convertContext) {\n    // Wrap in an OPTIONAL, as this pattern should only apply if the type applies\n    const fieldNode = {\n      alias: null,\n      arguments: null,\n      directives: inlineFragmentNode.directives,\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: convertContext.subject.value\n      },\n      selectionSet: inlineFragmentNode.selectionSet\n    };\n    const auxiliaryPatterns = inlineFragmentNode.typeCondition ? [this.util.newTypePattern(convertContext.subject, inlineFragmentNode.typeCondition, convertContext)] : [];\n    return this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), this.fieldToOperation(convertContext, fieldNode, false, auxiliaryPatterns));\n  }\n\n}\n\nexports.NodeHandlerSelectionInlineFragment = NodeHandlerSelectionInlineFragment;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionInlineFragment.js"],"names":["Object","defineProperty","exports","value","NodeHandlerSelectionInlineFragment","NodeHandlerSelectionAdapter_1","require","NodeHandlerSelectionAdapter","constructor","util","settings","handle","inlineFragmentNode","convertContext","fieldNode","alias","arguments","directives","kind","name","subject","selectionSet","auxiliaryPatterns","typeCondition","newTypePattern","operationFactory","createLeftJoin","createBgp","fieldToOperation"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kCAAR,GAA6C,KAAK,CAAlD;;AACA,MAAMC,6BAA6B,GAAGC,OAAO,CAAC,+BAAD,CAA7C;AACA;AACA;AACA;;;AACA,MAAMF,kCAAN,SAAiDC,6BAA6B,CAACE,2BAA/E,CAA2G;AACvGC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAM,gBAAN,EAAwBD,IAAxB,EAA8BC,QAA9B;AACH;;AACDC,EAAAA,MAAM,CAACC,kBAAD,EAAqBC,cAArB,EAAqC;AACvC;AACA,UAAMC,SAAS,GAAG;AACdC,MAAAA,KAAK,EAAE,IADO;AAEdC,MAAAA,SAAS,EAAE,IAFG;AAGdC,MAAAA,UAAU,EAAEL,kBAAkB,CAACK,UAHjB;AAIdC,MAAAA,IAAI,EAAE,OAJQ;AAKdC,MAAAA,IAAI,EAAE;AAAED,QAAAA,IAAI,EAAE,MAAR;AAAgBf,QAAAA,KAAK,EAAEU,cAAc,CAACO,OAAf,CAAuBjB;AAA9C,OALQ;AAMdkB,MAAAA,YAAY,EAAET,kBAAkB,CAACS;AANnB,KAAlB;AAQA,UAAMC,iBAAiB,GAAGV,kBAAkB,CAACW,aAAnB,GACpB,CAAC,KAAKd,IAAL,CAAUe,cAAV,CAAyBX,cAAc,CAACO,OAAxC,EAAiDR,kBAAkB,CAACW,aAApE,EAAmFV,cAAnF,CAAD,CADoB,GACmF,EAD7G;AAEA,WAAO,KAAKJ,IAAL,CAAUgB,gBAAV,CAA2BC,cAA3B,CAA0C,KAAKjB,IAAL,CAAUgB,gBAAV,CAA2BE,SAA3B,CAAqC,EAArC,CAA1C,EAAoF,KAAKC,gBAAL,CAAsBf,cAAtB,EAAsCC,SAAtC,EAAiD,KAAjD,EAAwDQ,iBAAxD,CAApF,CAAP;AACH;;AAjBsG;;AAmB3GpB,OAAO,CAACE,kCAAR,GAA6CA,kCAA7C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeHandlerSelectionInlineFragment = void 0;\nconst NodeHandlerSelectionAdapter_1 = require(\"./NodeHandlerSelectionAdapter\");\n/**\n * Converts GraphQL inline fragment to one or more quad patterns with a given type within an optional.\n */\nclass NodeHandlerSelectionInlineFragment extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {\n    constructor(util, settings) {\n        super('InlineFragment', util, settings);\n    }\n    handle(inlineFragmentNode, convertContext) {\n        // Wrap in an OPTIONAL, as this pattern should only apply if the type applies\n        const fieldNode = {\n            alias: null,\n            arguments: null,\n            directives: inlineFragmentNode.directives,\n            kind: 'Field',\n            name: { kind: 'Name', value: convertContext.subject.value },\n            selectionSet: inlineFragmentNode.selectionSet,\n        };\n        const auxiliaryPatterns = inlineFragmentNode.typeCondition\n            ? [this.util.newTypePattern(convertContext.subject, inlineFragmentNode.typeCondition, convertContext)] : [];\n        return this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), this.fieldToOperation(convertContext, fieldNode, false, auxiliaryPatterns));\n    }\n}\nexports.NodeHandlerSelectionInlineFragment = NodeHandlerSelectionInlineFragment;\n//# sourceMappingURL=NodeHandlerSelectionInlineFragment.js.map"]},"metadata":{},"sourceType":"script"}