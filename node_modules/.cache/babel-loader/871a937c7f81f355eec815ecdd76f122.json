{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfMetadataQuadPredicate = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst ActorRdfMetadata_1 = require(\"./ActorRdfMetadata\");\n/**\n * An abstract implementation of {@link ActorRdfMetadata} that\n * only requires the quad test {@link ActorRdfMetadata#isMetadata} method to be overridden.\n */\n\n\nclass ActorRdfMetadataQuadPredicate extends ActorRdfMetadata_1.ActorRdfMetadata {\n  constructor(args) {\n    super(args);\n  }\n\n  async run(action) {\n    const data = new stream_1.Readable({\n      objectMode: true\n    });\n    const metadata = new stream_1.Readable({\n      objectMode: true\n    }); // Delay attachment of listeners until the data or metadata stream is being read.\n    // eslint-disable-next-line func-style\n\n    const attachListeners = () => {\n      // Attach listeners only once\n      data._read = metadata._read = () => {// Do nothing\n      }; // Forward errors\n\n\n      action.quads.on('error', error => {\n        data.emit('error', error);\n        metadata.emit('error', error);\n      });\n      const context = {};\n      action.quads.on('data', quad => {\n        if (this.isMetadata(quad, action.url, context)) {\n          metadata.push(quad);\n        } else {\n          data.push(quad);\n        }\n      });\n      action.quads.on('end', () => {\n        data.push(null);\n        metadata.push(null);\n      });\n    };\n\n    data._read = metadata._read = () => {\n      attachListeners();\n    };\n\n    return {\n      data,\n      metadata\n    };\n  }\n\n}\n\nexports.ActorRdfMetadataQuadPredicate = ActorRdfMetadataQuadPredicate;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-metadata/lib/ActorRdfMetadataQuadPredicate.js"],"names":["Object","defineProperty","exports","value","ActorRdfMetadataQuadPredicate","stream_1","require","ActorRdfMetadata_1","ActorRdfMetadata","constructor","args","run","action","data","Readable","objectMode","metadata","attachListeners","_read","quads","on","error","emit","context","quad","isMetadata","url","push"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,6BAAR,GAAwC,KAAK,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,oBAAD,CAAlC;AACA;AACA;AACA;AACA;;;AACA,MAAMF,6BAAN,SAA4CG,kBAAkB,CAACC,gBAA/D,CAAgF;AAC5EC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACQ,QAAHC,GAAG,CAACC,MAAD,EAAS;AACd,UAAMC,IAAI,GAAG,IAAIR,QAAQ,CAACS,QAAb,CAAsB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAtB,CAAb;AACA,UAAMC,QAAQ,GAAG,IAAIX,QAAQ,CAACS,QAAb,CAAsB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAtB,CAAjB,CAFc,CAGd;AACA;;AACA,UAAME,eAAe,GAAG,MAAM;AAC1B;AACAJ,MAAAA,IAAI,CAACK,KAAL,GAAaF,QAAQ,CAACE,KAAT,GAAiB,MAAM,CAChC;AACH,OAFD,CAF0B,CAK1B;;;AACAN,MAAAA,MAAM,CAACO,KAAP,CAAaC,EAAb,CAAgB,OAAhB,EAAyBC,KAAK,IAAI;AAC9BR,QAAAA,IAAI,CAACS,IAAL,CAAU,OAAV,EAAmBD,KAAnB;AACAL,QAAAA,QAAQ,CAACM,IAAT,CAAc,OAAd,EAAuBD,KAAvB;AACH,OAHD;AAIA,YAAME,OAAO,GAAG,EAAhB;AACAX,MAAAA,MAAM,CAACO,KAAP,CAAaC,EAAb,CAAgB,MAAhB,EAAwBI,IAAI,IAAI;AAC5B,YAAI,KAAKC,UAAL,CAAgBD,IAAhB,EAAsBZ,MAAM,CAACc,GAA7B,EAAkCH,OAAlC,CAAJ,EAAgD;AAC5CP,UAAAA,QAAQ,CAACW,IAAT,CAAcH,IAAd;AACH,SAFD,MAGK;AACDX,UAAAA,IAAI,CAACc,IAAL,CAAUH,IAAV;AACH;AACJ,OAPD;AAQAZ,MAAAA,MAAM,CAACO,KAAP,CAAaC,EAAb,CAAgB,KAAhB,EAAuB,MAAM;AACzBP,QAAAA,IAAI,CAACc,IAAL,CAAU,IAAV;AACAX,QAAAA,QAAQ,CAACW,IAAT,CAAc,IAAd;AACH,OAHD;AAIH,KAvBD;;AAwBAd,IAAAA,IAAI,CAACK,KAAL,GAAaF,QAAQ,CAACE,KAAT,GAAiB,MAAM;AAChCD,MAAAA,eAAe;AAClB,KAFD;;AAGA,WAAO;AAAEJ,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAP;AACH;;AArC2E;;AAuChFd,OAAO,CAACE,6BAAR,GAAwCA,6BAAxC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfMetadataQuadPredicate = void 0;\nconst stream_1 = require(\"stream\");\nconst ActorRdfMetadata_1 = require(\"./ActorRdfMetadata\");\n/**\n * An abstract implementation of {@link ActorRdfMetadata} that\n * only requires the quad test {@link ActorRdfMetadata#isMetadata} method to be overridden.\n */\nclass ActorRdfMetadataQuadPredicate extends ActorRdfMetadata_1.ActorRdfMetadata {\n    constructor(args) {\n        super(args);\n    }\n    async run(action) {\n        const data = new stream_1.Readable({ objectMode: true });\n        const metadata = new stream_1.Readable({ objectMode: true });\n        // Delay attachment of listeners until the data or metadata stream is being read.\n        // eslint-disable-next-line func-style\n        const attachListeners = () => {\n            // Attach listeners only once\n            data._read = metadata._read = () => {\n                // Do nothing\n            };\n            // Forward errors\n            action.quads.on('error', error => {\n                data.emit('error', error);\n                metadata.emit('error', error);\n            });\n            const context = {};\n            action.quads.on('data', quad => {\n                if (this.isMetadata(quad, action.url, context)) {\n                    metadata.push(quad);\n                }\n                else {\n                    data.push(quad);\n                }\n            });\n            action.quads.on('end', () => {\n                data.push(null);\n                metadata.push(null);\n            });\n        };\n        data._read = metadata._read = () => {\n            attachListeners();\n        };\n        return { data, metadata };\n    }\n}\nexports.ActorRdfMetadataQuadPredicate = ActorRdfMetadataQuadPredicate;\n//# sourceMappingURL=ActorRdfMetadataQuadPredicate.js.map"]},"metadata":{},"sourceType":"script"}