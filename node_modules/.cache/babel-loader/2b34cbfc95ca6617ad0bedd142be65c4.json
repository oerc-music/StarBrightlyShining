{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfResolveQuadPatternFederated = void 0;\n\nconst bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\n\nconst FederatedQuadSource_1 = require(\"./FederatedQuadSource\");\n/**\n * A comunica Federated RDF Resolve Quad Pattern Actor.\n */\n\n\nclass ActorRdfResolveQuadPatternFederated extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {\n  constructor(args) {\n    super(args);\n    this.emptyPatterns = new Map();\n  }\n\n  async test(action) {\n    const sources = this.getContextSources(action.context);\n\n    if (!sources) {\n      throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a sources array.`);\n    }\n\n    return true;\n  }\n\n  async getSource(context) {\n    return new FederatedQuadSource_1.FederatedQuadSource(this.mediatorResolveQuadPattern, context, this.emptyPatterns, this.skipEmptyPatterns);\n  }\n\n}\n\nexports.ActorRdfResolveQuadPatternFederated = ActorRdfResolveQuadPatternFederated;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-resolve-quad-pattern-federated/lib/ActorRdfResolveQuadPatternFederated.js"],"names":["Object","defineProperty","exports","value","ActorRdfResolveQuadPatternFederated","bus_rdf_resolve_quad_pattern_1","require","FederatedQuadSource_1","ActorRdfResolveQuadPatternSource","constructor","args","emptyPatterns","Map","test","action","sources","getContextSources","context","Error","name","getSource","FederatedQuadSource","mediatorResolveQuadPattern","skipEmptyPatterns"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mCAAR,GAA8C,KAAK,CAAnD;;AACA,MAAMC,8BAA8B,GAAGC,OAAO,CAAC,wCAAD,CAA9C;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;;;AACA,MAAMF,mCAAN,SAAkDC,8BAA8B,CAACG,gCAAjF,CAAkH;AAC9GC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACA,SAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,UAAMC,OAAO,GAAG,KAAKC,iBAAL,CAAuBF,MAAM,CAACG,OAA9B,CAAhB;;AACA,QAAI,CAACF,OAAL,EAAc;AACV,YAAM,IAAIG,KAAJ,CAAW,SAAQ,KAAKC,IAAK,iEAA7B,CAAN;AACH;;AACD,WAAO,IAAP;AACH;;AACc,QAATC,SAAS,CAACH,OAAD,EAAU;AACrB,WAAO,IAAIV,qBAAqB,CAACc,mBAA1B,CAA8C,KAAKC,0BAAnD,EAA+EL,OAA/E,EAAwF,KAAKN,aAA7F,EAA4G,KAAKY,iBAAjH,CAAP;AACH;;AAd6G;;AAgBlHrB,OAAO,CAACE,mCAAR,GAA8CA,mCAA9C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfResolveQuadPatternFederated = void 0;\nconst bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\nconst FederatedQuadSource_1 = require(\"./FederatedQuadSource\");\n/**\n * A comunica Federated RDF Resolve Quad Pattern Actor.\n */\nclass ActorRdfResolveQuadPatternFederated extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {\n    constructor(args) {\n        super(args);\n        this.emptyPatterns = new Map();\n    }\n    async test(action) {\n        const sources = this.getContextSources(action.context);\n        if (!sources) {\n            throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a sources array.`);\n        }\n        return true;\n    }\n    async getSource(context) {\n        return new FederatedQuadSource_1.FederatedQuadSource(this.mediatorResolveQuadPattern, context, this.emptyPatterns, this.skipEmptyPatterns);\n    }\n}\nexports.ActorRdfResolveQuadPatternFederated = ActorRdfResolveQuadPatternFederated;\n//# sourceMappingURL=ActorRdfResolveQuadPatternFederated.js.map"]},"metadata":{},"sourceType":"script"}