{"ast":null,"code":"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Score from 'meld-clients-core/lib/containers/score';\nimport { scoreSetOptions } from 'meld-clients-core/lib/actions/index';\nimport DragSelect from \"dragselect/dist/DragSelect\";\nimport ReactDOM from 'react-dom';\nimport auth from 'solid-auth-client';\nconst CONTAINS = \"http://www.w3.org/ns/ldp#contains\";\nconst defaultVrvOptions = {\n  scale: 45,\n  adjustPageHeight: 1,\n  pageHeight: 2500,\n  pageWidth: 2200,\n  footer: \"none\",\n  unit: 6\n};\nconst defaultSelectorString = '.note';\nconst defaultSelectionArea = '.score';\n\nclass SelectableScore extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectorString: \"selectorString\" in this.props ? this.props.selectorString : defaultSelectorString,\n      selectionArea: \"selectionArea\" in this.props ? this.props.selectionArea : defaultSelectionArea,\n      scoreComponentLoaded: false,\n      annotationContainerContentToRetrieve: [],\n      vrvOptions: \"vrvOptions\" in this.props ? this.props.vrvOptions : defaultVrvOptions\n    };\n    this.enableSelector = this.enableSelector.bind(this);\n    this.scoreComponent = /*#__PURE__*/React.createRef();\n    this.handleScoreUpdate = this.handleScoreUpdate.bind(this);\n    this.observer = new MutationObserver(this.handleScoreUpdate);\n  }\n\n  handleScoreUpdate() {\n    this.enableSelector();\n    typeof this.props.onScoreUpdate === \"function\" && this.props.onScoreUpdate(ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\"svg\"));\n  }\n\n  enableSelector() {\n    if (!Object.keys(this.props.score.SVG).length) {\n      console.log(\"Enable selector called before MEI has loaded!\");\n      return; // no MEI loaded yet\n    }\n\n    if (typeof this.state.selector !== \"undefined\") {\n      this.state.selector.stop();\n    }\n\n    let selector;\n    const score = ReactDOM.findDOMNode(this.scoreComponent.current);\n    console.log(score, this.state);\n\n    if (this.state.selectorString.length) {\n      selector = new DragSelect({\n        //        selectables: document.querySelectorAll(this.state.selectorString),\n        //        area: document.querySelector(this.state.selectionArea),\n        selectables: score.querySelectorAll(this.state.selectorString),\n        area: score,\n        selectedClass: 'selected',\n        onDragStartBegin: () => {\n          document.body.classList.add('s-noselect');\n        },\n        callback: elements => {\n          document.body.classList.remove('s-noselect');\n          this.props.onSelectionChange(elements);\n        }\n      });\n    } // undefined if no selector string specified, otherwise a new DragSelect\n\n\n    this.setState({\n      selector: selector\n    });\n  }\n\n  fetchAnnotationContainer() {\n    auth.fetch(this.props.annotationContainerUri, {\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/ld+json'\n      }\n    }).then(response => response.json()).then(data => {\n      // fetch any contents of the container\n      let uri = this.props.annotationContainerUri; // ensure uri ends with slash\n\n      uri = uri.charAt(uri.length - 1) === \"/\" ? uri : uri + \"/\"; // find json-ld description of the container itself\n\n      const container = data.filter(x => x[\"@id\"] === uri)[0];\n\n      if (CONTAINS in container) {\n        const contentUris = container[CONTAINS].map(contentItem => contentItem[\"@id\"]).filter(uri => !uri.endsWith(\".lock/\")); // skip SOLID lock files\n\n        this.setState({\n          annotationContainerContentToRetrieve: contentUris\n        }, () => {\n          this.fetchAnnotationContainerContent();\n        });\n      } else {\n        this.props.onReceiveAnnotationContainerContent({});\n      }\n\n      ; // report empty container\n    }).catch(err => console.log(\"Error: \", err));\n  }\n\n  fetchAnnotationContainerContent() {\n    Promise.all(this.state.annotationContainerContentToRetrieve.map(uri => auth.fetch(uri, {\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/ld+json'\n      }\n    }))).then(responses => {\n      Promise.all(responses.map(response => {\n        try {\n          return response.json();\n        } catch (e) {\n          console.error(\"Couldn't read annotation response json: \", e);\n          return null;\n        }\n      }).filter(json => !!json)).then(content => {\n        // inject content URIs into JSON-LD objects\n        content.forEach((c, ix) => {\n          c[\"@id\"] = this.state.annotationContainerContentToRetrieve[ix];\n        }); // and callback to the application\n\n        this.props.onReceiveAnnotationContainerContent(content);\n      }).catch(err => console.error(\"Error extracting response json: \", err));\n    }).catch(err => console.log(\"Error retrieving content: \", err));\n  }\n\n  componentDidMount() {\n    // handle fetching of annotation container contents\n    if (this.props.annotationContainerUri && this.props.toggleAnnotationRetrieval) {\n      if (this.props.onReceiveAnnotationContainerContent) {\n        this.fetchAnnotationContainer();\n      } else {\n        console.error(\"Specified annotation container URI without onReceiveAnnotationContainerContent callback\");\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.annotationContainerUri && !prevProps.toggleAnnotationRetrieval && this.props.toggleAnnotationRetrieval) {\n      if (this.props.onReceiveAnnotationContainerContent) {\n        // update annotation container flag toggled on, clear state and refetch\n        this.setState({\n          annotationContainerContentToRetrieve: []\n        }, this.fetchAnnotationContainer());\n      } else {\n        console.error(\"Specified annotation container URI without onReceiveAnnotationContainerContent callback\");\n      }\n    }\n\n    if (!prevState.scoreComponentLoaded && this.scoreComponent.current) {\n      // first load of score component - run onScoreReady callback if provided, and start observing for DOM changes\n      if (!ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\".score\")) {\n        console.log(\"Missed the score\", this.props.uri, this.scoreComponent.current);\n        return;\n      }\n\n      console.log(\"Found score for\", this.props.uri);\n      this.setState({\n        \"scoreComponentLoaded\": true\n      }, () => {\n        typeof this.props.onScoreReady === \"function\" && this.props.onScoreReady(ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\"svg\"), this.props.score.vrvTk);\n        this.observer.observe(ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\".score\"), {\n          \"childList\": true\n        });\n        this.enableSelector();\n      });\n    }\n\n    if (prevProps.selectorString !== this.props.selectorString) {\n      // selector changed (e.g. from .note to .measure), re-initialise selectors\n      this.setState({\n        \"selectorString\": this.props.selectorString\n      }, () => this.enableSelector());\n    }\n\n    if (\"vrvOptions\" in this.props && JSON.stringify(prevState.vrvOptions) !== JSON.stringify(this.props.vrvOptions)) {\n      // options have changed\n      this.setState({\n        vrvOptions: this.props.vrvOptions\n      }, () => this.props.scoreSetOptions(this.props.uri, this.state.vrvOptions));\n    }\n  }\n\n  render() {\n    console.log(\"Attempting to render score with uri: \", this.props.uri);\n    return /*#__PURE__*/React.createElement(Score, {\n      uri: this.props.uri,\n      key: this.props.uri,\n      options: this.state.vrvOptions,\n      ref: this.scoreComponent\n    });\n  }\n\n}\n\nfunction mapStateToProps({\n  score\n}) {\n  return {\n    score\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    scoreSetOptions\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableScore);","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/selectable-score/lib/selectable-score.js"],"names":["React","Component","connect","bindActionCreators","Score","scoreSetOptions","DragSelect","ReactDOM","auth","CONTAINS","defaultVrvOptions","scale","adjustPageHeight","pageHeight","pageWidth","footer","unit","defaultSelectorString","defaultSelectionArea","SelectableScore","constructor","props","state","selectorString","selectionArea","scoreComponentLoaded","annotationContainerContentToRetrieve","vrvOptions","enableSelector","bind","scoreComponent","createRef","handleScoreUpdate","observer","MutationObserver","onScoreUpdate","findDOMNode","current","querySelector","Object","keys","score","SVG","length","console","log","selector","stop","selectables","querySelectorAll","area","selectedClass","onDragStartBegin","document","body","classList","add","callback","elements","remove","onSelectionChange","setState","fetchAnnotationContainer","fetch","annotationContainerUri","mode","headers","then","response","json","data","uri","charAt","container","filter","x","contentUris","map","contentItem","endsWith","fetchAnnotationContainerContent","onReceiveAnnotationContainerContent","catch","err","Promise","all","responses","e","error","content","forEach","c","ix","componentDidMount","toggleAnnotationRetrieval","componentDidUpdate","prevProps","prevState","onScoreReady","vrvTk","observe","JSON","stringify","render","createElement","key","options","ref","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Score from 'meld-clients-core/lib/containers/score';\nimport { scoreSetOptions } from 'meld-clients-core/lib/actions/index';\nimport DragSelect from \"dragselect/dist/DragSelect\";\nimport ReactDOM from 'react-dom';\nimport auth from 'solid-auth-client';\nconst CONTAINS = \"http://www.w3.org/ns/ldp#contains\";\nconst defaultVrvOptions = {\n  scale: 45,\n  adjustPageHeight: 1,\n  pageHeight: 2500,\n  pageWidth: 2200,\n  footer: \"none\",\n  unit: 6\n};\nconst defaultSelectorString = '.note';\nconst defaultSelectionArea = '.score';\n\nclass SelectableScore extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectorString: \"selectorString\" in this.props ? this.props.selectorString : defaultSelectorString,\n      selectionArea: \"selectionArea\" in this.props ? this.props.selectionArea : defaultSelectionArea,\n      scoreComponentLoaded: false,\n      annotationContainerContentToRetrieve: [],\n      vrvOptions: \"vrvOptions\" in this.props ? this.props.vrvOptions : defaultVrvOptions\n    };\n    this.enableSelector = this.enableSelector.bind(this);\n    this.scoreComponent = /*#__PURE__*/React.createRef();\n    this.handleScoreUpdate = this.handleScoreUpdate.bind(this);\n    this.observer = new MutationObserver(this.handleScoreUpdate);\n  }\n\n  handleScoreUpdate() {\n    this.enableSelector();\n    typeof this.props.onScoreUpdate === \"function\" && this.props.onScoreUpdate(ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\"svg\"));\n  }\n\n  enableSelector() {\n    if (!Object.keys(this.props.score.SVG).length) {\n      console.log(\"Enable selector called before MEI has loaded!\");\n      return; // no MEI loaded yet\n    }\n\n    if (typeof this.state.selector !== \"undefined\") {\n      this.state.selector.stop();\n    }\n\n    let selector;\n\t\tconst score = ReactDOM.findDOMNode(this.scoreComponent.current);\n\t\tconsole.log(score, this.state);\n    if (this.state.selectorString.length) {\n      selector = new DragSelect({\n\t\t\t\t//        selectables: document.querySelectorAll(this.state.selectorString),\n\t\t\t\t//        area: document.querySelector(this.state.selectionArea),\n\t\t\t\tselectables: score.querySelectorAll(this.state.selectorString),\n\t\t\t\tarea: score,\n        selectedClass: 'selected',\n        onDragStartBegin: () => {\n          document.body.classList.add('s-noselect');\n        },\n        callback: elements => {\n          document.body.classList.remove('s-noselect');\n          this.props.onSelectionChange(elements);\n        }\n      });\n    } // undefined if no selector string specified, otherwise a new DragSelect\n\n\n    this.setState({\n      selector: selector\n    });\n  }\n\n  fetchAnnotationContainer() {\n    auth.fetch(this.props.annotationContainerUri, {\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/ld+json'\n      }\n    }).then(response => response.json()).then(data => {\n      // fetch any contents of the container\n      let uri = this.props.annotationContainerUri; // ensure uri ends with slash\n\n      uri = uri.charAt(uri.length - 1) === \"/\" ? uri : uri + \"/\"; // find json-ld description of the container itself\n\n      const container = data.filter(x => x[\"@id\"] === uri)[0];\n\n      if (CONTAINS in container) {\n        const contentUris = container[CONTAINS].map(contentItem => contentItem[\"@id\"]).filter(uri => !uri.endsWith(\".lock/\")); // skip SOLID lock files\n\n        this.setState({\n          annotationContainerContentToRetrieve: contentUris\n        }, () => {\n          this.fetchAnnotationContainerContent();\n        });\n      } else {\n        this.props.onReceiveAnnotationContainerContent({});\n      }\n\n      ; // report empty container\n    }).catch(err => console.log(\"Error: \", err));\n  }\n\n  fetchAnnotationContainerContent() {\n    Promise.all(this.state.annotationContainerContentToRetrieve.map(uri => auth.fetch(uri, {\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/ld+json'\n      }\n    }))).then(responses => {\n      Promise.all(responses.map(response => {\n        try {\n          return response.json();\n        } catch (e) {\n          console.error(\"Couldn't read annotation response json: \", e);\n          return null;\n        }\n      }).filter(json => !!json)).then(content => {\n        // inject content URIs into JSON-LD objects\n        content.forEach((c, ix) => {\n          c[\"@id\"] = this.state.annotationContainerContentToRetrieve[ix];\n        }); // and callback to the application\n\n        this.props.onReceiveAnnotationContainerContent(content);\n      }).catch(err => console.error(\"Error extracting response json: \", err));\n    }).catch(err => console.log(\"Error retrieving content: \", err));\n  }\n\n  componentDidMount() {\n    // handle fetching of annotation container contents\n    if (this.props.annotationContainerUri && this.props.toggleAnnotationRetrieval) {\n      if (this.props.onReceiveAnnotationContainerContent) {\n        this.fetchAnnotationContainer();\n      } else {\n        console.error(\"Specified annotation container URI without onReceiveAnnotationContainerContent callback\");\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.annotationContainerUri && !prevProps.toggleAnnotationRetrieval && this.props.toggleAnnotationRetrieval) {\n      if (this.props.onReceiveAnnotationContainerContent) {\n        // update annotation container flag toggled on, clear state and refetch\n        this.setState({\n          annotationContainerContentToRetrieve: []\n        }, this.fetchAnnotationContainer());\n      } else {\n        console.error(\"Specified annotation container URI without onReceiveAnnotationContainerContent callback\");\n      }\n    }\n\n    if (!prevState.scoreComponentLoaded && this.scoreComponent.current) {\n      // first load of score component - run onScoreReady callback if provided, and start observing for DOM changes\n\t\t\tif(!(ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\".score\"))) {\n\t\t\t\tconsole.log(\"Missed the score\", this.props.uri, this.scoreComponent.current);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log(\"Found score for\", this.props.uri);\n      this.setState({\n        \"scoreComponentLoaded\": true\n      }, () => {\n        typeof this.props.onScoreReady === \"function\" && this.props.onScoreReady(ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\"svg\"), this.props.score.vrvTk);\n        this.observer.observe(ReactDOM.findDOMNode(this.scoreComponent.current).querySelector(\".score\"), {\n          \"childList\": true\n        });\n        this.enableSelector();\n      });\n    }\n\n    if (prevProps.selectorString !== this.props.selectorString) {\n      // selector changed (e.g. from .note to .measure), re-initialise selectors\n      this.setState({\n        \"selectorString\": this.props.selectorString\n      }, () => this.enableSelector());\n    }\n\n    if (\"vrvOptions\" in this.props && JSON.stringify(prevState.vrvOptions) !== JSON.stringify(this.props.vrvOptions)) {\n      // options have changed\n      this.setState({\n        vrvOptions: this.props.vrvOptions\n      }, () => this.props.scoreSetOptions(this.props.uri, this.state.vrvOptions));\n    }\n  }\n\n  render() {\n    console.log(\"Attempting to render score with uri: \", this.props.uri);\n    return /*#__PURE__*/React.createElement(Score, {\n      uri: this.props.uri,\n      key: this.props.uri,\n      options: this.state.vrvOptions,\n      ref: this.scoreComponent\n    });\n  }\n\n}\n\nfunction mapStateToProps({\n  score\n}) {\n  return {\n    score\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    scoreSetOptions\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableScore);\n"]},"metadata":{},"sourceType":"module"}