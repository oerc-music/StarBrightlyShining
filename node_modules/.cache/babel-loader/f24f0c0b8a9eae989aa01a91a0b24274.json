{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorAbstractMediaTyped = void 0;\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * An abstract actor that handles media-typed actions.\n *\n * It splits up a action between a 'handle' and a 'mediaTypes' action.\n * A 'mediaTypes' action is used to retrieve the available media types from this actor.\n * A 'handle' action is abstract, and can be implemented to do anything,\n * such as parsing, serializing, etc.\n * @see IActionAbstractMediaTyped\n *\n * @see ActorAbstractMediaTypedFixed\n */\n\n\nclass ActorAbstractMediaTyped extends core_1.Actor {\n  constructor(args) {\n    super(args);\n  }\n\n  async run(action) {\n    if ('handle' in action) {\n      const typedAction = action;\n      return {\n        handle: await this.runHandle(typedAction.handle, typedAction.handleMediaType, action.context)\n      };\n    }\n\n    if ('mediaTypes' in action) {\n      return {\n        mediaTypes: await this.getMediaTypes(action.context)\n      };\n    }\n\n    if ('mediaTypeFormats' in action) {\n      return {\n        mediaTypeFormats: await this.getMediaTypeFormats(action.context)\n      };\n    }\n\n    throw new Error('Either a handle, mediaTypes or mediaTypeFormats action needs to be provided');\n  }\n\n  async test(action) {\n    if ('handle' in action) {\n      const typedAction = action;\n      return {\n        handle: await this.testHandle(typedAction.handle, typedAction.handleMediaType, action.context)\n      };\n    }\n\n    if ('mediaTypes' in action) {\n      return {\n        mediaTypes: await this.testMediaType(action.context)\n      };\n    }\n\n    if ('mediaTypeFormats' in action) {\n      return {\n        mediaTypeFormats: await this.testMediaTypeFormats(action.context)\n      };\n    }\n\n    throw new Error('Either a handle, mediaTypes or mediaTypeFormats action needs to be provided');\n  }\n\n}\n\nexports.ActorAbstractMediaTyped = ActorAbstractMediaTyped;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTyped.js"],"names":["Object","defineProperty","exports","value","ActorAbstractMediaTyped","core_1","require","Actor","constructor","args","run","action","typedAction","handle","runHandle","handleMediaType","context","mediaTypes","getMediaTypes","mediaTypeFormats","getMediaTypeFormats","Error","test","testHandle","testMediaType","testMediaTypeFormats"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,uBAAN,SAAsCC,MAAM,CAACE,KAA7C,CAAmD;AAC/CC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACQ,QAAHC,GAAG,CAACC,MAAD,EAAS;AACd,QAAI,YAAYA,MAAhB,EAAwB;AACpB,YAAMC,WAAW,GAAGD,MAApB;AACA,aAAO;AAAEE,QAAAA,MAAM,EAAE,MAAM,KAAKC,SAAL,CAAeF,WAAW,CAACC,MAA3B,EAAmCD,WAAW,CAACG,eAA/C,EAAgEJ,MAAM,CAACK,OAAvE;AAAhB,OAAP;AACH;;AACD,QAAI,gBAAgBL,MAApB,EAA4B;AACxB,aAAO;AAAEM,QAAAA,UAAU,EAAE,MAAM,KAAKC,aAAL,CAAmBP,MAAM,CAACK,OAA1B;AAApB,OAAP;AACH;;AACD,QAAI,sBAAsBL,MAA1B,EAAkC;AAC9B,aAAO;AAAEQ,QAAAA,gBAAgB,EAAE,MAAM,KAAKC,mBAAL,CAAyBT,MAAM,CAACK,OAAhC;AAA1B,OAAP;AACH;;AACD,UAAM,IAAIK,KAAJ,CAAU,6EAAV,CAAN;AACH;;AACS,QAAJC,IAAI,CAACX,MAAD,EAAS;AACf,QAAI,YAAYA,MAAhB,EAAwB;AACpB,YAAMC,WAAW,GAAGD,MAApB;AACA,aAAO;AAAEE,QAAAA,MAAM,EAAE,MAAM,KAAKU,UAAL,CAAgBX,WAAW,CAACC,MAA5B,EAAoCD,WAAW,CAACG,eAAhD,EAAiEJ,MAAM,CAACK,OAAxE;AAAhB,OAAP;AACH;;AACD,QAAI,gBAAgBL,MAApB,EAA4B;AACxB,aAAO;AAAEM,QAAAA,UAAU,EAAE,MAAM,KAAKO,aAAL,CAAmBb,MAAM,CAACK,OAA1B;AAApB,OAAP;AACH;;AACD,QAAI,sBAAsBL,MAA1B,EAAkC;AAC9B,aAAO;AAAEQ,QAAAA,gBAAgB,EAAE,MAAM,KAAKM,oBAAL,CAA0Bd,MAAM,CAACK,OAAjC;AAA1B,OAAP;AACH;;AACD,UAAM,IAAIK,KAAJ,CAAU,6EAAV,CAAN;AACH;;AA7B8C;;AA+BnDnB,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorAbstractMediaTyped = void 0;\nconst core_1 = require(\"@comunica/core\");\n/**\n * An abstract actor that handles media-typed actions.\n *\n * It splits up a action between a 'handle' and a 'mediaTypes' action.\n * A 'mediaTypes' action is used to retrieve the available media types from this actor.\n * A 'handle' action is abstract, and can be implemented to do anything,\n * such as parsing, serializing, etc.\n * @see IActionAbstractMediaTyped\n *\n * @see ActorAbstractMediaTypedFixed\n */\nclass ActorAbstractMediaTyped extends core_1.Actor {\n    constructor(args) {\n        super(args);\n    }\n    async run(action) {\n        if ('handle' in action) {\n            const typedAction = action;\n            return { handle: await this.runHandle(typedAction.handle, typedAction.handleMediaType, action.context) };\n        }\n        if ('mediaTypes' in action) {\n            return { mediaTypes: await this.getMediaTypes(action.context) };\n        }\n        if ('mediaTypeFormats' in action) {\n            return { mediaTypeFormats: await this.getMediaTypeFormats(action.context) };\n        }\n        throw new Error('Either a handle, mediaTypes or mediaTypeFormats action needs to be provided');\n    }\n    async test(action) {\n        if ('handle' in action) {\n            const typedAction = action;\n            return { handle: await this.testHandle(typedAction.handle, typedAction.handleMediaType, action.context) };\n        }\n        if ('mediaTypes' in action) {\n            return { mediaTypes: await this.testMediaType(action.context) };\n        }\n        if ('mediaTypeFormats' in action) {\n            return { mediaTypeFormats: await this.testMediaTypeFormats(action.context) };\n        }\n        throw new Error('Either a handle, mediaTypes or mediaTypeFormats action needs to be provided');\n    }\n}\nexports.ActorAbstractMediaTyped = ActorAbstractMediaTyped;\n//# sourceMappingURL=ActorAbstractMediaTyped.js.map"]},"metadata":{},"sourceType":"script"}