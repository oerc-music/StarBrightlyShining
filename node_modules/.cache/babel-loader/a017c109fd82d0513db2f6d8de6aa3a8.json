{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationDrop = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\n\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL drop operations.\n */\n\nclass ActorQueryOperationDrop extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'drop');\n  }\n\n  async testOperation(pattern, context) {\n    bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    // Delegate to update-quads bus\n    let graphs;\n\n    if (pattern.source === 'DEFAULT') {\n      graphs = DF.defaultGraph();\n    } else if (typeof pattern.source === 'string') {\n      graphs = pattern.source;\n    } else {\n      graphs = [pattern.source];\n    }\n\n    const {\n      updateResult\n    } = await this.mediatorUpdateQuads.mediate({\n      deleteGraphs: {\n        graphs,\n        requireExistence: !pattern.silent,\n        dropGraphs: true\n      },\n      context\n    });\n    return {\n      type: 'update',\n      updateResult\n    };\n  }\n\n}\n\nexports.ActorQueryOperationDrop = ActorQueryOperationDrop;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-update-drop/lib/ActorQueryOperationDrop.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationDrop","bus_query_operation_1","require","rdf_data_factory_1","DF","DataFactory","ActorQueryOperationTypedMediated","constructor","args","testOperation","pattern","context","ActorQueryOperation","throwOnReadOnly","runOperation","graphs","source","defaultGraph","updateResult","mediatorUpdateQuads","mediate","deleteGraphs","requireExistence","silent","dropGraphs","type"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAME,EAAE,GAAG,IAAID,kBAAkB,CAACE,WAAvB,EAAX;AACA;AACA;AACA;AACA;;AACA,MAAML,uBAAN,SAAsCC,qBAAqB,CAACK,gCAA5D,CAA6F;AACzFC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,MAAZ;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClCV,IAAAA,qBAAqB,CAACW,mBAAtB,CAA0CC,eAA1C,CAA0DF,OAA1D;AACA,WAAO,IAAP;AACH;;AACiB,QAAZG,YAAY,CAACJ,OAAD,EAAUC,OAAV,EAAmB;AACjC;AACA,QAAII,MAAJ;;AACA,QAAIL,OAAO,CAACM,MAAR,KAAmB,SAAvB,EAAkC;AAC9BD,MAAAA,MAAM,GAAGX,EAAE,CAACa,YAAH,EAAT;AACH,KAFD,MAGK,IAAI,OAAOP,OAAO,CAACM,MAAf,KAA0B,QAA9B,EAAwC;AACzCD,MAAAA,MAAM,GAAGL,OAAO,CAACM,MAAjB;AACH,KAFI,MAGA;AACDD,MAAAA,MAAM,GAAG,CAACL,OAAO,CAACM,MAAT,CAAT;AACH;;AACD,UAAM;AAAEE,MAAAA;AAAF,QAAmB,MAAM,KAAKC,mBAAL,CAAyBC,OAAzB,CAAiC;AAC5DC,MAAAA,YAAY,EAAE;AACVN,QAAAA,MADU;AAEVO,QAAAA,gBAAgB,EAAE,CAACZ,OAAO,CAACa,MAFjB;AAGVC,QAAAA,UAAU,EAAE;AAHF,OAD8C;AAM5Db,MAAAA;AAN4D,KAAjC,CAA/B;AAQA,WAAO;AACHc,MAAAA,IAAI,EAAE,QADH;AAEHP,MAAAA;AAFG,KAAP;AAIH;;AAhCwF;;AAkC7FpB,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationDrop = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL drop operations.\n */\nclass ActorQueryOperationDrop extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'drop');\n    }\n    async testOperation(pattern, context) {\n        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n        return true;\n    }\n    async runOperation(pattern, context) {\n        // Delegate to update-quads bus\n        let graphs;\n        if (pattern.source === 'DEFAULT') {\n            graphs = DF.defaultGraph();\n        }\n        else if (typeof pattern.source === 'string') {\n            graphs = pattern.source;\n        }\n        else {\n            graphs = [pattern.source];\n        }\n        const { updateResult } = await this.mediatorUpdateQuads.mediate({\n            deleteGraphs: {\n                graphs,\n                requireExistence: !pattern.silent,\n                dropGraphs: true,\n            },\n            context,\n        });\n        return {\n            type: 'update',\n            updateResult,\n        };\n    }\n}\nexports.ActorQueryOperationDrop = ActorQueryOperationDrop;\n//# sourceMappingURL=ActorQueryOperationDrop.js.map"]},"metadata":{},"sourceType":"script"}