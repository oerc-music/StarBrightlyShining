{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfDereferenceMediaMappings = void 0;\n\nconst ActorRdfDereference_1 = require(\"./ActorRdfDereference\");\n/**\n * A base actor for dereferencing URLs to quad streams.\n *\n * Actor types:\n * * Input:  IActionRdfDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferenceOutput: A quad stream.\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\n\n\nclass ActorRdfDereferenceMediaMappings extends ActorRdfDereference_1.ActorRdfDereference {\n  constructor(args) {\n    super(args);\n  }\n  /**\n   * Get the media type based on the extension of the given path,\n   * which can be an URL or file path.\n   * @param {string} path A path.\n   * @return {string} A media type or the empty string.\n   */\n\n\n  getMediaTypeFromExtension(path) {\n    const dotIndex = path.lastIndexOf('.');\n\n    if (dotIndex >= 0) {\n      const ext = path.slice(dotIndex); // Ignore dot\n\n      return this.mediaMappings[ext.slice(1)] || '';\n    }\n\n    return '';\n  }\n\n}\n\nexports.ActorRdfDereferenceMediaMappings = ActorRdfDereferenceMediaMappings;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-dereference/lib/ActorRdfDereferenceMediaMappings.js"],"names":["Object","defineProperty","exports","value","ActorRdfDereferenceMediaMappings","ActorRdfDereference_1","require","ActorRdfDereference","constructor","args","getMediaTypeFromExtension","path","dotIndex","lastIndexOf","ext","slice","mediaMappings"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gCAAR,GAA2C,KAAK,CAAhD;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,gCAAN,SAA+CC,qBAAqB,CAACE,mBAArE,CAAyF;AACrFC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,yBAAyB,CAACC,IAAD,EAAO;AAC5B,UAAMC,QAAQ,GAAGD,IAAI,CAACE,WAAL,CAAiB,GAAjB,CAAjB;;AACA,QAAID,QAAQ,IAAI,CAAhB,EAAmB;AACf,YAAME,GAAG,GAAGH,IAAI,CAACI,KAAL,CAAWH,QAAX,CAAZ,CADe,CAEf;;AACA,aAAO,KAAKI,aAAL,CAAmBF,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAnB,KAAoC,EAA3C;AACH;;AACD,WAAO,EAAP;AACH;;AAlBoF;;AAoBzFb,OAAO,CAACE,gCAAR,GAA2CA,gCAA3C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfDereferenceMediaMappings = void 0;\nconst ActorRdfDereference_1 = require(\"./ActorRdfDereference\");\n/**\n * A base actor for dereferencing URLs to quad streams.\n *\n * Actor types:\n * * Input:  IActionRdfDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferenceOutput: A quad stream.\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\nclass ActorRdfDereferenceMediaMappings extends ActorRdfDereference_1.ActorRdfDereference {\n    constructor(args) {\n        super(args);\n    }\n    /**\n     * Get the media type based on the extension of the given path,\n     * which can be an URL or file path.\n     * @param {string} path A path.\n     * @return {string} A media type or the empty string.\n     */\n    getMediaTypeFromExtension(path) {\n        const dotIndex = path.lastIndexOf('.');\n        if (dotIndex >= 0) {\n            const ext = path.slice(dotIndex);\n            // Ignore dot\n            return this.mediaMappings[ext.slice(1)] || '';\n        }\n        return '';\n    }\n}\nexports.ActorRdfDereferenceMediaMappings = ActorRdfDereferenceMediaMappings;\n//# sourceMappingURL=ActorRdfDereferenceMediaMappings.js.map"]},"metadata":{},"sourceType":"script"}