{"ast":null,"code":"/**\n * Yields a function that interprets a string expression as an LDflex path.\n */\nexport default class StringToLDflexHandler {\n  handle(pathData, path) {\n    // Resolves the given string expression against the LDflex object\n    return (expression = '', ldflex = path) => {\n      // An expression starts with a property access in dot or bracket notation\n      const propertyPath = expression // Add brackets around a single URL\n      .replace(/^(https?:\\/\\/[^()[\\]'\"]+)$/, '[\"$1\"]') // Add the starting dot if omitted\n      .replace(/^(?=[a-z$_])/i, '.') // Add quotes inside of brackets if omitted\n      .replace(/\\[([^'\"`\\](]*)\\]/g, '[\"$1\"]'); // Create a function to evaluate the expression\n\n      const body = `\"use strict\";return ldflex${propertyPath}`;\n      let evaluator;\n\n      try {\n        /* eslint no-new-func: off */\n        evaluator = Function('ldflex', body);\n      } catch ({\n        message\n      }) {\n        throw new Error(`Expression \"${expression}\" is invalid: ${message}`);\n      } // Evaluate the function\n\n\n      return evaluator(ldflex);\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/ldflex/module/StringToLDflexHandler.js"],"names":["StringToLDflexHandler","handle","pathData","path","expression","ldflex","propertyPath","replace","body","evaluator","Function","message","Error"],"mappings":"AAAA;AACA;AACA;AACA,eAAe,MAAMA,qBAAN,CAA4B;AACzCC,EAAAA,MAAM,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACrB;AACA,WAAO,CAACC,UAAU,GAAG,EAAd,EAAkBC,MAAM,GAAGF,IAA3B,KAAoC;AACzC;AACA,YAAMG,YAAY,GAAGF,UAAU,CAAC;AAAD,OAC9BG,OADoB,CACZ,4BADY,EACkB,QADlB,EAC4B;AAD5B,OAEpBA,OAFoB,CAEZ,eAFY,EAEK,GAFL,EAEU;AAFV,OAGpBA,OAHoB,CAGZ,mBAHY,EAGS,QAHT,CAArB,CAFyC,CAKA;;AAEzC,YAAMC,IAAI,GAAI,6BAA4BF,YAAa,EAAvD;AACA,UAAIG,SAAJ;;AAEA,UAAI;AACF;AACAA,QAAAA,SAAS,GAAGC,QAAQ,CAAC,QAAD,EAAWF,IAAX,CAApB;AACD,OAHD,CAGE,OAAO;AACPG,QAAAA;AADO,OAAP,EAEC;AACD,cAAM,IAAIC,KAAJ,CAAW,eAAcR,UAAW,iBAAgBO,OAAQ,EAA5D,CAAN;AACD,OAjBwC,CAiBvC;;;AAGF,aAAOF,SAAS,CAACJ,MAAD,CAAhB;AACD,KArBD;AAsBD;;AAzBwC","sourcesContent":["/**\n * Yields a function that interprets a string expression as an LDflex path.\n */\nexport default class StringToLDflexHandler {\n  handle(pathData, path) {\n    // Resolves the given string expression against the LDflex object\n    return (expression = '', ldflex = path) => {\n      // An expression starts with a property access in dot or bracket notation\n      const propertyPath = expression // Add brackets around a single URL\n      .replace(/^(https?:\\/\\/[^()[\\]'\"]+)$/, '[\"$1\"]') // Add the starting dot if omitted\n      .replace(/^(?=[a-z$_])/i, '.') // Add quotes inside of brackets if omitted\n      .replace(/\\[([^'\"`\\](]*)\\]/g, '[\"$1\"]'); // Create a function to evaluate the expression\n\n      const body = `\"use strict\";return ldflex${propertyPath}`;\n      let evaluator;\n\n      try {\n        /* eslint no-new-func: off */\n        evaluator = Function('ldflex', body);\n      } catch ({\n        message\n      }) {\n        throw new Error(`Expression \"${expression}\" is invalid: ${message}`);\n      } // Evaluate the function\n\n\n      return evaluator(ldflex);\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}