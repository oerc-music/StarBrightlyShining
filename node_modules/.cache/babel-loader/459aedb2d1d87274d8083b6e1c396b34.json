{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationFilterSparqlee = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst sparqlee_1 = require(\"sparqlee\");\n/**\n * A comunica Filter Sparqlee Query Operation Actor.\n */\n\n\nclass ActorQueryOperationFilterSparqlee extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'filter');\n  }\n\n  async testOperation(pattern, context) {\n    // Will throw error for unsupported operators\n    const config = Object.assign({}, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));\n\n    const _ = new sparqlee_1.AsyncEvaluator(pattern.expression, config);\n\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    const outputRaw = await this.mediatorQueryOperation.mediate({\n      operation: pattern.input,\n      context\n    });\n    const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(outputRaw);\n    bus_query_operation_1.ActorQueryOperation.validateQueryOutput(output, 'bindings');\n    const {\n      variables,\n      metadata\n    } = output;\n    const config = Object.assign({}, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));\n    const evaluator = new sparqlee_1.AsyncEvaluator(pattern.expression, config);\n\n    const transform = async (item, next, push) => {\n      try {\n        const result = await evaluator.evaluateAsEBV(item);\n\n        if (result) {\n          push(item);\n        }\n      } catch (error) {\n        // We ignore all Expression errors.\n        // Other errors (likely programming mistakes) are still propagated.\n        //\n        // > Specifically, FILTERs eliminate any solutions that,\n        // > when substituted into the expression, either result in\n        // > an effective boolean value of false or produce an error.\n        // > ...\n        // > These errors have no effect outside of FILTER evaluation.\n        // https://www.w3.org/TR/sparql11-query/#expressions\n        if (!sparqlee_1.isExpressionError(error)) {\n          bindingsStream.emit('error', error);\n        }\n      }\n\n      next();\n    };\n\n    const bindingsStream = output.bindingsStream.transform({\n      transform\n    });\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata,\n      variables,\n      canContainUndefs: output.canContainUndefs\n    };\n  }\n\n}\n\nexports.ActorQueryOperationFilterSparqlee = ActorQueryOperationFilterSparqlee;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-filter-sparqlee/lib/ActorQueryOperationFilterSparqlee.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationFilterSparqlee","bus_query_operation_1","require","sparqlee_1","ActorQueryOperationTypedMediated","constructor","args","testOperation","pattern","context","config","assign","ActorQueryOperation","getAsyncExpressionContext","mediatorQueryOperation","_","AsyncEvaluator","expression","runOperation","outputRaw","mediate","operation","input","output","getSafeBindings","validateQueryOutput","variables","metadata","evaluator","transform","item","next","push","result","evaluateAsEBV","error","isExpressionError","bindingsStream","emit","type","canContainUndefs"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iCAAR,GAA4C,KAAK,CAAjD;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,UAAD,CAA1B;AACA;AACA;AACA;;;AACA,MAAMF,iCAAN,SAAgDC,qBAAqB,CAACG,gCAAtE,CAAuG;AACnGC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAY,QAAZ;AACH;;AACkB,QAAbC,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAClC;AACA,UAAMC,MAAM,GAAGd,MAAM,CAACe,MAAP,CAAc,EAAd,EAAkBV,qBAAqB,CAACW,mBAAtB,CAA0CC,yBAA1C,CAAoEJ,OAApE,EAA6E,KAAKK,sBAAlF,CAAlB,CAAf;;AACA,UAAMC,CAAC,GAAG,IAAIZ,UAAU,CAACa,cAAf,CAA8BR,OAAO,CAACS,UAAtC,EAAkDP,MAAlD,CAAV;;AACA,WAAO,IAAP;AACH;;AACiB,QAAZQ,YAAY,CAACV,OAAD,EAAUC,OAAV,EAAmB;AACjC,UAAMU,SAAS,GAAG,MAAM,KAAKL,sBAAL,CAA4BM,OAA5B,CAAoC;AAAEC,MAAAA,SAAS,EAAEb,OAAO,CAACc,KAArB;AAA4Bb,MAAAA;AAA5B,KAApC,CAAxB;AACA,UAAMc,MAAM,GAAGtB,qBAAqB,CAACW,mBAAtB,CAA0CY,eAA1C,CAA0DL,SAA1D,CAAf;AACAlB,IAAAA,qBAAqB,CAACW,mBAAtB,CAA0Ca,mBAA1C,CAA8DF,MAA9D,EAAsE,UAAtE;AACA,UAAM;AAAEG,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA0BJ,MAAhC;AACA,UAAMb,MAAM,GAAGd,MAAM,CAACe,MAAP,CAAc,EAAd,EAAkBV,qBAAqB,CAACW,mBAAtB,CAA0CC,yBAA1C,CAAoEJ,OAApE,EAA6E,KAAKK,sBAAlF,CAAlB,CAAf;AACA,UAAMc,SAAS,GAAG,IAAIzB,UAAU,CAACa,cAAf,CAA8BR,OAAO,CAACS,UAAtC,EAAkDP,MAAlD,CAAlB;;AACA,UAAMmB,SAAS,GAAG,OAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,KAA4B;AAC1C,UAAI;AACA,cAAMC,MAAM,GAAG,MAAML,SAAS,CAACM,aAAV,CAAwBJ,IAAxB,CAArB;;AACA,YAAIG,MAAJ,EAAY;AACRD,UAAAA,IAAI,CAACF,IAAD,CAAJ;AACH;AACJ,OALD,CAMA,OAAOK,KAAP,EAAc;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI,CAAChC,UAAU,CAACiC,iBAAX,CAA6BD,KAA7B,CAAL,EAA0C;AACtCE,UAAAA,cAAc,CAACC,IAAf,CAAoB,OAApB,EAA6BH,KAA7B;AACH;AACJ;;AACDJ,MAAAA,IAAI;AACP,KAtBD;;AAuBA,UAAMM,cAAc,GAAGd,MAAM,CAACc,cAAP,CAAsBR,SAAtB,CAAgC;AAAEA,MAAAA;AAAF,KAAhC,CAAvB;AACA,WAAO;AAAEU,MAAAA,IAAI,EAAE,UAAR;AAAoBF,MAAAA,cAApB;AAAoCV,MAAAA,QAApC;AAA8CD,MAAAA,SAA9C;AAAyDc,MAAAA,gBAAgB,EAAEjB,MAAM,CAACiB;AAAlF,KAAP;AACH;;AA1CkG;;AA4CvG1C,OAAO,CAACE,iCAAR,GAA4CA,iCAA5C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationFilterSparqlee = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst sparqlee_1 = require(\"sparqlee\");\n/**\n * A comunica Filter Sparqlee Query Operation Actor.\n */\nclass ActorQueryOperationFilterSparqlee extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'filter');\n    }\n    async testOperation(pattern, context) {\n        // Will throw error for unsupported operators\n        const config = Object.assign({}, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));\n        const _ = new sparqlee_1.AsyncEvaluator(pattern.expression, config);\n        return true;\n    }\n    async runOperation(pattern, context) {\n        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: pattern.input, context });\n        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(outputRaw);\n        bus_query_operation_1.ActorQueryOperation.validateQueryOutput(output, 'bindings');\n        const { variables, metadata } = output;\n        const config = Object.assign({}, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));\n        const evaluator = new sparqlee_1.AsyncEvaluator(pattern.expression, config);\n        const transform = async (item, next, push) => {\n            try {\n                const result = await evaluator.evaluateAsEBV(item);\n                if (result) {\n                    push(item);\n                }\n            }\n            catch (error) {\n                // We ignore all Expression errors.\n                // Other errors (likely programming mistakes) are still propagated.\n                //\n                // > Specifically, FILTERs eliminate any solutions that,\n                // > when substituted into the expression, either result in\n                // > an effective boolean value of false or produce an error.\n                // > ...\n                // > These errors have no effect outside of FILTER evaluation.\n                // https://www.w3.org/TR/sparql11-query/#expressions\n                if (!sparqlee_1.isExpressionError(error)) {\n                    bindingsStream.emit('error', error);\n                }\n            }\n            next();\n        };\n        const bindingsStream = output.bindingsStream.transform({ transform });\n        return { type: 'bindings', bindingsStream, metadata, variables, canContainUndefs: output.canContainUndefs };\n    }\n}\nexports.ActorQueryOperationFilterSparqlee = ActorQueryOperationFilterSparqlee;\n//# sourceMappingURL=ActorQueryOperationFilterSparqlee.js.map"]},"metadata":{},"sourceType":"script"}