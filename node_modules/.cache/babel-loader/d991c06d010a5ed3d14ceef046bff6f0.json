{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfResolveQuadPatternSource = void 0;\n\nconst ActorRdfResolveQuadPattern_1 = require(\"./ActorRdfResolveQuadPattern\");\n/**\n * A base implementation for rdf-resolve-quad-pattern events\n * that wraps around an {@link IQuadSource}.\n *\n * @see IQuadSource\n */\n\n\nclass ActorRdfResolveQuadPatternSource extends ActorRdfResolveQuadPattern_1.ActorRdfResolveQuadPattern {\n  constructor(args) {\n    super(args);\n  }\n\n  async test(action) {\n    return true;\n  }\n\n  async run(action) {\n    const source = await this.getSource(action.context, action.pattern);\n    return await this.getOutput(source, action.pattern, action.context);\n  }\n  /**\n   * Get the output of the given action on a source.\n   * @param {IQuadSource} source A quad source, possibly lazy.\n   * @param {Algebra.Operation} operation The operation to apply.\n   * @param ActionContext context Optional context data.\n   * @return {Promise<IActorRdfResolveQuadPatternOutput>} A promise that resolves to a hash containing\n   *                                                      a data RDFJS stream.\n   */\n\n\n  async getOutput(source, pattern, context) {\n    // Create data stream\n    const data = source.match(pattern.subject, pattern.predicate, pattern.object, pattern.graph);\n    return {\n      data\n    };\n  }\n\n}\n\nexports.ActorRdfResolveQuadPatternSource = ActorRdfResolveQuadPatternSource;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/ActorRdfResolveQuadPatternSource.js"],"names":["Object","defineProperty","exports","value","ActorRdfResolveQuadPatternSource","ActorRdfResolveQuadPattern_1","require","ActorRdfResolveQuadPattern","constructor","args","test","action","run","source","getSource","context","pattern","getOutput","data","match","subject","predicate","object","graph"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gCAAR,GAA2C,KAAK,CAAhD;;AACA,MAAMC,4BAA4B,GAAGC,OAAO,CAAC,8BAAD,CAA5C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,gCAAN,SAA+CC,4BAA4B,CAACE,0BAA5E,CAAuG;AACnGC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AACf,WAAO,IAAP;AACH;;AACQ,QAAHC,GAAG,CAACD,MAAD,EAAS;AACd,UAAME,MAAM,GAAG,MAAM,KAAKC,SAAL,CAAeH,MAAM,CAACI,OAAtB,EAA+BJ,MAAM,CAACK,OAAtC,CAArB;AACA,WAAO,MAAM,KAAKC,SAAL,CAAeJ,MAAf,EAAuBF,MAAM,CAACK,OAA9B,EAAuCL,MAAM,CAACI,OAA9C,CAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmB,QAATE,SAAS,CAACJ,MAAD,EAASG,OAAT,EAAkBD,OAAlB,EAA2B;AACtC;AACA,UAAMG,IAAI,GAAGL,MAAM,CAACM,KAAP,CAAaH,OAAO,CAACI,OAArB,EAA8BJ,OAAO,CAACK,SAAtC,EAAiDL,OAAO,CAACM,MAAzD,EAAiEN,OAAO,CAACO,KAAzE,CAAb;AACA,WAAO;AAAEL,MAAAA;AAAF,KAAP;AACH;;AAvBkG;;AAyBvGhB,OAAO,CAACE,gCAAR,GAA2CA,gCAA3C","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfResolveQuadPatternSource = void 0;\nconst ActorRdfResolveQuadPattern_1 = require(\"./ActorRdfResolveQuadPattern\");\n/**\n * A base implementation for rdf-resolve-quad-pattern events\n * that wraps around an {@link IQuadSource}.\n *\n * @see IQuadSource\n */\nclass ActorRdfResolveQuadPatternSource extends ActorRdfResolveQuadPattern_1.ActorRdfResolveQuadPattern {\n    constructor(args) {\n        super(args);\n    }\n    async test(action) {\n        return true;\n    }\n    async run(action) {\n        const source = await this.getSource(action.context, action.pattern);\n        return await this.getOutput(source, action.pattern, action.context);\n    }\n    /**\n     * Get the output of the given action on a source.\n     * @param {IQuadSource} source A quad source, possibly lazy.\n     * @param {Algebra.Operation} operation The operation to apply.\n     * @param ActionContext context Optional context data.\n     * @return {Promise<IActorRdfResolveQuadPatternOutput>} A promise that resolves to a hash containing\n     *                                                      a data RDFJS stream.\n     */\n    async getOutput(source, pattern, context) {\n        // Create data stream\n        const data = source.match(pattern.subject, pattern.predicate, pattern.object, pattern.graph);\n        return { data };\n    }\n}\nexports.ActorRdfResolveQuadPatternSource = ActorRdfResolveQuadPatternSource;\n//# sourceMappingURL=ActorRdfResolveQuadPatternSource.js.map"]},"metadata":{},"sourceType":"script"}