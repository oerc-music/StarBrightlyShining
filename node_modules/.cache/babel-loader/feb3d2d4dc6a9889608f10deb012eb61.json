{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KEY_CONTEXT_QUERY = exports.KEY_CONTEXT_LENIENT = exports.KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES = exports.KEY_CONTEXT_QUERYFORMAT = exports.KEY_CONTEXT_INITIALBINDINGS = exports.ActorInitSparql = void 0;\n\nconst bus_init_1 = require(\"@comunica/bus-init\");\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\n\nconst context_entries_1 = require(\"@comunica/context-entries\");\n\nconst core_1 = require(\"@comunica/core\");\n\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A browser-safe comunica SPARQL Init Actor.\n */\n\n\nclass ActorInitSparql extends bus_init_1.ActorInit {\n  constructor(args) {\n    super(args);\n  }\n  /**\n   * Add convenience methods to query results\n   * @param {IActorQueryOperationOutput} results Basic query results.\n   * @return {IQueryResult} Same query results with added fields.\n   */\n\n\n  static enhanceQueryResults(results) {\n    // Set bindings\n    if (results.bindingsStream) {\n      results.bindings = () => new Promise((resolve, reject) => {\n        const result = [];\n        results.bindingsStream.on('data', data => {\n          result.push(data);\n        });\n        results.bindingsStream.on('end', () => {\n          resolve(result);\n        });\n        results.bindingsStream.on('error', reject);\n      });\n    } else if (results.quadStream) {\n      results.quads = () => new Promise((resolve, reject) => {\n        const result = [];\n        results.quadStream.on('data', data => {\n          result.push(data);\n        });\n        results.quadStream.on('end', () => {\n          resolve(result);\n        });\n        results.quadStream.on('error', reject);\n      });\n    }\n\n    return results;\n  }\n\n  async test(action) {\n    return true;\n  }\n  /**\n   * Evaluate the given query\n   * @param {string | Algebra.Operation} query A query string or algebra.\n   * @param context An optional query context.\n   * @return {Promise<IActorQueryOperationOutput>} A promise that resolves to the query output.\n   */\n\n\n  async query(query, context) {\n    context = context || {}; // Expand shortcuts\n\n    for (const key in context) {\n      if (this.contextKeyShortcuts[key]) {\n        const existingEntry = context[key];\n        context[this.contextKeyShortcuts[key]] = existingEntry;\n        delete context[key];\n      }\n    } // Set the default logger if none is provided\n\n\n    if (!context[context_entries_1.KeysCore.log]) {\n      context[context_entries_1.KeysCore.log] = this.logger;\n    }\n\n    if (!context[context_entries_1.KeysInitSparql.queryTimestamp]) {\n      context[context_entries_1.KeysInitSparql.queryTimestamp] = new Date();\n    } // Ensure sources are an async re-iterable\n\n\n    if (Array.isArray(context[context_entries_1.KeysRdfResolveQuadPattern.sources])) {\n      // TODO: backwards compatibility\n      context[context_entries_1.KeysRdfResolveQuadPattern.sources].forEach(source => {\n        if (!bus_rdf_resolve_quad_pattern_1.isDataSourceRawType(source) && (source.type === 'auto' || source.type === 'hypermedia')) {\n          delete source.type;\n        }\n      });\n    } // Prepare context\n\n\n    context = core_1.ActionContext(context);\n    let queryFormat = 'sparql';\n\n    if (context && context.has(context_entries_1.KeysInitSparql.queryFormat)) {\n      queryFormat = context.get(context_entries_1.KeysInitSparql.queryFormat);\n      context = context.delete(context_entries_1.KeysInitSparql.queryFormat);\n\n      if (queryFormat === 'graphql' && !context.has(context_entries_1.KeysInitSparql.graphqlSingularizeVariables)) {\n        context = context.set(context_entries_1.KeysInitSparql.graphqlSingularizeVariables, {});\n      }\n    }\n\n    let baseIRI;\n\n    if (context && context.has(context_entries_1.KeysInitSparql.baseIRI)) {\n      baseIRI = context.get(context_entries_1.KeysInitSparql.baseIRI);\n    } // Pre-processing the context\n\n\n    context = (await this.mediatorContextPreprocess.mediate({\n      context\n    })).context; // Parse query\n\n    let operation;\n\n    if (typeof query === 'string') {\n      const queryParseOutput = await this.mediatorSparqlParse.mediate({\n        context,\n        query,\n        queryFormat,\n        baseIRI\n      });\n      operation = queryParseOutput.operation; // Update the baseIRI in the context if the query modified it.\n\n      if (queryParseOutput.baseIRI) {\n        context = context.set(context_entries_1.KeysInitSparql.baseIRI, queryParseOutput.baseIRI);\n      }\n    } else {\n      operation = query;\n    } // Apply initial bindings in context\n\n\n    if (context.has(context_entries_1.KeysInitSparql.initialBindings)) {\n      const bindings = context.get(context_entries_1.KeysInitSparql.initialBindings);\n      operation = bus_query_operation_1.materializeOperation(operation, bus_query_operation_1.ensureBindings(bindings));\n    } // Optimize the query operation\n\n\n    const mediatorResult = await this.mediatorOptimizeQueryOperation.mediate({\n      context,\n      operation\n    });\n    operation = mediatorResult.operation;\n    context = mediatorResult.context || context; // Save original query in context\n\n    context = context.set(context_entries_1.KeysInitSparql.query, operation); // Execute query\n\n    const resolve = {\n      context,\n      operation\n    };\n    let output = await this.mediatorQueryOperation.mediate(resolve);\n    output = ActorInitSparql.enhanceQueryResults(output);\n    output.context = context;\n    return output;\n  }\n  /**\n   * @param context An optional context.\n   * @return {Promise<{[p: string]: number}>} All available SPARQL (weighted) result media types.\n   */\n\n\n  async getResultMediaTypes(context) {\n    return (await this.mediatorSparqlSerializeMediaTypeCombiner.mediate({\n      context,\n      mediaTypes: true\n    })).mediaTypes;\n  }\n  /**\n   * @param context An optional context.\n   * @return {Promise<{[p: string]: number}>} All available SPARQL result media type formats.\n   */\n\n\n  async getResultMediaTypeFormats(context) {\n    return (await this.mediatorSparqlSerializeMediaTypeFormatCombiner.mediate({\n      context,\n      mediaTypeFormats: true\n    })).mediaTypeFormats;\n  }\n  /**\n   * Convert a query result to a string stream based on a certain media type.\n   * @param {IActorQueryOperationOutput} queryResult A query result.\n   * @param {string} mediaType A media type.\n   * @param {ActionContext} context An optional context.\n   * @return {Promise<IActorSparqlSerializeOutput>} A text stream.\n   */\n\n\n  async resultToString(queryResult, mediaType, context) {\n    context = core_1.ActionContext(context);\n\n    if (!mediaType) {\n      switch (queryResult.type) {\n        case 'bindings':\n          mediaType = 'application/json';\n          break;\n\n        case 'quads':\n          mediaType = 'application/trig';\n          break;\n\n        default:\n          mediaType = 'simple';\n          break;\n      }\n    }\n\n    const handle = queryResult;\n    handle.context = context;\n    return (await this.mediatorSparqlSerialize.mediate({\n      context,\n      handle,\n      handleMediaType: mediaType\n    })).handle;\n  }\n  /**\n   * Invalidate all internal caches related to the given page URL.\n   * If no page URL is given, then all pages will be invalidated.\n   * @param {string} url The page URL to invalidate.\n   * @return {Promise<any>} A promise resolving when the caches have been invalidated.\n   */\n\n\n  invalidateHttpCache(url) {\n    return this.mediatorHttpInvalidate.mediate({\n      url\n    });\n  }\n\n  async run(action) {\n    throw new Error('ActorInitSparql#run is not supported in the browser.');\n  }\n\n}\n\nexports.ActorInitSparql = ActorInitSparql;\nActorInitSparql.ALGEBRA_TYPES = Object.keys(sparqlalgebrajs_1.Algebra.types).reduce((acc, key) => {\n  acc[sparqlalgebrajs_1.Algebra.types[key]] = true;\n  return acc;\n}, {});\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_INITIALBINDINGS = context_entries_1.KeysInitSparql.initialBindings;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_QUERYFORMAT = context_entries_1.KeysInitSparql.queryFormat;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES = context_entries_1.KeysInitSparql.graphqlSingularizeVariables;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_LENIENT = context_entries_1.KeysInitSparql.lenient;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\n\nexports.KEY_CONTEXT_QUERY = context_entries_1.KeysInitSparql.query;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-init-sparql/lib/ActorInitSparql-browser.js"],"names":["Object","defineProperty","exports","value","KEY_CONTEXT_QUERY","KEY_CONTEXT_LENIENT","KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES","KEY_CONTEXT_QUERYFORMAT","KEY_CONTEXT_INITIALBINDINGS","ActorInitSparql","bus_init_1","require","bus_query_operation_1","bus_rdf_resolve_quad_pattern_1","context_entries_1","core_1","sparqlalgebrajs_1","ActorInit","constructor","args","enhanceQueryResults","results","bindingsStream","bindings","Promise","resolve","reject","result","on","data","push","quadStream","quads","test","action","query","context","key","contextKeyShortcuts","existingEntry","KeysCore","log","logger","KeysInitSparql","queryTimestamp","Date","Array","isArray","KeysRdfResolveQuadPattern","sources","forEach","source","isDataSourceRawType","type","ActionContext","queryFormat","has","get","delete","graphqlSingularizeVariables","set","baseIRI","mediatorContextPreprocess","mediate","operation","queryParseOutput","mediatorSparqlParse","initialBindings","materializeOperation","ensureBindings","mediatorResult","mediatorOptimizeQueryOperation","output","mediatorQueryOperation","getResultMediaTypes","mediatorSparqlSerializeMediaTypeCombiner","mediaTypes","getResultMediaTypeFormats","mediatorSparqlSerializeMediaTypeFormatCombiner","mediaTypeFormats","resultToString","queryResult","mediaType","handle","mediatorSparqlSerialize","handleMediaType","invalidateHttpCache","url","mediatorHttpInvalidate","run","Error","ALGEBRA_TYPES","keys","Algebra","types","reduce","acc","lenient"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY_CONTEXT_QUERY = exports.KEY_CONTEXT_LENIENT = exports.KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES = exports.KEY_CONTEXT_QUERYFORMAT = exports.KEY_CONTEXT_INITIALBINDINGS = exports.ActorInitSparql = void 0;\nconst bus_init_1 = require(\"@comunica/bus-init\");\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst bus_rdf_resolve_quad_pattern_1 = require(\"@comunica/bus-rdf-resolve-quad-pattern\");\nconst context_entries_1 = require(\"@comunica/context-entries\");\nconst core_1 = require(\"@comunica/core\");\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A browser-safe comunica SPARQL Init Actor.\n */\nclass ActorInitSparql extends bus_init_1.ActorInit {\n    constructor(args) {\n        super(args);\n    }\n    /**\n     * Add convenience methods to query results\n     * @param {IActorQueryOperationOutput} results Basic query results.\n     * @return {IQueryResult} Same query results with added fields.\n     */\n    static enhanceQueryResults(results) {\n        // Set bindings\n        if (results.bindingsStream) {\n            results.bindings = () => new Promise((resolve, reject) => {\n                const result = [];\n                results.bindingsStream.on('data', data => {\n                    result.push(data);\n                });\n                results.bindingsStream.on('end', () => {\n                    resolve(result);\n                });\n                results.bindingsStream.on('error', reject);\n            });\n        }\n        else if (results.quadStream) {\n            results.quads = () => new Promise((resolve, reject) => {\n                const result = [];\n                results.quadStream.on('data', data => {\n                    result.push(data);\n                });\n                results.quadStream.on('end', () => {\n                    resolve(result);\n                });\n                results.quadStream.on('error', reject);\n            });\n        }\n        return results;\n    }\n    async test(action) {\n        return true;\n    }\n    /**\n     * Evaluate the given query\n     * @param {string | Algebra.Operation} query A query string or algebra.\n     * @param context An optional query context.\n     * @return {Promise<IActorQueryOperationOutput>} A promise that resolves to the query output.\n     */\n    async query(query, context) {\n        context = context || {};\n        // Expand shortcuts\n        for (const key in context) {\n            if (this.contextKeyShortcuts[key]) {\n                const existingEntry = context[key];\n                context[this.contextKeyShortcuts[key]] = existingEntry;\n                delete context[key];\n            }\n        }\n        // Set the default logger if none is provided\n        if (!context[context_entries_1.KeysCore.log]) {\n            context[context_entries_1.KeysCore.log] = this.logger;\n        }\n        if (!context[context_entries_1.KeysInitSparql.queryTimestamp]) {\n            context[context_entries_1.KeysInitSparql.queryTimestamp] = new Date();\n        }\n        // Ensure sources are an async re-iterable\n        if (Array.isArray(context[context_entries_1.KeysRdfResolveQuadPattern.sources])) {\n            // TODO: backwards compatibility\n            context[context_entries_1.KeysRdfResolveQuadPattern.sources].forEach((source) => {\n                if (!bus_rdf_resolve_quad_pattern_1.isDataSourceRawType(source) && (source.type === 'auto' || source.type === 'hypermedia')) {\n                    delete source.type;\n                }\n            });\n        }\n        // Prepare context\n        context = core_1.ActionContext(context);\n        let queryFormat = 'sparql';\n        if (context && context.has(context_entries_1.KeysInitSparql.queryFormat)) {\n            queryFormat = context.get(context_entries_1.KeysInitSparql.queryFormat);\n            context = context.delete(context_entries_1.KeysInitSparql.queryFormat);\n            if (queryFormat === 'graphql' && !context.has(context_entries_1.KeysInitSparql.graphqlSingularizeVariables)) {\n                context = context.set(context_entries_1.KeysInitSparql.graphqlSingularizeVariables, {});\n            }\n        }\n        let baseIRI;\n        if (context && context.has(context_entries_1.KeysInitSparql.baseIRI)) {\n            baseIRI = context.get(context_entries_1.KeysInitSparql.baseIRI);\n        }\n        // Pre-processing the context\n        context = (await this.mediatorContextPreprocess.mediate({ context })).context;\n        // Parse query\n        let operation;\n        if (typeof query === 'string') {\n            const queryParseOutput = await this.mediatorSparqlParse.mediate({ context, query, queryFormat, baseIRI });\n            operation = queryParseOutput.operation;\n            // Update the baseIRI in the context if the query modified it.\n            if (queryParseOutput.baseIRI) {\n                context = context.set(context_entries_1.KeysInitSparql.baseIRI, queryParseOutput.baseIRI);\n            }\n        }\n        else {\n            operation = query;\n        }\n        // Apply initial bindings in context\n        if (context.has(context_entries_1.KeysInitSparql.initialBindings)) {\n            const bindings = context.get(context_entries_1.KeysInitSparql.initialBindings);\n            operation = bus_query_operation_1.materializeOperation(operation, bus_query_operation_1.ensureBindings(bindings));\n        }\n        // Optimize the query operation\n        const mediatorResult = await this.mediatorOptimizeQueryOperation.mediate({ context, operation });\n        operation = mediatorResult.operation;\n        context = mediatorResult.context || context;\n        // Save original query in context\n        context = context.set(context_entries_1.KeysInitSparql.query, operation);\n        // Execute query\n        const resolve = { context, operation };\n        let output = await this.mediatorQueryOperation.mediate(resolve);\n        output = ActorInitSparql.enhanceQueryResults(output);\n        output.context = context;\n        return output;\n    }\n    /**\n     * @param context An optional context.\n     * @return {Promise<{[p: string]: number}>} All available SPARQL (weighted) result media types.\n     */\n    async getResultMediaTypes(context) {\n        return (await this.mediatorSparqlSerializeMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;\n    }\n    /**\n     * @param context An optional context.\n     * @return {Promise<{[p: string]: number}>} All available SPARQL result media type formats.\n     */\n    async getResultMediaTypeFormats(context) {\n        return (await this.mediatorSparqlSerializeMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true }))\n            .mediaTypeFormats;\n    }\n    /**\n     * Convert a query result to a string stream based on a certain media type.\n     * @param {IActorQueryOperationOutput} queryResult A query result.\n     * @param {string} mediaType A media type.\n     * @param {ActionContext} context An optional context.\n     * @return {Promise<IActorSparqlSerializeOutput>} A text stream.\n     */\n    async resultToString(queryResult, mediaType, context) {\n        context = core_1.ActionContext(context);\n        if (!mediaType) {\n            switch (queryResult.type) {\n                case 'bindings':\n                    mediaType = 'application/json';\n                    break;\n                case 'quads':\n                    mediaType = 'application/trig';\n                    break;\n                default:\n                    mediaType = 'simple';\n                    break;\n            }\n        }\n        const handle = queryResult;\n        handle.context = context;\n        return (await this.mediatorSparqlSerialize.mediate({ context, handle, handleMediaType: mediaType })).handle;\n    }\n    /**\n     * Invalidate all internal caches related to the given page URL.\n     * If no page URL is given, then all pages will be invalidated.\n     * @param {string} url The page URL to invalidate.\n     * @return {Promise<any>} A promise resolving when the caches have been invalidated.\n     */\n    invalidateHttpCache(url) {\n        return this.mediatorHttpInvalidate.mediate({ url });\n    }\n    async run(action) {\n        throw new Error('ActorInitSparql#run is not supported in the browser.');\n    }\n}\nexports.ActorInitSparql = ActorInitSparql;\nActorInitSparql.ALGEBRA_TYPES = Object.keys(sparqlalgebrajs_1.Algebra.types)\n    .reduce((acc, key) => {\n    acc[sparqlalgebrajs_1.Algebra.types[key]] = true;\n    return acc;\n}, {});\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_INITIALBINDINGS = context_entries_1.KeysInitSparql.initialBindings;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_QUERYFORMAT = context_entries_1.KeysInitSparql.queryFormat;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES = context_entries_1.KeysInitSparql.graphqlSingularizeVariables;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_LENIENT = context_entries_1.KeysInitSparql.lenient;\n/**\n * @deprecated Import this constant from @comunica/context-entries.\n */\nexports.KEY_CONTEXT_QUERY = context_entries_1.KeysInitSparql.query;\n//# sourceMappingURL=ActorInitSparql-browser.js.map"]},"metadata":{},"sourceType":"script"}