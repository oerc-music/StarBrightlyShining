{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n\nconst sax_1 = require(\"sax\");\n\nconst stream_1 = require(\"stream\");\n\nconst ParseError_1 = require(\"./ParseError\");\n\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\n\nclass RdfXmlParser extends stream_1.Transform {\n  constructor(args) {\n    super({\n      readableObjectMode: true\n    });\n    this.activeTagStack = [];\n    this.nodeIds = {};\n\n    if (args) {\n      Object.assign(this, args);\n      this.options = args;\n    }\n\n    if (!this.dataFactory) {\n      this.dataFactory = new rdf_data_factory_1.DataFactory();\n    }\n\n    if (!this.baseIRI) {\n      this.baseIRI = '';\n    }\n\n    if (!this.defaultGraph) {\n      this.defaultGraph = this.dataFactory.defaultGraph();\n    }\n\n    this.saxStream = sax_1.createStream(this.strict, {\n      xmlns: false,\n      position: this.trackPosition\n    }); // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n\n    if (!this.strict) {\n      this.saxStream._parser.looseCase = 'toString';\n    }\n\n    this.attachSaxListeners();\n  }\n  /**\n   * Parse the namespace of the given tag,\n   * and take into account the namespace of the parent tag that was already parsed.\n   * @param {Tag} tag A tag to parse the namespace from.\n   * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n   * @return {{[p: string]: string}[]} An array of namespaces,\n   *                                   where the last ones have a priority over the first ones.\n   */\n\n\n  static parseNamespace(tag, parentTag) {\n    const thisNs = {};\n    let hasNs = false;\n\n    for (const attributeKey in tag.attributes) {\n      if (attributeKey.startsWith('xmlns')) {\n        if (attributeKey.length === 5) {\n          // Set default namespace\n          hasNs = true;\n          thisNs[''] = tag.attributes[attributeKey];\n        } else if (attributeKey.charAt(5) === ':') {\n          // Definition of a prefix\n          hasNs = true;\n          thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n        }\n      }\n    }\n\n    const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n    return hasNs ? parentNs.concat([thisNs]) : parentNs;\n  }\n  /**\n   * Expand the given term value based on the given namespaces.\n   * @param {string} term A term value.\n   * @param {{[p: string]: string}[]} ns An array of namespaces,\n   *                                     where the last ones have a priority over the first ones.\n   * @param {RdfXmlParser} parser The RDF/XML parser instance.\n   * @return {IExpandedPrefix} An expanded prefix object.\n   */\n\n\n  static expandPrefixedTerm(term, ns, parser) {\n    const colonIndex = term.indexOf(':');\n    let prefix;\n    let local;\n\n    if (colonIndex >= 0) {\n      // Prefix is set\n      prefix = term.substr(0, colonIndex);\n      local = term.substr(colonIndex + 1);\n    } else {\n      // Prefix is not set, fallback to default namespace\n      prefix = '';\n      local = term;\n    }\n\n    let uri = null;\n    let defaultNamespace = null;\n\n    for (let i = ns.length - 1; i >= 0; i--) {\n      const nsElement = ns[i][prefix];\n\n      if (nsElement) {\n        uri = nsElement;\n        break;\n      } else if (!defaultNamespace) {\n        defaultNamespace = ns[i][''];\n      }\n    }\n\n    if (!uri) {\n      // Error on unbound prefix\n      if (prefix && prefix !== 'xmlns') {\n        throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n      } // Fallback to default namespace if no match was found\n\n\n      uri = defaultNamespace || '';\n    }\n\n    return {\n      prefix,\n      local,\n      uri\n    };\n  }\n  /**\n   * Check if the given IRI is valid.\n   * @param {string} iri A potential IRI.\n   * @return {boolean} If the given IRI is valid.\n   */\n\n\n  static isValidIri(iri) {\n    return RdfXmlParser.IRI_REGEX.test(iri);\n  }\n  /**\n   * Parses the given text stream into a quad stream.\n   * @param {NodeJS.EventEmitter} stream A text stream.\n   * @return {RDF.Stream} A quad stream.\n   */\n\n\n  import(stream) {\n    const output = new stream_1.PassThrough({\n      readableObjectMode: true\n    });\n    stream.on('error', error => parsed.emit('error', error));\n    stream.on('data', data => output.push(data));\n    stream.on('end', () => output.push(null));\n    const parsed = output.pipe(new RdfXmlParser(this.options));\n    return parsed;\n  }\n\n  _transform(chunk, encoding, callback) {\n    try {\n      this.saxStream.write(chunk, encoding);\n    } catch (e) {\n      return callback(e);\n    }\n\n    callback();\n  }\n  /**\n   * Create a new parse error instance.\n   * @param {string} message An error message.\n   * @return {Error} An error instance.\n   */\n\n\n  newParseError(message) {\n    return new ParseError_1.ParseError(this, message);\n  }\n  /**\n   * Convert the given value to a IRI by taking into account the baseIRI.\n   *\n   * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n   *\n   * @param {string} value The value to convert to an IRI.\n   * @param {IActiveTag} activeTag The active tag.\n   * @return {NamedNode} an IRI.\n   */\n\n\n  valueToUri(value, activeTag) {\n    return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n  }\n  /**\n   * Convert the given value URI string to a named node.\n   *\n   * This throw an error if the URI is invalid.\n   *\n   * @param {string} uri A URI string.\n   * @return {NamedNode} a named node.\n   */\n\n\n  uriToNamedNode(uri) {\n    // Validate URI\n    if (!RdfXmlParser.isValidIri(uri)) {\n      throw this.newParseError(`Invalid URI: ${uri}`);\n    }\n\n    return this.dataFactory.namedNode(uri);\n  }\n  /**\n   * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n   * If it is invalid, an error will thrown emitted.\n   * @param {string} value A value.\n   */\n\n\n  validateNcname(value) {\n    // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n    if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n      throw this.newParseError(`Not a valid NCName: ${value}`);\n    }\n  }\n\n  attachSaxListeners() {\n    this.saxStream.on('error', error => this.emit('error', error));\n    this.saxStream.on('opentag', this.onTag.bind(this));\n    this.saxStream.on('text', this.onText.bind(this));\n    this.saxStream.on('closetag', this.onCloseTag.bind(this));\n    this.saxStream.on('doctype', this.onDoctype.bind(this));\n  }\n  /**\n   * Handle the given tag.\n   * @param {QualifiedTag} tag A SAX tag.\n   */\n\n\n  onTag(tag) {\n    // Get parent tag\n    const parentTag = this.activeTagStack.length ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n    let currentParseType = ParseType.RESOURCE;\n\n    if (parentTag) {\n      parentTag.hadChildren = true;\n      currentParseType = parentTag.childrenParseType;\n    } // Check if this tag needs to be converted to a string\n\n\n    if (parentTag && parentTag.childrenStringTags) {\n      // Convert this tag to a string\n      const tagName = tag.name;\n      let attributes = '';\n\n      for (const attributeKey in tag.attributes) {\n        attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n      }\n\n      const tagContents = `${tagName}${attributes}`;\n      const tagString = `<${tagContents}>`;\n      parentTag.childrenStringTags.push(tagString); // Inherit the array, so that deeper tags are appended to this same array\n\n      const stringActiveTag = {\n        childrenStringTags: parentTag.childrenStringTags\n      };\n      stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n      this.activeTagStack.push(stringActiveTag); // Halt any further processing\n\n      return;\n    }\n\n    const activeTag = {};\n\n    if (parentTag) {\n      // Inherit language scope and baseIRI from parent\n      activeTag.language = parentTag.language;\n      activeTag.baseIRI = parentTag.baseIRI;\n    } else {\n      activeTag.baseIRI = this.baseIRI;\n    }\n\n    this.activeTagStack.push(activeTag);\n    activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n\n    if (currentParseType === ParseType.RESOURCE) {\n      this.onTagResource(tag, activeTag, parentTag, !parentTag);\n    } else {\n      // currentParseType === ParseType.PROPERTY\n      this.onTagProperty(tag, activeTag, parentTag);\n    }\n  }\n  /**\n   * Handle the given node element in resource-mode.\n   * @param {QualifiedTag} tag A SAX tag.\n   * @param {IActiveTag} activeTag The currently active tag.\n   * @param {IActiveTag} parentTag The parent tag or null.\n   * @param {boolean} rootTag If we are currently processing the root tag.\n   */\n\n\n  onTagResource(tag, activeTag, parentTag, rootTag) {\n    const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n    activeTag.childrenParseType = ParseType.PROPERTY; // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n\n    let typedNode = true;\n\n    if (tagExpanded.uri === RdfXmlParser.RDF) {\n      // Check forbidden property element names\n      if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n        throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n      }\n\n      switch (tagExpanded.local) {\n        case 'RDF':\n          // Tags under <rdf:RDF> must always be resources\n          activeTag.childrenParseType = ParseType.RESOURCE;\n\n        case 'Description':\n          typedNode = false;\n      }\n    }\n\n    const predicates = [];\n    const objects = []; // Collect all attributes as triples\n    // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n\n    let activeSubjectValue = null;\n    let claimSubjectNodeId = false;\n    let subjectValueBlank = false;\n    let explicitType = null;\n\n    for (const attributeKey in tag.attributes) {\n      const attributeValue = tag.attributes[attributeKey];\n      const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n\n      if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n        switch (attributeKeyExpanded.local) {\n          case 'about':\n            if (activeSubjectValue) {\n              throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n            }\n\n            activeSubjectValue = attributeValue;\n            continue;\n\n          case 'ID':\n            if (activeSubjectValue) {\n              throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n            }\n\n            this.validateNcname(attributeValue);\n            activeSubjectValue = '#' + attributeValue;\n            claimSubjectNodeId = true;\n            continue;\n\n          case 'nodeID':\n            if (activeSubjectValue) {\n              throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n            }\n\n            this.validateNcname(attributeValue);\n            activeSubjectValue = attributeValue;\n            subjectValueBlank = true;\n            continue;\n\n          case 'bagID':\n            throw this.newParseError(`rdf:bagID is not supported.`);\n\n          case 'type':\n            // Emit the rdf:type later as named node instead of the default literal\n            explicitType = attributeValue;\n            continue;\n\n          case 'aboutEach':\n            throw this.newParseError(`rdf:aboutEach is not supported.`);\n\n          case 'aboutEachPrefix':\n            throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n\n          case 'li':\n            throw this.newParseError(`rdf:li on node elements are not supported.`);\n        }\n      } else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n        if (attributeKeyExpanded.local === 'lang') {\n          activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n          continue;\n        } else if (attributeKeyExpanded.local === 'base') {\n          // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n          activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n          continue;\n        }\n      } // Interpret attributes at this point as properties on this node,\n      // but we ignore attributes that have no prefix or known expanded URI\n\n\n      if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n        predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n        objects.push(attributeValue);\n      }\n    } // Create the subject value _after_ all attributes have been processed\n\n\n    if (activeSubjectValue !== null) {\n      activeTag.subject = subjectValueBlank ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n\n      if (claimSubjectNodeId) {\n        this.claimNodeId(activeTag.subject);\n      }\n    } // Force the creation of a subject if it doesn't exist yet\n\n\n    if (!activeTag.subject) {\n      activeTag.subject = this.dataFactory.blankNode();\n    } // Emit the type if we're at a typed node\n\n\n    if (typedNode) {\n      const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n      this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n    }\n\n    if (parentTag) {\n      // If the parent tag defined a predicate, add the current tag as property value\n      if (parentTag.predicate) {\n        if (parentTag.childrenCollectionSubject) {\n          // RDF:List-based properties\n          const linkTerm = this.dataFactory.blankNode(); // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n\n          this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId); // Emit <current-chain> <rdf:first> value\n\n          this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId); // Store <current-chain> in the parent node\n\n          parentTag.childrenCollectionSubject = linkTerm;\n          parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n        } else {\n          // !parentTag.predicateEmitted\n          // Set-based properties\n          this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId); // Emit pending properties on the parent tag that had no defined subject yet.\n\n          for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n            this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n          } // Cleanup so we don't emit them again when the parent tag is closed\n\n\n          parentTag.predicateSubPredicates = [];\n          parentTag.predicateSubObjects = [];\n          parentTag.predicateEmitted = true;\n        }\n      } // Emit all collected triples\n\n\n      for (let i = 0; i < predicates.length; i++) {\n        const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n        this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n      } // Emit the rdf:type as named node instead of literal\n\n\n      if (explicitType) {\n        this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n      }\n    }\n  }\n  /**\n   * Handle the given property element in property-mode.\n   * @param {QualifiedTag} tag A SAX tag.\n   * @param {IActiveTag} activeTag The currently active tag.\n   * @param {IActiveTag} parentTag The parent tag or null.\n   */\n\n\n  onTagProperty(tag, activeTag, parentTag) {\n    const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n    activeTag.childrenParseType = ParseType.RESOURCE;\n    activeTag.subject = parentTag.subject; // Inherit parent subject\n\n    if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n      // Convert rdf:li to rdf:_x\n      if (!parentTag.listItemCounter) {\n        parentTag.listItemCounter = 1;\n      }\n\n      activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n    } else {\n      activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n    } // Check forbidden property element names\n\n\n    if (tagExpanded.uri === RdfXmlParser.RDF && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n      throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n    }\n\n    activeTag.predicateSubPredicates = [];\n    activeTag.predicateSubObjects = [];\n    let parseType = false;\n    let attributedProperty = false; // Collect all attributes as triples\n    // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n\n    let activeSubSubjectValue = null;\n    let subSubjectValueBlank = true;\n    const predicates = [];\n    const objects = [];\n\n    for (const propertyAttributeKey in tag.attributes) {\n      const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n      const propertyAttributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n\n      if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n        switch (propertyAttributeKeyExpanded.local) {\n          case 'resource':\n            if (activeSubSubjectValue) {\n              throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n            }\n\n            if (parseType) {\n              throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n            }\n\n            activeTag.hadChildren = true;\n            activeSubSubjectValue = propertyAttributeValue;\n            subSubjectValueBlank = false;\n            continue;\n\n          case 'datatype':\n            if (attributedProperty) {\n              throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n            }\n\n            if (parseType) {\n              throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n            }\n\n            activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n            continue;\n\n          case 'nodeID':\n            if (attributedProperty) {\n              throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n            }\n\n            if (activeTag.hadChildren) {\n              throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n            }\n\n            if (parseType) {\n              throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n            }\n\n            this.validateNcname(propertyAttributeValue);\n            activeTag.hadChildren = true;\n            activeSubSubjectValue = propertyAttributeValue;\n            subSubjectValueBlank = true;\n            continue;\n\n          case 'bagID':\n            throw this.newParseError(`rdf:bagID is not supported.`);\n\n          case 'parseType':\n            // Validation\n            if (attributedProperty) {\n              throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n            }\n\n            if (activeTag.datatype) {\n              throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n            }\n\n            if (activeSubSubjectValue) {\n              throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n            }\n\n            if (propertyAttributeValue === 'Resource') {\n              parseType = true;\n              activeTag.childrenParseType = ParseType.PROPERTY; // Turn this property element into a node element\n\n              const nestedBNode = this.dataFactory.blankNode();\n              this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n              activeTag.subject = nestedBNode;\n              activeTag.predicate = null;\n            } else if (propertyAttributeValue === 'Collection') {\n              parseType = true; // Interpret children as being part of an rdf:List\n\n              activeTag.hadChildren = true;\n              activeTag.childrenCollectionSubject = activeTag.subject;\n              activeTag.childrenCollectionPredicate = activeTag.predicate;\n              subSubjectValueBlank = false;\n            } else if (propertyAttributeValue === 'Literal') {\n              parseType = true; // Interpret children as being part of a literal string\n\n              activeTag.childrenTagsToString = true;\n              activeTag.childrenStringTags = [];\n            }\n\n            continue;\n\n          case 'ID':\n            this.validateNcname(propertyAttributeValue);\n            activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n            this.claimNodeId(activeTag.reifiedStatementId);\n            continue;\n        }\n      } else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML && propertyAttributeKeyExpanded.local === 'lang') {\n        activeTag.language = propertyAttributeValue === '' ? null : propertyAttributeValue.toLowerCase();\n        continue;\n      } // Interpret attributes at this point as properties via implicit blank nodes on the property,\n      // but we ignore attributes that have no prefix or known expanded URI\n\n\n      if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns' && propertyAttributeKeyExpanded.uri) {\n        if (parseType || activeTag.datatype) {\n          throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n        }\n\n        activeTag.hadChildren = true;\n        attributedProperty = true;\n        predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n        objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n      }\n    } // Create the subject value _after_ all attributes have been processed\n\n\n    if (activeSubSubjectValue !== null) {\n      const subjectParent = activeTag.subject;\n      activeTag.subject = subSubjectValueBlank ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n      this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId); // Emit our buffered triples\n\n      for (let i = 0; i < predicates.length; i++) {\n        this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n      }\n\n      activeTag.predicateEmitted = true;\n    } else if (subSubjectValueBlank) {\n      // The current property element has no defined subject\n      // Let's buffer the properties until the child node defines a subject,\n      // or if the tag closes.\n      activeTag.predicateSubPredicates = predicates;\n      activeTag.predicateSubObjects = objects;\n      activeTag.predicateEmitted = false;\n    }\n  }\n  /**\n   * Emit the given triple to the stream.\n   * @param {Term} subject A subject term.\n   * @param {Term} predicate A predicate term.\n   * @param {Term} object An object term.\n   * @param {Term} statementId An optional resource that identifies the triple.\n   *                           If truthy, then the given triple will also be emitted reified.\n   */\n\n\n  emitTriple(subject, predicate, object, statementId) {\n    this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph)); // Reify triple\n\n    if (statementId) {\n      this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n      this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n      this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n      this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n    }\n  }\n  /**\n   * Register the given term as a node ID.\n   * If one was already registered, this will emit an error.\n   *\n   * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n   * @param {Term} term An RDF term.\n   */\n\n\n  claimNodeId(term) {\n    if (!this.allowDuplicateRdfIds) {\n      if (this.nodeIds[term.value]) {\n        throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n      }\n\n      this.nodeIds[term.value] = true;\n    }\n  }\n  /**\n   * Handle the given text string.\n   * @param {string} text A parsed text string.\n   */\n\n\n  onText(text) {\n    const activeTag = this.activeTagStack.length ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n\n    if (activeTag) {\n      if (activeTag.childrenStringTags) {\n        activeTag.childrenStringTags.push(text);\n      } else if (activeTag.predicate) {\n        activeTag.text = text;\n      }\n    }\n  }\n  /**\n   * Handle the closing of the last tag.\n   */\n\n\n  onCloseTag() {\n    const poppedTag = this.activeTagStack.pop(); // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n\n    if (poppedTag.childrenStringEmitClosingTag) {\n      poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n    } // Set the literal value if we were collecting XML tags to string\n\n\n    if (poppedTag.childrenTagsToString) {\n      poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n      poppedTag.text = poppedTag.childrenStringTags.join('');\n      poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n    }\n\n    if (poppedTag.childrenCollectionSubject) {\n      // Terminate the rdf:List\n      this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n    } else if (poppedTag.predicate) {\n      if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n        // Property element contains text\n        this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n      } else if (!poppedTag.predicateEmitted) {\n        // Emit remaining properties on an anonymous property element\n        const subject = this.dataFactory.blankNode();\n        this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n\n        for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n          this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n        }\n      }\n    }\n  }\n  /**\n   * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n   * @param {string} doctype The read doctype.\n   */\n\n\n  onDoctype(doctype) {\n    doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n      this.saxStream._parser.ENTITIES[prefix] = uri;\n      return '';\n    });\n  }\n\n}\n\nexports.RdfXmlParser = RdfXmlParser; // Regex for valid IRIs\n\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n  xml: RdfXmlParser.XML\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = ['RDF', 'ID', 'about', 'bagID', 'parseType', 'resource', 'nodeID', 'li', 'aboutEach', 'aboutEachPrefix'];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = ['Description', 'RDF', 'ID', 'about', 'bagID', 'parseType', 'resource', 'nodeID', 'aboutEach', 'aboutEachPrefix']; // tslint:disable-next-line:max-line-length\n\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n\n(function (ParseType) {\n  ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n  ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js"],"names":["Object","defineProperty","exports","value","relative_to_absolute_iri_1","require","sax_1","stream_1","ParseError_1","rdf_data_factory_1","RdfXmlParser","Transform","constructor","args","readableObjectMode","activeTagStack","nodeIds","assign","options","dataFactory","DataFactory","baseIRI","defaultGraph","saxStream","createStream","strict","xmlns","position","trackPosition","_parser","looseCase","attachSaxListeners","parseNamespace","tag","parentTag","thisNs","hasNs","attributeKey","attributes","startsWith","length","charAt","substr","parentNs","ns","DEFAULT_NS","concat","expandPrefixedTerm","term","parser","colonIndex","indexOf","prefix","local","uri","defaultNamespace","i","nsElement","ParseError","isValidIri","iri","IRI_REGEX","test","import","stream","output","PassThrough","on","error","parsed","emit","data","push","pipe","_transform","chunk","encoding","callback","write","e","newParseError","message","valueToUri","activeTag","uriToNamedNode","resolve","namedNode","validateNcname","NCNAME_MATCHER","onTag","bind","onText","onCloseTag","onDoctype","currentParseType","ParseType","RESOURCE","hadChildren","childrenParseType","childrenStringTags","tagName","name","tagContents","tagString","stringActiveTag","childrenStringEmitClosingTag","language","onTagResource","onTagProperty","rootTag","tagExpanded","PROPERTY","typedNode","RDF","FORBIDDEN_NODE_ELEMENTS","predicates","objects","activeSubjectValue","claimSubjectNodeId","subjectValueBlank","explicitType","attributeValue","attributeKeyExpanded","XML","toLowerCase","subject","blankNode","claimNodeId","type","emitTriple","reifiedStatementId","predicate","childrenCollectionSubject","linkTerm","childrenCollectionPredicate","predicateSubPredicates","predicateSubObjects","predicateEmitted","object","literal","datatype","listItemCounter","FORBIDDEN_PROPERTY_ELEMENTS","parseType","attributedProperty","activeSubSubjectValue","subSubjectValueBlank","propertyAttributeKey","propertyAttributeValue","propertyAttributeKeyExpanded","nestedBNode","childrenTagsToString","subjectParent","statementId","quad","allowDuplicateRdfIds","text","poppedTag","pop","join","doctype","replace","match","ENTITIES","MIME_TYPE","XMLNS","xml"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst sax_1 = require(\"sax\");\nconst stream_1 = require(\"stream\");\nconst ParseError_1 = require(\"./ParseError\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nclass RdfXmlParser extends stream_1.Transform {\n    constructor(args) {\n        super({ readableObjectMode: true });\n        this.activeTagStack = [];\n        this.nodeIds = {};\n        if (args) {\n            Object.assign(this, args);\n            this.options = args;\n        }\n        if (!this.dataFactory) {\n            this.dataFactory = new rdf_data_factory_1.DataFactory();\n        }\n        if (!this.baseIRI) {\n            this.baseIRI = '';\n        }\n        if (!this.defaultGraph) {\n            this.defaultGraph = this.dataFactory.defaultGraph();\n        }\n        this.saxStream = sax_1.createStream(this.strict, { xmlns: false, position: this.trackPosition });\n        // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n        if (!this.strict) {\n            this.saxStream._parser.looseCase = 'toString';\n        }\n        this.attachSaxListeners();\n    }\n    /**\n     * Parse the namespace of the given tag,\n     * and take into account the namespace of the parent tag that was already parsed.\n     * @param {Tag} tag A tag to parse the namespace from.\n     * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n     * @return {{[p: string]: string}[]} An array of namespaces,\n     *                                   where the last ones have a priority over the first ones.\n     */\n    static parseNamespace(tag, parentTag) {\n        const thisNs = {};\n        let hasNs = false;\n        for (const attributeKey in tag.attributes) {\n            if (attributeKey.startsWith('xmlns')) {\n                if (attributeKey.length === 5) {\n                    // Set default namespace\n                    hasNs = true;\n                    thisNs[''] = tag.attributes[attributeKey];\n                }\n                else if (attributeKey.charAt(5) === ':') {\n                    // Definition of a prefix\n                    hasNs = true;\n                    thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n                }\n            }\n        }\n        const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n        return hasNs ? parentNs.concat([thisNs]) : parentNs;\n    }\n    /**\n     * Expand the given term value based on the given namespaces.\n     * @param {string} term A term value.\n     * @param {{[p: string]: string}[]} ns An array of namespaces,\n     *                                     where the last ones have a priority over the first ones.\n     * @param {RdfXmlParser} parser The RDF/XML parser instance.\n     * @return {IExpandedPrefix} An expanded prefix object.\n     */\n    static expandPrefixedTerm(term, ns, parser) {\n        const colonIndex = term.indexOf(':');\n        let prefix;\n        let local;\n        if (colonIndex >= 0) {\n            // Prefix is set\n            prefix = term.substr(0, colonIndex);\n            local = term.substr(colonIndex + 1);\n        }\n        else {\n            // Prefix is not set, fallback to default namespace\n            prefix = '';\n            local = term;\n        }\n        let uri = null;\n        let defaultNamespace = null;\n        for (let i = ns.length - 1; i >= 0; i--) {\n            const nsElement = ns[i][prefix];\n            if (nsElement) {\n                uri = nsElement;\n                break;\n            }\n            else if (!defaultNamespace) {\n                defaultNamespace = ns[i][''];\n            }\n        }\n        if (!uri) {\n            // Error on unbound prefix\n            if (prefix && prefix !== 'xmlns') {\n                throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n            }\n            // Fallback to default namespace if no match was found\n            uri = defaultNamespace || '';\n        }\n        return { prefix, local, uri };\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return RdfXmlParser.IRI_REGEX.test(iri);\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new RdfXmlParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        try {\n            this.saxStream.write(chunk, encoding);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        callback();\n    }\n    /**\n     * Create a new parse error instance.\n     * @param {string} message An error message.\n     * @return {Error} An error instance.\n     */\n    newParseError(message) {\n        return new ParseError_1.ParseError(this, message);\n    }\n    /**\n     * Convert the given value to a IRI by taking into account the baseIRI.\n     *\n     * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n     *\n     * @param {string} value The value to convert to an IRI.\n     * @param {IActiveTag} activeTag The active tag.\n     * @return {NamedNode} an IRI.\n     */\n    valueToUri(value, activeTag) {\n        return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n    }\n    /**\n     * Convert the given value URI string to a named node.\n     *\n     * This throw an error if the URI is invalid.\n     *\n     * @param {string} uri A URI string.\n     * @return {NamedNode} a named node.\n     */\n    uriToNamedNode(uri) {\n        // Validate URI\n        if (!RdfXmlParser.isValidIri(uri)) {\n            throw this.newParseError(`Invalid URI: ${uri}`);\n        }\n        return this.dataFactory.namedNode(uri);\n    }\n    /**\n     * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n     * If it is invalid, an error will thrown emitted.\n     * @param {string} value A value.\n     */\n    validateNcname(value) {\n        // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n        if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n            throw this.newParseError(`Not a valid NCName: ${value}`);\n        }\n    }\n    attachSaxListeners() {\n        this.saxStream.on('error', (error) => this.emit('error', error));\n        this.saxStream.on('opentag', this.onTag.bind(this));\n        this.saxStream.on('text', this.onText.bind(this));\n        this.saxStream.on('closetag', this.onCloseTag.bind(this));\n        this.saxStream.on('doctype', this.onDoctype.bind(this));\n    }\n    /**\n     * Handle the given tag.\n     * @param {QualifiedTag} tag A SAX tag.\n     */\n    onTag(tag) {\n        // Get parent tag\n        const parentTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        let currentParseType = ParseType.RESOURCE;\n        if (parentTag) {\n            parentTag.hadChildren = true;\n            currentParseType = parentTag.childrenParseType;\n        }\n        // Check if this tag needs to be converted to a string\n        if (parentTag && parentTag.childrenStringTags) {\n            // Convert this tag to a string\n            const tagName = tag.name;\n            let attributes = '';\n            for (const attributeKey in tag.attributes) {\n                attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n            }\n            const tagContents = `${tagName}${attributes}`;\n            const tagString = `<${tagContents}>`;\n            parentTag.childrenStringTags.push(tagString);\n            // Inherit the array, so that deeper tags are appended to this same array\n            const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };\n            stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n            this.activeTagStack.push(stringActiveTag);\n            // Halt any further processing\n            return;\n        }\n        const activeTag = {};\n        if (parentTag) {\n            // Inherit language scope and baseIRI from parent\n            activeTag.language = parentTag.language;\n            activeTag.baseIRI = parentTag.baseIRI;\n        }\n        else {\n            activeTag.baseIRI = this.baseIRI;\n        }\n        this.activeTagStack.push(activeTag);\n        activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n        if (currentParseType === ParseType.RESOURCE) {\n            this.onTagResource(tag, activeTag, parentTag, !parentTag);\n        }\n        else { // currentParseType === ParseType.PROPERTY\n            this.onTagProperty(tag, activeTag, parentTag);\n        }\n    }\n    /**\n     * Handle the given node element in resource-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     * @param {boolean} rootTag If we are currently processing the root tag.\n     */\n    onTagResource(tag, activeTag, parentTag, rootTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.PROPERTY;\n        // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n        let typedNode = true;\n        if (tagExpanded.uri === RdfXmlParser.RDF) {\n            // Check forbidden property element names\n            if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n                throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n            }\n            switch (tagExpanded.local) {\n                case 'RDF':\n                    // Tags under <rdf:RDF> must always be resources\n                    activeTag.childrenParseType = ParseType.RESOURCE;\n                case 'Description':\n                    typedNode = false;\n            }\n        }\n        const predicates = [];\n        const objects = [];\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubjectValue = null;\n        let claimSubjectNodeId = false;\n        let subjectValueBlank = false;\n        let explicitType = null;\n        for (const attributeKey in tag.attributes) {\n            const attributeValue = tag.attributes[attributeKey];\n            const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n            if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (attributeKeyExpanded.local) {\n                    case 'about':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        activeSubjectValue = attributeValue;\n                        continue;\n                    case 'ID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = '#' + attributeValue;\n                        claimSubjectNodeId = true;\n                        continue;\n                    case 'nodeID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = attributeValue;\n                        subjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'type':\n                        // Emit the rdf:type later as named node instead of the default literal\n                        explicitType = attributeValue;\n                        continue;\n                    case 'aboutEach':\n                        throw this.newParseError(`rdf:aboutEach is not supported.`);\n                    case 'aboutEachPrefix':\n                        throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n                    case 'li':\n                        throw this.newParseError(`rdf:li on node elements are not supported.`);\n                }\n            }\n            else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n                if (attributeKeyExpanded.local === 'lang') {\n                    activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n                    continue;\n                }\n                else if (attributeKeyExpanded.local === 'base') {\n                    // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n                    activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n                    continue;\n                }\n            }\n            // Interpret attributes at this point as properties on this node,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n                predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n                objects.push(attributeValue);\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubjectValue !== null) {\n            activeTag.subject = subjectValueBlank\n                ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n            if (claimSubjectNodeId) {\n                this.claimNodeId(activeTag.subject);\n            }\n        }\n        // Force the creation of a subject if it doesn't exist yet\n        if (!activeTag.subject) {\n            activeTag.subject = this.dataFactory.blankNode();\n        }\n        // Emit the type if we're at a typed node\n        if (typedNode) {\n            const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n        }\n        if (parentTag) {\n            // If the parent tag defined a predicate, add the current tag as property value\n            if (parentTag.predicate) {\n                if (parentTag.childrenCollectionSubject) {\n                    // RDF:List-based properties\n                    const linkTerm = this.dataFactory.blankNode();\n                    // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n                    this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);\n                    // Emit <current-chain> <rdf:first> value\n                    this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId);\n                    // Store <current-chain> in the parent node\n                    parentTag.childrenCollectionSubject = linkTerm;\n                    parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n                }\n                else { // !parentTag.predicateEmitted\n                    // Set-based properties\n                    this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);\n                    // Emit pending properties on the parent tag that had no defined subject yet.\n                    for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n                        this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n                    }\n                    // Cleanup so we don't emit them again when the parent tag is closed\n                    parentTag.predicateSubPredicates = [];\n                    parentTag.predicateSubObjects = [];\n                    parentTag.predicateEmitted = true;\n                }\n            }\n            // Emit all collected triples\n            for (let i = 0; i < predicates.length; i++) {\n                const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n                this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n            }\n            // Emit the rdf:type as named node instead of literal\n            if (explicitType) {\n                this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n            }\n        }\n    }\n    /**\n     * Handle the given property element in property-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     */\n    onTagProperty(tag, activeTag, parentTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.RESOURCE;\n        activeTag.subject = parentTag.subject; // Inherit parent subject\n        if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n            // Convert rdf:li to rdf:_x\n            if (!parentTag.listItemCounter) {\n                parentTag.listItemCounter = 1;\n            }\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n        }\n        else {\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n        }\n        // Check forbidden property element names\n        if (tagExpanded.uri === RdfXmlParser.RDF\n            && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n            throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n        }\n        activeTag.predicateSubPredicates = [];\n        activeTag.predicateSubObjects = [];\n        let parseType = false;\n        let attributedProperty = false;\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubSubjectValue = null;\n        let subSubjectValueBlank = true;\n        const predicates = [];\n        const objects = [];\n        for (const propertyAttributeKey in tag.attributes) {\n            const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n            const propertyAttributeKeyExpanded = RdfXmlParser\n                .expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n            if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (propertyAttributeKeyExpanded.local) {\n                    case 'resource':\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n                        }\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = false;\n                        continue;\n                    case 'datatype':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n                        }\n                        activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n                        continue;\n                    case 'nodeID':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (activeTag.hadChildren) {\n                            throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n                        }\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'parseType':\n                        // Validation\n                        if (attributedProperty) {\n                            throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n                        }\n                        if (activeTag.datatype) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n                        }\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n                        }\n                        if (propertyAttributeValue === 'Resource') {\n                            parseType = true;\n                            activeTag.childrenParseType = ParseType.PROPERTY;\n                            // Turn this property element into a node element\n                            const nestedBNode = this.dataFactory.blankNode();\n                            this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n                            activeTag.subject = nestedBNode;\n                            activeTag.predicate = null;\n                        }\n                        else if (propertyAttributeValue === 'Collection') {\n                            parseType = true;\n                            // Interpret children as being part of an rdf:List\n                            activeTag.hadChildren = true;\n                            activeTag.childrenCollectionSubject = activeTag.subject;\n                            activeTag.childrenCollectionPredicate = activeTag.predicate;\n                            subSubjectValueBlank = false;\n                        }\n                        else if (propertyAttributeValue === 'Literal') {\n                            parseType = true;\n                            // Interpret children as being part of a literal string\n                            activeTag.childrenTagsToString = true;\n                            activeTag.childrenStringTags = [];\n                        }\n                        continue;\n                    case 'ID':\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n                        this.claimNodeId(activeTag.reifiedStatementId);\n                        continue;\n                }\n            }\n            else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML\n                && propertyAttributeKeyExpanded.local === 'lang') {\n                activeTag.language = propertyAttributeValue === ''\n                    ? null : propertyAttributeValue.toLowerCase();\n                continue;\n            }\n            // Interpret attributes at this point as properties via implicit blank nodes on the property,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns'\n                && propertyAttributeKeyExpanded.uri) {\n                if (parseType || activeTag.datatype) {\n                    throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n                }\n                activeTag.hadChildren = true;\n                attributedProperty = true;\n                predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n                objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubSubjectValue !== null) {\n            const subjectParent = activeTag.subject;\n            activeTag.subject = subSubjectValueBlank\n                ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n            this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);\n            // Emit our buffered triples\n            for (let i = 0; i < predicates.length; i++) {\n                this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n            }\n            activeTag.predicateEmitted = true;\n        }\n        else if (subSubjectValueBlank) {\n            // The current property element has no defined subject\n            // Let's buffer the properties until the child node defines a subject,\n            // or if the tag closes.\n            activeTag.predicateSubPredicates = predicates;\n            activeTag.predicateSubObjects = objects;\n            activeTag.predicateEmitted = false;\n        }\n    }\n    /**\n     * Emit the given triple to the stream.\n     * @param {Term} subject A subject term.\n     * @param {Term} predicate A predicate term.\n     * @param {Term} object An object term.\n     * @param {Term} statementId An optional resource that identifies the triple.\n     *                           If truthy, then the given triple will also be emitted reified.\n     */\n    emitTriple(subject, predicate, object, statementId) {\n        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));\n        // Reify triple\n        if (statementId) {\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n        }\n    }\n    /**\n     * Register the given term as a node ID.\n     * If one was already registered, this will emit an error.\n     *\n     * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n     * @param {Term} term An RDF term.\n     */\n    claimNodeId(term) {\n        if (!this.allowDuplicateRdfIds) {\n            if (this.nodeIds[term.value]) {\n                throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n            }\n            this.nodeIds[term.value] = true;\n        }\n    }\n    /**\n     * Handle the given text string.\n     * @param {string} text A parsed text string.\n     */\n    onText(text) {\n        const activeTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        if (activeTag) {\n            if (activeTag.childrenStringTags) {\n                activeTag.childrenStringTags.push(text);\n            }\n            else if (activeTag.predicate) {\n                activeTag.text = text;\n            }\n        }\n    }\n    /**\n     * Handle the closing of the last tag.\n     */\n    onCloseTag() {\n        const poppedTag = this.activeTagStack.pop();\n        // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n        if (poppedTag.childrenStringEmitClosingTag) {\n            poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n        }\n        // Set the literal value if we were collecting XML tags to string\n        if (poppedTag.childrenTagsToString) {\n            poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n            poppedTag.text = poppedTag.childrenStringTags.join('');\n            poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n        }\n        if (poppedTag.childrenCollectionSubject) {\n            // Terminate the rdf:List\n            this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n        }\n        else if (poppedTag.predicate) {\n            if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n                // Property element contains text\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n            }\n            else if (!poppedTag.predicateEmitted) {\n                // Emit remaining properties on an anonymous property element\n                const subject = this.dataFactory.blankNode();\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n                for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n                    this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n                }\n            }\n        }\n    }\n    /**\n     * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n     * @param {string} doctype The read doctype.\n     */\n    onDoctype(doctype) {\n        doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n            this.saxStream._parser.ENTITIES[prefix] = uri;\n            return '';\n        });\n    }\n}\nexports.RdfXmlParser = RdfXmlParser;\n// Regex for valid IRIs\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n    xml: RdfXmlParser.XML,\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'li',\n    'aboutEach',\n    'aboutEachPrefix',\n];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [\n    'Description',\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'aboutEach',\n    'aboutEachPrefix',\n];\n// tslint:disable-next-line:max-line-length\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n(function (ParseType) {\n    ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n    ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));\n//# sourceMappingURL=RdfXmlParser.js.map"]},"metadata":{},"sourceType":"script"}