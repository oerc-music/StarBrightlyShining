{"ast":null,"code":"import React from 'react';\nimport UpdateContext from '../UpdateContext';\nimport useLatestUpdate from '../hooks/useLatestUpdate';\nconst {\n  Provider\n} = UpdateContext;\n/**\n * Component that creates an UpdateContext by subscribing\n * to updates of an array (or whitespace-separated string) of resources.\n *\n * Children or descendants that use UpdateContext as a context\n * will be rerendered if any of those resources are updated.\n */\n\nexport default function LiveUpdate({\n  subscribe = '*',\n  children = null\n}) {\n  const urls = typeof subscribe !== 'string' ? subscribe : /\\S/.test(subscribe) ? subscribe.trim().split(/\\s+/) : [];\n  const latestUpdate = useLatestUpdate(...urls);\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: latestUpdate\n  }, children);\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/react/module/components/LiveUpdate.js"],"names":["React","UpdateContext","useLatestUpdate","Provider","LiveUpdate","subscribe","children","urls","test","trim","split","latestUpdate","createElement","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,MAAM;AACJC,EAAAA;AADI,IAEFF,aAFJ;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASG,UAAT,CAAoB;AACjCC,EAAAA,SAAS,GAAG,GADqB;AAEjCC,EAAAA,QAAQ,GAAG;AAFsB,CAApB,EAGZ;AACD,QAAMC,IAAI,GAAG,OAAOF,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4C,KAAKG,IAAL,CAAUH,SAAV,IAAuBA,SAAS,CAACI,IAAV,GAAiBC,KAAjB,CAAuB,KAAvB,CAAvB,GAAuD,EAAhH;AACA,QAAMC,YAAY,GAAGT,eAAe,CAAC,GAAGK,IAAJ,CAApC;AACA,SAAO,aAAaP,KAAK,CAACY,aAAN,CAAoBT,QAApB,EAA8B;AAChDU,IAAAA,KAAK,EAAEF;AADyC,GAA9B,EAEjBL,QAFiB,CAApB;AAGD","sourcesContent":["import React from 'react';\nimport UpdateContext from '../UpdateContext';\nimport useLatestUpdate from '../hooks/useLatestUpdate';\nconst {\n  Provider\n} = UpdateContext;\n/**\n * Component that creates an UpdateContext by subscribing\n * to updates of an array (or whitespace-separated string) of resources.\n *\n * Children or descendants that use UpdateContext as a context\n * will be rerendered if any of those resources are updated.\n */\n\nexport default function LiveUpdate({\n  subscribe = '*',\n  children = null\n}) {\n  const urls = typeof subscribe !== 'string' ? subscribe : /\\S/.test(subscribe) ? subscribe.trim().split(/\\s+/) : [];\n  const latestUpdate = useLatestUpdate(...urls);\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: latestUpdate\n  }, children);\n}"]},"metadata":{},"sourceType":"module"}