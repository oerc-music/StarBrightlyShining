{"ast":null,"code":"/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  } // helper for modifying component during Hash First Degree Quads\n\n\n  modifyFirstDegreeComponent(id, component, key) {\n    if (component.termType !== 'BlankNode') {\n      return component;\n    }\n\n    if (key === 'graph') {\n      return {\n        termType: 'BlankNode',\n        value: '_:g'\n      };\n    }\n\n    return {\n      termType: 'BlankNode',\n      value: component.value === id ? '_:a' : '_:z'\n    };\n  } // helper for getting a related predicate\n\n\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  } // helper for creating hash to related blank nodes map\n\n\n  async createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n\n    const quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:\n\n    let i = 0;\n\n    for (const quad of quads) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n\n      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      } // Note: batch hashing related blank nodes 100 at a time\n\n\n      if (++i % 100 === 0) {\n        await this._yield();\n      } // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n\n\n      const hash = await this.hashRelatedBlankNode(related, quad, issuer, position);\n      const entries = hashToRelated.get(hash);\n\n      if (entries) {\n        entries.push(related);\n      } else {\n        hashToRelated.set(hash, [related]);\n      }\n    }\n\n    return hashToRelated;\n  }\n\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-canonize/lib/URGNA2012.js"],"names":["URDNA2015","require","module","exports","URDNA2012","constructor","name","hashAlgorithm","modifyFirstDegreeComponent","id","component","key","termType","value","getRelatedPredicate","quad","predicate","createHashToRelated","issuer","hashToRelated","Map","quads","blankNodeInfo","get","i","position","related","subject","object","_yield","hash","hashRelatedBlankNode","entries","push","set"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AACjDK,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,IAAL,GAAY,WAAZ;AACA,SAAKC,aAAL,GAAqB,MAArB;AACD,GALgD,CAOjD;;;AACAC,EAAAA,0BAA0B,CAACC,EAAD,EAAKC,SAAL,EAAgBC,GAAhB,EAAqB;AAC7C,QAAGD,SAAS,CAACE,QAAV,KAAuB,WAA1B,EAAuC;AACrC,aAAOF,SAAP;AACD;;AACD,QAAGC,GAAG,KAAK,OAAX,EAAoB;AAClB,aAAO;AACLC,QAAAA,QAAQ,EAAE,WADL;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AACD,WAAO;AACLD,MAAAA,QAAQ,EAAE,WADL;AAELC,MAAAA,KAAK,EAAGH,SAAS,CAACG,KAAV,KAAoBJ,EAApB,GAAyB,KAAzB,GAAiC;AAFpC,KAAP;AAID,GAtBgD,CAwBjD;;;AACAK,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,WAAOA,IAAI,CAACC,SAAL,CAAeH,KAAtB;AACD,GA3BgD,CA6BjD;;;AACyB,QAAnBI,mBAAmB,CAACR,EAAD,EAAKS,MAAL,EAAa;AACpC;AACA;AACA,UAAMC,aAAa,GAAG,IAAIC,GAAJ,EAAtB,CAHoC,CAKpC;AACA;;AACA,UAAMC,KAAK,GAAG,KAAKC,aAAL,CAAmBC,GAAnB,CAAuBd,EAAvB,EAA2BY,KAAzC,CAPoC,CASpC;;AACA,QAAIG,CAAC,GAAG,CAAR;;AACA,SAAI,MAAMT,IAAV,IAAkBM,KAAlB,EAAyB;AACvB;AACA;AACA;AACA;AACA,UAAII,QAAJ;AACA,UAAIC,OAAJ;;AACA,UAAGX,IAAI,CAACY,OAAL,CAAaf,QAAb,KAA0B,WAA1B,IAAyCG,IAAI,CAACY,OAAL,CAAad,KAAb,KAAuBJ,EAAnE,EAAuE;AACrEiB,QAAAA,OAAO,GAAGX,IAAI,CAACY,OAAL,CAAad,KAAvB;AACAY,QAAAA,QAAQ,GAAG,GAAX;AACD,OAHD,MAGO,IACLV,IAAI,CAACa,MAAL,CAAYhB,QAAZ,KAAyB,WAAzB,IAAwCG,IAAI,CAACa,MAAL,CAAYf,KAAZ,KAAsBJ,EADzD,EAC6D;AAClE;AACA;AACA;AACA;AACAiB,QAAAA,OAAO,GAAGX,IAAI,CAACa,MAAL,CAAYf,KAAtB;AACAY,QAAAA,QAAQ,GAAG,GAAX;AACD,OARM,MAQA;AACL;AACA;AACD,OArBsB,CAsBvB;;;AACA,UAAG,EAAED,CAAF,GAAM,GAAN,KAAc,CAAjB,EAAoB;AAClB,cAAM,KAAKK,MAAL,EAAN;AACD,OAzBsB,CA0BvB;AACA;AACA;;;AACA,YAAMC,IAAI,GAAG,MAAM,KAAKC,oBAAL,CACjBL,OADiB,EACRX,IADQ,EACFG,MADE,EACMO,QADN,CAAnB;AAEA,YAAMO,OAAO,GAAGb,aAAa,CAACI,GAAd,CAAkBO,IAAlB,CAAhB;;AACA,UAAGE,OAAH,EAAY;AACVA,QAAAA,OAAO,CAACC,IAAR,CAAaP,OAAb;AACD,OAFD,MAEO;AACLP,QAAAA,aAAa,CAACe,GAAd,CAAkBJ,IAAlB,EAAwB,CAACJ,OAAD,CAAxB;AACD;AACF;;AAED,WAAOP,aAAP;AACD;;AAjFgD,CAAnD","sourcesContent":["/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    if(key === 'graph') {\n      return {\n        termType: 'BlankNode',\n        value: '_:g'\n      };\n    }\n    return {\n      termType: 'BlankNode',\n      value: (component.value === id ? '_:a' : '_:z')\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  async createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    let i = 0;\n    for(const quad of quads) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // Note: batch hashing related blank nodes 100 at a time\n      if(++i % 100 === 0) {\n        await this._yield();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = await this.hashRelatedBlankNode(\n        related, quad, issuer, position);\n      const entries = hashToRelated.get(hash);\n      if(entries) {\n        entries.push(related);\n      } else {\n        hashToRelated.set(hash, [related]);\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}