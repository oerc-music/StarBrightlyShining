{"ast":null,"code":"import { JSONLDResolver } from 'ldflex';\n/**\n * A ContextResolver is a combined resolver/handler that:\n * - resolves a JSON-LD context\n * - handles by returning an object that\n *   - is the initial context passed to the constructor\n *   - allows extending that context by calling `.extend`\n *   - when `await`ed, resolves to the expanded context\n */\n\nexport default class ContextResolver extends JSONLDResolver {\n  constructor(context) {\n    super(context); // Create an exposed version of the initial context, with additional functionality\n\n    const exposedContext = this._exposedContext = Object.create(context['@context']); // Allow extending the context\n\n    Object.defineProperty(exposedContext, 'extend', {\n      value: (...contexts) => this.extendContext(...contexts)\n    }); // Resolve to the expanded context\n\n    Object.defineProperty(exposedContext, 'then', {\n      value: (resolve, reject) => this._context.then(ctx => ctx.contextRaw).then(resolve, reject)\n    });\n  }\n\n  handle() {\n    return this._exposedContext;\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/query-ldflex/module/resolvers/ContextResolver.js"],"names":["JSONLDResolver","ContextResolver","constructor","context","exposedContext","_exposedContext","Object","create","defineProperty","value","contexts","extendContext","resolve","reject","_context","then","ctx","contextRaw","handle"],"mappings":"AAAA,SAASA,cAAT,QAA+B,QAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,eAAN,SAA8BD,cAA9B,CAA6C;AAC1DE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN,EADmB,CACH;;AAEhB,UAAMC,cAAc,GAAG,KAAKC,eAAL,GAAuBC,MAAM,CAACC,MAAP,CAAcJ,OAAO,CAAC,UAAD,CAArB,CAA9C,CAHmB,CAG+D;;AAElFG,IAAAA,MAAM,CAACE,cAAP,CAAsBJ,cAAtB,EAAsC,QAAtC,EAAgD;AAC9CK,MAAAA,KAAK,EAAE,CAAC,GAAGC,QAAJ,KAAiB,KAAKC,aAAL,CAAmB,GAAGD,QAAtB;AADsB,KAAhD,EALmB,CAOf;;AAEJJ,IAAAA,MAAM,CAACE,cAAP,CAAsBJ,cAAtB,EAAsC,MAAtC,EAA8C;AAC5CK,MAAAA,KAAK,EAAE,CAACG,OAAD,EAAUC,MAAV,KAAqB,KAAKC,QAAL,CAAcC,IAAd,CAAmBC,GAAG,IAAIA,GAAG,CAACC,UAA9B,EAA0CF,IAA1C,CAA+CH,OAA/C,EAAwDC,MAAxD;AADgB,KAA9C;AAGD;;AAEDK,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKb,eAAZ;AACD;;AAjByD","sourcesContent":["import { JSONLDResolver } from 'ldflex';\n/**\n * A ContextResolver is a combined resolver/handler that:\n * - resolves a JSON-LD context\n * - handles by returning an object that\n *   - is the initial context passed to the constructor\n *   - allows extending that context by calling `.extend`\n *   - when `await`ed, resolves to the expanded context\n */\n\nexport default class ContextResolver extends JSONLDResolver {\n  constructor(context) {\n    super(context); // Create an exposed version of the initial context, with additional functionality\n\n    const exposedContext = this._exposedContext = Object.create(context['@context']); // Allow extending the context\n\n    Object.defineProperty(exposedContext, 'extend', {\n      value: (...contexts) => this.extendContext(...contexts)\n    }); // Resolve to the expanded context\n\n    Object.defineProperty(exposedContext, 'then', {\n      value: (resolve, reject) => this._context.then(ctx => ctx.contextRaw).then(resolve, reject)\n    });\n  }\n\n  handle() {\n    return this._exposedContext;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}