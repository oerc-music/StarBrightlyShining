{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MediatorCombinePipeline = void 0;\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * A comunica mediator that goes over all actors in sequence and forwards I/O.\n * This required the action input and the actor output to be of the same type.\n */\n\n\nclass MediatorCombinePipeline extends core_1.Mediator {\n  constructor(args) {\n    super(args);\n  }\n\n  async mediate(action) {\n    let testResults;\n\n    try {\n      testResults = this.publish(action);\n    } catch (_a) {\n      // If no actors are available, just return the input as output\n      return action;\n    } // Delegate test errors.\n\n\n    await Promise.all(testResults.map(({\n      reply\n    }) => reply)); // Pass action to first actor,\n    // and each actor output as input to the following actor.\n\n    let handle = action;\n\n    for (const actor of testResults.map(result => result.actor)) {\n      handle = Object.assign(Object.assign({}, handle), await actor.runObservable(handle));\n    } // Return the final actor output\n\n\n    return handle;\n  }\n\n  mediateWith() {\n    throw new Error('Method not supported.');\n  }\n\n}\n\nexports.MediatorCombinePipeline = MediatorCombinePipeline;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/mediator-combine-pipeline/lib/MediatorCombinePipeline.js"],"names":["Object","defineProperty","exports","value","MediatorCombinePipeline","core_1","require","Mediator","constructor","args","mediate","action","testResults","publish","_a","Promise","all","map","reply","handle","actor","result","assign","runObservable","mediateWith","Error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;AACA;;;AACA,MAAMF,uBAAN,SAAsCC,MAAM,CAACE,QAA7C,CAAsD;AAClDC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACY,QAAPC,OAAO,CAACC,MAAD,EAAS;AAClB,QAAIC,WAAJ;;AACA,QAAI;AACAA,MAAAA,WAAW,GAAG,KAAKC,OAAL,CAAaF,MAAb,CAAd;AACH,KAFD,CAGA,OAAOG,EAAP,EAAW;AACP;AACA,aAAOH,MAAP;AACH,KARiB,CASlB;;;AACA,UAAMI,OAAO,CAACC,GAAR,CAAYJ,WAAW,CAACK,GAAZ,CAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeA,KAA/B,CAAZ,CAAN,CAVkB,CAWlB;AACA;;AACA,QAAIC,MAAM,GAAGR,MAAb;;AACA,SAAK,MAAMS,KAAX,IAAoBR,WAAW,CAACK,GAAZ,CAAgBI,MAAM,IAAIA,MAAM,CAACD,KAAjC,CAApB,EAA6D;AACzDD,MAAAA,MAAM,GAAGnB,MAAM,CAACsB,MAAP,CAActB,MAAM,CAACsB,MAAP,CAAc,EAAd,EAAkBH,MAAlB,CAAd,EAAyC,MAAMC,KAAK,CAACG,aAAN,CAAoBJ,MAApB,CAA/C,CAAT;AACH,KAhBiB,CAiBlB;;;AACA,WAAOA,MAAP;AACH;;AACDK,EAAAA,WAAW,GAAG;AACV,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AA1BiD;;AA4BtDvB,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MediatorCombinePipeline = void 0;\nconst core_1 = require(\"@comunica/core\");\n/**\n * A comunica mediator that goes over all actors in sequence and forwards I/O.\n * This required the action input and the actor output to be of the same type.\n */\nclass MediatorCombinePipeline extends core_1.Mediator {\n    constructor(args) {\n        super(args);\n    }\n    async mediate(action) {\n        let testResults;\n        try {\n            testResults = this.publish(action);\n        }\n        catch (_a) {\n            // If no actors are available, just return the input as output\n            return action;\n        }\n        // Delegate test errors.\n        await Promise.all(testResults.map(({ reply }) => reply));\n        // Pass action to first actor,\n        // and each actor output as input to the following actor.\n        let handle = action;\n        for (const actor of testResults.map(result => result.actor)) {\n            handle = Object.assign(Object.assign({}, handle), await actor.runObservable(handle));\n        }\n        // Return the final actor output\n        return handle;\n    }\n    mediateWith() {\n        throw new Error('Method not supported.');\n    }\n}\nexports.MediatorCombinePipeline = MediatorCombinePipeline;\n//# sourceMappingURL=MediatorCombinePipeline.js.map"]},"metadata":{},"sourceType":"script"}