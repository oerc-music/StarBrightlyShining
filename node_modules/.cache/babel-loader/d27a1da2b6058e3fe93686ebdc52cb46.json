{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.namedFunctions = exports.specialFunctions = exports.regularFunctions = void 0;\n\nconst Core_1 = require(\"./Core\");\n\nconst NamedFunctions_1 = require(\"./NamedFunctions\");\n\nconst RegularFunctions_1 = require(\"./RegularFunctions\");\n\nconst SpecialFunctions_1 = require(\"./SpecialFunctions\");\n\n__exportStar(require(\"./Core\"), exports);\n\nexports.regularFunctions = RegularFunctions_1.definitions.map((def, op) => new Core_1.RegularFunction(op, def)).toMap();\nexports.specialFunctions = SpecialFunctions_1.specialDefinitions.map((def, op) => new Core_1.SpecialFunction(op, def)).toMap();\nexports.namedFunctions = NamedFunctions_1.namedDefinitions.map((def, op) => new Core_1.NamedFunction(op, def)).toMap();","map":{"version":3,"sources":["../../../lib/functions/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAKA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,OAAA,CAAA;;AAGa,OAAA,CAAA,gBAAA,GACX,kBAAA,CAAA,WAAA,CACG,GADH,CACO,CAAC,GAAD,EAAM,EAAN,KAAa,IAAI,MAAA,CAAA,eAAJ,CAAoB,EAApB,EAAwB,GAAxB,CADpB,EAEG,KAFH,EADW;AAMA,OAAA,CAAA,gBAAA,GACX,kBAAA,CAAA,kBAAA,CACG,GADH,CACO,CAAC,GAAD,EAAM,EAAN,KAAa,IAAI,MAAA,CAAA,eAAJ,CAAoB,EAApB,EAAwB,GAAxB,CADpB,EAEG,KAFH,EADW;AAMA,OAAA,CAAA,cAAA,GACX,gBAAA,CAAA,gBAAA,CACG,GADH,CACO,CAAC,GAAD,EAAM,EAAN,KAAa,IAAI,MAAA,CAAA,aAAJ,CAAkB,EAAlB,EAAsB,GAAtB,CADpB,EAEG,KAFH,EADW","sourcesContent":["import { Map } from 'immutable';\n\nimport * as E from '../expressions';\nimport * as C from '../util/Consts';\n\nimport {\n  NamedFunction,\n  RegularFunction,\n  SpecialFunction,\n} from './Core';\nimport { namedDefinitions } from './NamedFunctions';\nimport { definitions } from './RegularFunctions';\nimport { specialDefinitions } from './SpecialFunctions';\n\nexport * from './Core';\n\nexport type RegularFunctionMap = Map<C.RegularOperator, RegularFunction>;\nexport const regularFunctions: RegularFunctionMap =\n  definitions\n    .map((def, op) => new RegularFunction(op, def))\n    .toMap();\n\nexport type SpecialFunctionAsyncMap = Map<C.SpecialOperator, SpecialFunction>;\nexport const specialFunctions: SpecialFunctionAsyncMap =\n  specialDefinitions\n    .map((def, op) => new SpecialFunction(op, def))\n    .toMap();\n\nexport type NamedFunctionMap = Map<C.NamedOperator, NamedFunction>;\nexport const namedFunctions: NamedFunctionMap =\n  namedDefinitions\n    .map((def, op) => new NamedFunction(op, def))\n    .toMap();\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}