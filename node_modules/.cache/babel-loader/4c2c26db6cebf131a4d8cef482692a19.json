{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationUnion = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst asynciterator_1 = require(\"asynciterator\");\n/**\n * A comunica Union Query Operation Actor.\n */\n\n\nclass ActorQueryOperationUnion extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'union');\n  }\n  /**\n   * Takes the union of the given double array variables.\n   * Uniqueness is guaranteed.\n   * @param {string[][]} variables Double array of variables to take the union of.\n   * @return {string[]} The union of the given variables.\n   */\n\n\n  static unionVariables(variables) {\n    const withDuplicates = variables.reduce((acc, it) => [...acc, ...it], []);\n    return [...new Set(withDuplicates)];\n  }\n  /**\n   * Takes the union of the given metadata array.\n   * It will ensure that the totalItems metadata value is properly calculated.\n   * @param {{[p: string]: any}[]} metadatas Array of metadata.\n   * @return {{[p: string]: any}} Union of the metadata.\n   */\n\n\n  static unionMetadata(metadatas) {\n    let totalItems = 0;\n\n    for (const metadata of metadatas) {\n      if (metadata.totalItems && Number.isFinite(metadata.totalItems)) {\n        totalItems += metadata.totalItems;\n      } else {\n        totalItems = Number.POSITIVE_INFINITY;\n        break;\n      }\n    }\n\n    return {\n      totalItems\n    };\n  }\n\n  async testOperation(pattern, context) {\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    const outputs = (await Promise.all([this.mediatorQueryOperation.mediate({\n      operation: pattern.left,\n      context\n    }), this.mediatorQueryOperation.mediate({\n      operation: pattern.right,\n      context\n    })])).map(bus_query_operation_1.ActorQueryOperation.getSafeBindings);\n    const bindingsStream = new asynciterator_1.UnionIterator(outputs.map(output => output.bindingsStream), {\n      autoStart: false\n    });\n    const metadata = outputs[0].metadata && outputs[1].metadata ? () => Promise.all([outputs[0].metadata(), outputs[1].metadata()]).then(ActorQueryOperationUnion.unionMetadata) : undefined;\n    const variables = ActorQueryOperationUnion.unionVariables(outputs.map(output => output.variables));\n    const canContainUndefs = outputs.reduce((acc, val) => acc || val.canContainUndefs, false);\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata,\n      variables,\n      canContainUndefs\n    };\n  }\n\n}\n\nexports.ActorQueryOperationUnion = ActorQueryOperationUnion;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-union/lib/ActorQueryOperationUnion.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationUnion","bus_query_operation_1","require","asynciterator_1","ActorQueryOperationTypedMediated","constructor","args","unionVariables","variables","withDuplicates","reduce","acc","it","Set","unionMetadata","metadatas","totalItems","metadata","Number","isFinite","POSITIVE_INFINITY","testOperation","pattern","context","runOperation","outputs","Promise","all","mediatorQueryOperation","mediate","operation","left","right","map","ActorQueryOperation","getSafeBindings","bindingsStream","UnionIterator","output","autoStart","then","undefined","canContainUndefs","val","type"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationUnion = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst asynciterator_1 = require(\"asynciterator\");\n/**\n * A comunica Union Query Operation Actor.\n */\nclass ActorQueryOperationUnion extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'union');\n    }\n    /**\n     * Takes the union of the given double array variables.\n     * Uniqueness is guaranteed.\n     * @param {string[][]} variables Double array of variables to take the union of.\n     * @return {string[]} The union of the given variables.\n     */\n    static unionVariables(variables) {\n        const withDuplicates = variables.reduce((acc, it) => [...acc, ...it], []);\n        return [...new Set(withDuplicates)];\n    }\n    /**\n     * Takes the union of the given metadata array.\n     * It will ensure that the totalItems metadata value is properly calculated.\n     * @param {{[p: string]: any}[]} metadatas Array of metadata.\n     * @return {{[p: string]: any}} Union of the metadata.\n     */\n    static unionMetadata(metadatas) {\n        let totalItems = 0;\n        for (const metadata of metadatas) {\n            if (metadata.totalItems && Number.isFinite(metadata.totalItems)) {\n                totalItems += metadata.totalItems;\n            }\n            else {\n                totalItems = Number.POSITIVE_INFINITY;\n                break;\n            }\n        }\n        return { totalItems };\n    }\n    async testOperation(pattern, context) {\n        return true;\n    }\n    async runOperation(pattern, context) {\n        const outputs = (await Promise.all([\n            this.mediatorQueryOperation.mediate({ operation: pattern.left, context }),\n            this.mediatorQueryOperation.mediate({ operation: pattern.right, context }),\n        ])).map(bus_query_operation_1.ActorQueryOperation.getSafeBindings);\n        const bindingsStream = new asynciterator_1.UnionIterator(outputs.map((output) => output.bindingsStream), { autoStart: false });\n        const metadata = outputs[0].metadata && outputs[1].metadata ?\n            () => Promise.all([\n                outputs[0].metadata(),\n                outputs[1].metadata(),\n            ]).then(ActorQueryOperationUnion.unionMetadata) :\n            undefined;\n        const variables = ActorQueryOperationUnion.unionVariables(outputs.map((output) => output.variables));\n        const canContainUndefs = outputs.reduce((acc, val) => acc || val.canContainUndefs, false);\n        return { type: 'bindings', bindingsStream, metadata, variables, canContainUndefs };\n    }\n}\nexports.ActorQueryOperationUnion = ActorQueryOperationUnion;\n//# sourceMappingURL=ActorQueryOperationUnion.js.map"]},"metadata":{},"sourceType":"script"}