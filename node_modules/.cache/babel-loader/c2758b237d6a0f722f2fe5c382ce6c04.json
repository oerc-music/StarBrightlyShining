{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorRdfMetadataPrimaryTopic = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_rdf_metadata_1 = require(\"@comunica/bus-rdf-metadata\");\n/**\n * An RDF Metadata Actor that splits off the metadata based on the existence of a 'foaf:primaryTopic' link.\n * Only non-triple quad streams are supported.\n */\n\n\nclass ActorRdfMetadataPrimaryTopic extends bus_rdf_metadata_1.ActorRdfMetadata {\n  constructor(args) {\n    super(args);\n  }\n\n  async test(action) {\n    if (action.triples) {\n      throw new Error('This actor only supports non-triple quad streams.');\n    }\n\n    return true;\n  }\n\n  async run(action) {\n    const data = new stream_1.Readable({\n      objectMode: true\n    });\n    const metadata = new stream_1.Readable({\n      objectMode: true\n    }); // Delay attachment of listeners until the data or metadata stream is being read.\n\n    const attachListeners = () => {\n      // Attach listeners only once\n      data._read = metadata._read = () => {// Do nothing\n      }; // Forward errors\n\n\n      action.quads.on('error', error => {\n        data.emit('error', error);\n        metadata.emit('error', error);\n      }); // First pass over data to categorize in graphs,\n      // and to detect the primaryTopic triple.\n\n      const graphs = {};\n      let endpointIdentifier;\n      const primaryTopics = {};\n      action.quads.on('data', quad => {\n        if (quad.predicate.value === 'http://rdfs.org/ns/void#subset' && quad.object.value === action.url) {\n          endpointIdentifier = quad.subject.value;\n        } else if (quad.predicate.value === 'http://xmlns.com/foaf/0.1/primaryTopic') {\n          primaryTopics[quad.object.value] = quad.subject.value;\n        }\n\n        let quads = graphs[quad.graph.value];\n\n        if (!quads) {\n          quads = graphs[quad.graph.value] = [];\n        }\n\n        quads.push(quad);\n      }); // When the stream has finished,\n      // determine the appropriate metadata graph,\n      // and emit all quads to the appropriate streams.\n\n      action.quads.on('end', () => {\n        const metadataGraph = endpointIdentifier ? primaryTopics[endpointIdentifier] : undefined;\n\n        for (const graphName in graphs) {\n          if (graphName === metadataGraph) {\n            for (const quad of graphs[graphName]) {\n              metadata.push(quad);\n            } // Also emit metadata to data if requested\n\n\n            if (this.metadataToData) {\n              for (const quad of graphs[graphName]) {\n                data.push(quad);\n              }\n            }\n          } else {\n            for (const quad of graphs[graphName]) {\n              data.push(quad);\n            }\n\n            if (!metadataGraph && this.dataToMetadataOnInvalidMetadataGraph) {\n              for (const quad of graphs[graphName]) {\n                metadata.push(quad);\n              }\n            }\n          }\n        }\n\n        data.push(null);\n        metadata.push(null);\n      });\n    };\n\n    data._read = metadata._read = () => {\n      attachListeners();\n    };\n\n    return {\n      data,\n      metadata\n    };\n  }\n\n}\n\nexports.ActorRdfMetadataPrimaryTopic = ActorRdfMetadataPrimaryTopic;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-rdf-metadata-primary-topic/lib/ActorRdfMetadataPrimaryTopic.js"],"names":["Object","defineProperty","exports","value","ActorRdfMetadataPrimaryTopic","stream_1","require","bus_rdf_metadata_1","ActorRdfMetadata","constructor","args","test","action","triples","Error","run","data","Readable","objectMode","metadata","attachListeners","_read","quads","on","error","emit","graphs","endpointIdentifier","primaryTopics","quad","predicate","object","url","subject","graph","push","metadataGraph","undefined","graphName","metadataToData","dataToMetadataOnInvalidMetadataGraph"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorRdfMetadataPrimaryTopic = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_rdf_metadata_1 = require(\"@comunica/bus-rdf-metadata\");\n/**\n * An RDF Metadata Actor that splits off the metadata based on the existence of a 'foaf:primaryTopic' link.\n * Only non-triple quad streams are supported.\n */\nclass ActorRdfMetadataPrimaryTopic extends bus_rdf_metadata_1.ActorRdfMetadata {\n    constructor(args) {\n        super(args);\n    }\n    async test(action) {\n        if (action.triples) {\n            throw new Error('This actor only supports non-triple quad streams.');\n        }\n        return true;\n    }\n    async run(action) {\n        const data = new stream_1.Readable({ objectMode: true });\n        const metadata = new stream_1.Readable({ objectMode: true });\n        // Delay attachment of listeners until the data or metadata stream is being read.\n        const attachListeners = () => {\n            // Attach listeners only once\n            data._read = metadata._read = () => {\n                // Do nothing\n            };\n            // Forward errors\n            action.quads.on('error', error => {\n                data.emit('error', error);\n                metadata.emit('error', error);\n            });\n            // First pass over data to categorize in graphs,\n            // and to detect the primaryTopic triple.\n            const graphs = {};\n            let endpointIdentifier;\n            const primaryTopics = {};\n            action.quads.on('data', quad => {\n                if (quad.predicate.value === 'http://rdfs.org/ns/void#subset' &&\n                    quad.object.value === action.url) {\n                    endpointIdentifier = quad.subject.value;\n                }\n                else if (quad.predicate.value === 'http://xmlns.com/foaf/0.1/primaryTopic') {\n                    primaryTopics[quad.object.value] = quad.subject.value;\n                }\n                let quads = graphs[quad.graph.value];\n                if (!quads) {\n                    quads = graphs[quad.graph.value] = [];\n                }\n                quads.push(quad);\n            });\n            // When the stream has finished,\n            // determine the appropriate metadata graph,\n            // and emit all quads to the appropriate streams.\n            action.quads.on('end', () => {\n                const metadataGraph = endpointIdentifier ? primaryTopics[endpointIdentifier] : undefined;\n                for (const graphName in graphs) {\n                    if (graphName === metadataGraph) {\n                        for (const quad of graphs[graphName]) {\n                            metadata.push(quad);\n                        }\n                        // Also emit metadata to data if requested\n                        if (this.metadataToData) {\n                            for (const quad of graphs[graphName]) {\n                                data.push(quad);\n                            }\n                        }\n                    }\n                    else {\n                        for (const quad of graphs[graphName]) {\n                            data.push(quad);\n                        }\n                        if (!metadataGraph && this.dataToMetadataOnInvalidMetadataGraph) {\n                            for (const quad of graphs[graphName]) {\n                                metadata.push(quad);\n                            }\n                        }\n                    }\n                }\n                data.push(null);\n                metadata.push(null);\n            });\n        };\n        data._read = metadata._read = () => {\n            attachListeners();\n        };\n        return { data, metadata };\n    }\n}\nexports.ActorRdfMetadataPrimaryTopic = ActorRdfMetadataPrimaryTopic;\n//# sourceMappingURL=ActorRdfMetadataPrimaryTopic.js.map"]},"metadata":{},"sourceType":"script"}