{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationProject = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst data_factory_1 = require(\"@comunica/data-factory\");\n\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\n\nconst rdf_string_1 = require(\"rdf-string\");\n\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A comunica Project Query Operation Actor.\n */\n\nclass ActorQueryOperationProject extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'project');\n  }\n\n  async testOperation(pattern, context) {\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    // Resolve the input\n    const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      operation: pattern.input,\n      context\n    })); // Find all variables that should be deleted from the input stream.\n\n    const variables = pattern.variables.map(x => rdf_string_1.termToString(x));\n    const deleteVariables = output.variables.filter(variable => !variables.includes(variable)); // Error if there are variables that are not bound in the input stream.\n\n    const missingVariables = variables.filter(variable => !output.variables.includes(variable));\n\n    if (missingVariables.length > 0) {\n      throw new Error(`Variables '${missingVariables}' are used in the projection result, but are not assigned.`);\n    } // Make sure the project variables are the only variables that are present in the bindings.\n\n\n    let bindingsStream = deleteVariables.length === 0 ? output.bindingsStream : output.bindingsStream.transform({\n      map(bindings) {\n        for (const deleteVariable of deleteVariables) {\n          bindings = bindings.delete(deleteVariable);\n        }\n\n        return bindings;\n      },\n\n      autoStart: false\n    }); // Make sure that blank nodes with same labels are not reused over different bindings, as required by SPARQL 1.1.\n    // Required for the BNODE() function: https://www.w3.org/TR/sparql11-query/#func-bnode\n    // When we have a scoped blank node, make sure the skolemized value is maintained.\n\n    let blankNodeCounter = 0;\n    bindingsStream = bindingsStream.transform({\n      map(bindings) {\n        blankNodeCounter++;\n        const scopedBlankNodesCache = new Map();\n        return bindings.map(term => {\n          if (term instanceof data_factory_1.BlankNodeBindingsScoped) {\n            let scopedBlankNode = scopedBlankNodesCache.get(term.value);\n\n            if (!scopedBlankNode) {\n              scopedBlankNode = DF.blankNode(`${term.value}${blankNodeCounter}`);\n              scopedBlankNodesCache.set(term.value, scopedBlankNode);\n            }\n\n            return scopedBlankNode;\n          }\n\n          return term;\n        });\n      },\n\n      autoStart: false\n    });\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: output.metadata,\n      variables,\n      canContainUndefs: output.canContainUndefs\n    };\n  }\n\n}\n\nexports.ActorQueryOperationProject = ActorQueryOperationProject;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-project/lib/ActorQueryOperationProject.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationProject","bus_query_operation_1","require","data_factory_1","rdf_data_factory_1","rdf_string_1","DF","DataFactory","ActorQueryOperationTypedMediated","constructor","args","testOperation","pattern","context","runOperation","output","ActorQueryOperation","getSafeBindings","mediatorQueryOperation","mediate","operation","input","variables","map","x","termToString","deleteVariables","filter","variable","includes","missingVariables","length","Error","bindingsStream","transform","bindings","deleteVariable","delete","autoStart","blankNodeCounter","scopedBlankNodesCache","Map","term","BlankNodeBindingsScoped","scopedBlankNode","get","blankNode","set","type","metadata","canContainUndefs"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationProject = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst data_factory_1 = require(\"@comunica/data-factory\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst rdf_string_1 = require(\"rdf-string\");\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A comunica Project Query Operation Actor.\n */\nclass ActorQueryOperationProject extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'project');\n    }\n    async testOperation(pattern, context) {\n        return true;\n    }\n    async runOperation(pattern, context) {\n        // Resolve the input\n        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: pattern.input, context }));\n        // Find all variables that should be deleted from the input stream.\n        const variables = pattern.variables.map(x => rdf_string_1.termToString(x));\n        const deleteVariables = output.variables.filter(variable => !variables.includes(variable));\n        // Error if there are variables that are not bound in the input stream.\n        const missingVariables = variables.filter(variable => !output.variables.includes(variable));\n        if (missingVariables.length > 0) {\n            throw new Error(`Variables '${missingVariables}' are used in the projection result, but are not assigned.`);\n        }\n        // Make sure the project variables are the only variables that are present in the bindings.\n        let bindingsStream = deleteVariables.length === 0 ?\n            output.bindingsStream :\n            output.bindingsStream.transform({\n                map(bindings) {\n                    for (const deleteVariable of deleteVariables) {\n                        bindings = bindings.delete(deleteVariable);\n                    }\n                    return bindings;\n                },\n                autoStart: false,\n            });\n        // Make sure that blank nodes with same labels are not reused over different bindings, as required by SPARQL 1.1.\n        // Required for the BNODE() function: https://www.w3.org/TR/sparql11-query/#func-bnode\n        // When we have a scoped blank node, make sure the skolemized value is maintained.\n        let blankNodeCounter = 0;\n        bindingsStream = bindingsStream.transform({\n            map(bindings) {\n                blankNodeCounter++;\n                const scopedBlankNodesCache = new Map();\n                return bindings.map(term => {\n                    if (term instanceof data_factory_1.BlankNodeBindingsScoped) {\n                        let scopedBlankNode = scopedBlankNodesCache.get(term.value);\n                        if (!scopedBlankNode) {\n                            scopedBlankNode = DF.blankNode(`${term.value}${blankNodeCounter}`);\n                            scopedBlankNodesCache.set(term.value, scopedBlankNode);\n                        }\n                        return scopedBlankNode;\n                    }\n                    return term;\n                });\n            },\n            autoStart: false,\n        });\n        return {\n            type: 'bindings',\n            bindingsStream,\n            metadata: output.metadata,\n            variables,\n            canContainUndefs: output.canContainUndefs,\n        };\n    }\n}\nexports.ActorQueryOperationProject = ActorQueryOperationProject;\n//# sourceMappingURL=ActorQueryOperationProject.js.map"]},"metadata":{},"sourceType":"script"}