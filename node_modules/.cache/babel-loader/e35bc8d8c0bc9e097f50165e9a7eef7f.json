{"ast":null,"code":"import { toIterablePromise } from 'ldflex';\nimport { namedNode } from '@rdfjs/data-model';\nimport context from '@solid/context';\nconst {\n  as\n} = context['@context'];\n/**\n * Base class for handlers that manipulate activities\n * Requires:\n * - the `root.user` handler\n * - the `root[...]` resolver\n * - a queryEngine property in the path settings\n */\n\nexport default class ActivityHandler {\n  constructor({\n    activitiesPath = '/public/activities'\n  } = {}) {\n    this.requireUser = true;\n    this.activitiesPath = activitiesPath;\n  }\n\n  handle(pathData, path) {\n    const self = this;\n    const {\n      root\n    } = path;\n    const {\n      settings: {\n        queryEngine\n      }\n    } = pathData; // Return an iterator over the activity paths\n\n    return (type = \"\".concat(as, \"Like\")) => toIterablePromise(async function* () {\n      // Only process activities if a user is logged in\n      let user;\n\n      try {\n        user = await root.user;\n      } catch (error) {\n        if (self.requireUser) throw error;\n        return;\n      } // Determine the storage location\n\n\n      const storage = await root.user.pim$storage;\n      const document = new URL(self.activitiesPath, storage || user).href; // Obtain results for every activity on the path\n\n      const results = [];\n      const actor = namedNode(user);\n      type = namedNode(type);\n\n      for await (const object of path) {\n        if (object.termType === 'NamedNode') {\n          const activity = {\n            actor,\n            type,\n            object\n          };\n\n          for await (const result of self.createResults(activity, document, queryEngine)) results.push(result);\n        }\n      } // Process all results and return paths starting from the returned terms\n\n\n      for (const term of await self.processResults(results, document, queryEngine)) yield root[term.value];\n    });\n  }\n\n  async processResults(results) {\n    return results;\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@solid/query-ldflex/module/handlers/ActivityHandler.js"],"names":["toIterablePromise","namedNode","context","as","ActivityHandler","constructor","activitiesPath","requireUser","handle","pathData","path","self","root","settings","queryEngine","type","concat","user","error","storage","pim$storage","document","URL","href","results","actor","object","termType","activity","result","createResults","push","term","processResults","value"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,QAAlC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,MAAM;AACJC,EAAAA;AADI,IAEFD,OAAO,CAAC,UAAD,CAFX;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAME,eAAN,CAAsB;AACnCC,EAAAA,WAAW,CAAC;AACVC,IAAAA,cAAc,GAAG;AADP,MAER,EAFO,EAEH;AACN,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKD,cAAL,GAAsBA,cAAtB;AACD;;AAEDE,EAAAA,MAAM,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACrB,UAAMC,IAAI,GAAG,IAAb;AACA,UAAM;AACJC,MAAAA;AADI,QAEFF,IAFJ;AAGA,UAAM;AACJG,MAAAA,QAAQ,EAAE;AACRC,QAAAA;AADQ;AADN,QAIFL,QAJJ,CALqB,CASP;;AAEd,WAAO,CAACM,IAAI,GAAG,GAAGC,MAAH,CAAUb,EAAV,EAAc,MAAd,CAAR,KAAkCH,iBAAiB,CAAC,mBAAmB;AAC5E;AACA,UAAIiB,IAAJ;;AAEA,UAAI;AACFA,QAAAA,IAAI,GAAG,MAAML,IAAI,CAACK,IAAlB;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACd,YAAIP,IAAI,CAACJ,WAAT,EAAsB,MAAMW,KAAN;AACtB;AACD,OAT2E,CAS1E;;;AAGF,YAAMC,OAAO,GAAG,MAAMP,IAAI,CAACK,IAAL,CAAUG,WAAhC;AACA,YAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQX,IAAI,CAACL,cAAb,EAA6Ba,OAAO,IAAIF,IAAxC,EAA8CM,IAA/D,CAb4E,CAaP;;AAErE,YAAMC,OAAO,GAAG,EAAhB;AACA,YAAMC,KAAK,GAAGxB,SAAS,CAACgB,IAAD,CAAvB;AACAF,MAAAA,IAAI,GAAGd,SAAS,CAACc,IAAD,CAAhB;;AAEA,iBAAW,MAAMW,MAAjB,IAA2BhB,IAA3B,EAAiC;AAC/B,YAAIgB,MAAM,CAACC,QAAP,KAAoB,WAAxB,EAAqC;AACnC,gBAAMC,QAAQ,GAAG;AACfH,YAAAA,KADe;AAEfV,YAAAA,IAFe;AAGfW,YAAAA;AAHe,WAAjB;;AAMA,qBAAW,MAAMG,MAAjB,IAA2BlB,IAAI,CAACmB,aAAL,CAAmBF,QAAnB,EAA6BP,QAA7B,EAAuCP,WAAvC,CAA3B,EAAgFU,OAAO,CAACO,IAAR,CAAaF,MAAb;AACjF;AACF,OA7B2E,CA6B1E;;;AAGF,WAAK,MAAMG,IAAX,IAAmB,MAAMrB,IAAI,CAACsB,cAAL,CAAoBT,OAApB,EAA6BH,QAA7B,EAAuCP,WAAvC,CAAzB,EAA8E,MAAMF,IAAI,CAACoB,IAAI,CAACE,KAAN,CAAV;AAC/E,KAjCyD,CAA1D;AAkCD;;AAEmB,QAAdD,cAAc,CAACT,OAAD,EAAU;AAC5B,WAAOA,OAAP;AACD;;AAzDkC","sourcesContent":["import { toIterablePromise } from 'ldflex';\nimport { namedNode } from '@rdfjs/data-model';\nimport context from '@solid/context';\nconst {\n  as\n} = context['@context'];\n/**\n * Base class for handlers that manipulate activities\n * Requires:\n * - the `root.user` handler\n * - the `root[...]` resolver\n * - a queryEngine property in the path settings\n */\n\nexport default class ActivityHandler {\n  constructor({\n    activitiesPath = '/public/activities'\n  } = {}) {\n    this.requireUser = true;\n    this.activitiesPath = activitiesPath;\n  }\n\n  handle(pathData, path) {\n    const self = this;\n    const {\n      root\n    } = path;\n    const {\n      settings: {\n        queryEngine\n      }\n    } = pathData; // Return an iterator over the activity paths\n\n    return (type = \"\".concat(as, \"Like\")) => toIterablePromise(async function* () {\n      // Only process activities if a user is logged in\n      let user;\n\n      try {\n        user = await root.user;\n      } catch (error) {\n        if (self.requireUser) throw error;\n        return;\n      } // Determine the storage location\n\n\n      const storage = await root.user.pim$storage;\n      const document = new URL(self.activitiesPath, storage || user).href; // Obtain results for every activity on the path\n\n      const results = [];\n      const actor = namedNode(user);\n      type = namedNode(type);\n\n      for await (const object of path) {\n        if (object.termType === 'NamedNode') {\n          const activity = {\n            actor,\n            type,\n            object\n          };\n\n          for await (const result of self.createResults(activity, document, queryEngine)) results.push(result);\n        }\n      } // Process all results and return paths starting from the returned terms\n\n\n      for (const term of await self.processResults(results, document, queryEngine)) yield root[term.value];\n    });\n  }\n\n  async processResults(results) {\n    return results;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}