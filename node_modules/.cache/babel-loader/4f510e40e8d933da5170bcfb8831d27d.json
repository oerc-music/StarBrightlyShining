{"ast":null,"code":"/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2021 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\n\nconst URGNA2012 = require('./URGNA2012');\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\n\nconst URGNA2012Sync = require('./URGNA2012Sync'); // optional native support\n\n\nlet rdfCanonizeNative;\n\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch (e) {}\n\nconst api = {};\nmodule.exports = api; // expose helpers\n\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\n\napi._rdfCanonizeNative = function (api) {\n  if (api) {\n    rdfCanonizeNative = api;\n  }\n\n  return rdfCanonizeNative;\n};\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\n\n\napi.canonize = async function (dataset, options) {\n  // back-compat with legacy dataset\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if (options.useNative) {\n    if (!rdfCanonizeNative) {\n      throw new Error('rdf-canonize-native not available');\n    } // TODO: convert native algorithm to Promise-based async\n\n\n    return new Promise((resolve, reject) => rdfCanonizeNative.canonize(dataset, options, (err, canonical) => err ? reject(err) : resolve(canonical)));\n  }\n\n  if (options.algorithm === 'URDNA2015') {\n    return new URDNA2015(options).main(dataset);\n  }\n\n  if (options.algorithm === 'URGNA2012') {\n    return new URGNA2012(options).main(dataset);\n  }\n\n  if (!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n\n  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n/**\n * This method is no longer available in the public API, it is for testing\n * only. It synchronously canonizes an RDF dataset and does not work in the\n * browser.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\n\n\napi._canonizeSync = function (dataset, options) {\n  // back-compat with legacy dataset\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if (options.useNative) {\n    if (rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n\n    throw new Error('rdf-canonize-native not available');\n  }\n\n  if (options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  }\n\n  if (options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n\n  if (!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n\n  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-canonize/lib/index.js"],"names":["URDNA2015","require","URGNA2012","URDNA2015Sync","URGNA2012Sync","rdfCanonizeNative","e","api","module","exports","NQuads","IdentifierIssuer","_rdfCanonizeNative","canonize","dataset","options","Array","isArray","legacyDatasetToQuads","useNative","Error","Promise","resolve","reject","err","canonical","algorithm","main","_canonizeSync","canonizeSync"],"mappings":"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","sourcesContent":["/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2021 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\nconst URGNA2012 = require('./URGNA2012');\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst URGNA2012Sync = require('./URGNA2012Sync');\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch(e) {}\n\nconst api = {};\nmodule.exports = api;\n\n// expose helpers\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\napi._rdfCanonizeNative = function(api) {\n  if(api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\napi.canonize = async function(dataset, options) {\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if(options.useNative) {\n    if(!rdfCanonizeNative) {\n      throw new Error('rdf-canonize-native not available');\n    }\n    // TODO: convert native algorithm to Promise-based async\n    return new Promise((resolve, reject) =>\n      rdfCanonizeNative.canonize(dataset, options, (err, canonical) =>\n        err ? reject(err) : resolve(canonical)));\n  }\n\n  if(options.algorithm === 'URDNA2015') {\n    return new URDNA2015(options).main(dataset);\n  }\n  if(options.algorithm === 'URGNA2012') {\n    return new URGNA2012(options).main(dataset);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n\n/**\n * This method is no longer available in the public API, it is for testing\n * only. It synchronously canonizes an RDF dataset and does not work in the\n * browser.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\napi._canonizeSync = function(dataset, options) {\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n    throw new Error('rdf-canonize-native not available');\n  }\n  if(options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  }\n  if(options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n"]},"metadata":{},"sourceType":"script"}