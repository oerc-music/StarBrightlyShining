{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlSerializeTable = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nconst rdf_terms_1 = require(\"rdf-terms\");\n/**\n * A comunica Table Sparql Serialize Actor.\n */\n\n\nclass ActorSparqlSerializeTable extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n  constructor(args) {\n    super(args);\n    this.padding = ActorSparqlSerializeTable.repeat(' ', this.columnWidth);\n  }\n\n  static repeat(str, count) {\n    return new Array(count + 1).join(str);\n  }\n\n  async testHandleChecked(action, context) {\n    if (!['bindings', 'quads'].includes(action.type)) {\n      throw new Error('This actor can only handle bindings or quad streams.');\n    }\n\n    return true;\n  }\n\n  pad(str) {\n    if (str.length <= this.columnWidth) {\n      return str + this.padding.slice(str.length);\n    }\n\n    return `${str.slice(0, this.columnWidth - 1)}…`;\n  }\n\n  pushHeader(data, labels) {\n    const header = labels.map(label => this.pad(label)).join(' ');\n    data.push(`${header}\\n${ActorSparqlSerializeTable.repeat('-', header.length)}\\n`);\n  }\n\n  pushRow(data, labels, bindings) {\n    data.push(`${labels.map(label => bindings.has(label) ? bindings.get(label).value : '').map(label => this.pad(label)).join(' ')}\\n`);\n  }\n\n  async runHandle(action, mediaType, context) {\n    const data = new stream_1.Readable();\n\n    data._read = () => {// Do nothing\n    };\n\n    let resultStream;\n\n    if (action.type === 'bindings') {\n      resultStream = action.bindingsStream;\n      const labels = action.variables;\n      this.pushHeader(data, labels);\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', bindings => this.pushRow(data, labels, bindings));\n    } else {\n      resultStream = action.quadStream;\n      this.pushHeader(data, rdf_terms_1.QUAD_TERM_NAMES);\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', quad => data.push(`${rdf_terms_1.getTerms(quad).map(term => this.pad(term.value)).join(' ')}\\n`));\n    }\n\n    resultStream.on('end', () => data.push(null));\n    return {\n      data\n    };\n  }\n\n}\n\nexports.ActorSparqlSerializeTable = ActorSparqlSerializeTable;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-serialize-table/lib/ActorSparqlSerializeTable.js"],"names":["Object","defineProperty","exports","value","ActorSparqlSerializeTable","stream_1","require","bus_sparql_serialize_1","rdf_terms_1","ActorSparqlSerializeFixedMediaTypes","constructor","args","padding","repeat","columnWidth","str","count","Array","join","testHandleChecked","action","context","includes","type","Error","pad","length","slice","pushHeader","data","labels","header","map","label","push","pushRow","bindings","has","get","runHandle","mediaType","Readable","_read","resultStream","bindingsStream","variables","on","error","emit","quadStream","QUAD_TERM_NAMES","quad","getTerms","term"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlSerializeTable = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\nconst rdf_terms_1 = require(\"rdf-terms\");\n/**\n * A comunica Table Sparql Serialize Actor.\n */\nclass ActorSparqlSerializeTable extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n    constructor(args) {\n        super(args);\n        this.padding = ActorSparqlSerializeTable.repeat(' ', this.columnWidth);\n    }\n    static repeat(str, count) {\n        return new Array(count + 1).join(str);\n    }\n    async testHandleChecked(action, context) {\n        if (!['bindings', 'quads'].includes(action.type)) {\n            throw new Error('This actor can only handle bindings or quad streams.');\n        }\n        return true;\n    }\n    pad(str) {\n        if (str.length <= this.columnWidth) {\n            return str + this.padding.slice(str.length);\n        }\n        return `${str.slice(0, this.columnWidth - 1)}…`;\n    }\n    pushHeader(data, labels) {\n        const header = labels.map(label => this.pad(label)).join(' ');\n        data.push(`${header}\\n${ActorSparqlSerializeTable.repeat('-', header.length)}\\n`);\n    }\n    pushRow(data, labels, bindings) {\n        data.push(`${labels\n            .map(label => bindings.has(label) ? bindings.get(label).value : '')\n            .map(label => this.pad(label))\n            .join(' ')}\\n`);\n    }\n    async runHandle(action, mediaType, context) {\n        const data = new stream_1.Readable();\n        data._read = () => {\n            // Do nothing\n        };\n        let resultStream;\n        if (action.type === 'bindings') {\n            resultStream = action.bindingsStream;\n            const labels = action.variables;\n            this.pushHeader(data, labels);\n            resultStream.on('error', error => data.emit('error', error));\n            resultStream.on('data', bindings => this.pushRow(data, labels, bindings));\n        }\n        else {\n            resultStream = action.quadStream;\n            this.pushHeader(data, rdf_terms_1.QUAD_TERM_NAMES);\n            resultStream.on('error', error => data.emit('error', error));\n            resultStream.on('data', quad => data.push(`${rdf_terms_1.getTerms(quad).map(term => this.pad(term.value)).join(' ')}\\n`));\n        }\n        resultStream.on('end', () => data.push(null));\n        return { data };\n    }\n}\nexports.ActorSparqlSerializeTable = ActorSparqlSerializeTable;\n//# sourceMappingURL=ActorSparqlSerializeTable.js.map"]},"metadata":{},"sourceType":"script"}