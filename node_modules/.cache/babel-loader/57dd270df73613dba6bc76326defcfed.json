{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectiveNodeHandlerSkip = void 0;\n\nconst DirectiveNodeHandlerAdapter_1 = require(\"./DirectiveNodeHandlerAdapter\");\n/**\n * A handler for skip directives.\n */\n\n\nclass DirectiveNodeHandlerSkip extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {\n  constructor(util, settings) {\n    super('skip', util, settings);\n  }\n\n  handle(directiveContext, convertContext) {\n    const val = this.getDirectiveConditionalValue(directiveContext.directive, convertContext);\n\n    if (val.termType === 'Literal' && val.value === 'true') {\n      return {\n        ignore: true\n      };\n    }\n\n    return {};\n  }\n\n}\n\nexports.DirectiveNodeHandlerSkip = DirectiveNodeHandlerSkip;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSkip.js"],"names":["Object","defineProperty","exports","value","DirectiveNodeHandlerSkip","DirectiveNodeHandlerAdapter_1","require","DirectiveNodeHandlerAdapter","constructor","util","settings","handle","directiveContext","convertContext","val","getDirectiveConditionalValue","directive","termType","ignore"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmC,KAAK,CAAxC;;AACA,MAAMC,6BAA6B,GAAGC,OAAO,CAAC,+BAAD,CAA7C;AACA;AACA;AACA;;;AACA,MAAMF,wBAAN,SAAuCC,6BAA6B,CAACE,2BAArE,CAAiG;AAC7FC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAM,MAAN,EAAcD,IAAd,EAAoBC,QAApB;AACH;;AACDC,EAAAA,MAAM,CAACC,gBAAD,EAAmBC,cAAnB,EAAmC;AACrC,UAAMC,GAAG,GAAG,KAAKC,4BAAL,CAAkCH,gBAAgB,CAACI,SAAnD,EAA8DH,cAA9D,CAAZ;;AACA,QAAIC,GAAG,CAACG,QAAJ,KAAiB,SAAjB,IAA8BH,GAAG,CAACX,KAAJ,KAAc,MAAhD,EAAwD;AACpD,aAAO;AAAEe,QAAAA,MAAM,EAAE;AAAV,OAAP;AACH;;AACD,WAAO,EAAP;AACH;;AAV4F;;AAYjGhB,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DirectiveNodeHandlerSkip = void 0;\nconst DirectiveNodeHandlerAdapter_1 = require(\"./DirectiveNodeHandlerAdapter\");\n/**\n * A handler for skip directives.\n */\nclass DirectiveNodeHandlerSkip extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {\n    constructor(util, settings) {\n        super('skip', util, settings);\n    }\n    handle(directiveContext, convertContext) {\n        const val = this.getDirectiveConditionalValue(directiveContext.directive, convertContext);\n        if (val.termType === 'Literal' && val.value === 'true') {\n            return { ignore: true };\n        }\n        return {};\n    }\n}\nexports.DirectiveNodeHandlerSkip = DirectiveNodeHandlerSkip;\n//# sourceMappingURL=DirectiveNodeHandlerSkip.js.map"]},"metadata":{},"sourceType":"script"}