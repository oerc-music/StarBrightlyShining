{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationPathAlt = void 0;\n\nconst actor_abstract_path_1 = require(\"@comunica/actor-abstract-path\");\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst asynciterator_1 = require(\"asynciterator\");\n\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica Path Alt Query Operation Actor.\n */\n\n\nclass ActorQueryOperationPathAlt extends actor_abstract_path_1.ActorAbstractPath {\n  constructor(args) {\n    super(args, sparqlalgebrajs_1.Algebra.types.ALT);\n  }\n\n  async runOperation(path, context) {\n    const predicate = path.predicate;\n    const subOperations = (await Promise.all([this.mediatorQueryOperation.mediate({\n      context,\n      operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.left, path.object, path.graph)\n    }), this.mediatorQueryOperation.mediate({\n      context,\n      operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.right, path.object, path.graph)\n    })])).map(op => bus_query_operation_1.ActorQueryOperation.getSafeBindings(op));\n    const bindingsStream = new asynciterator_1.UnionIterator(subOperations.map(op => op.bindingsStream), {\n      autoStart: false\n    });\n    const variables = [].concat.apply([], subOperations.map(op => op.variables));\n    return {\n      type: 'bindings',\n      bindingsStream,\n      variables: [...new Set(variables)],\n      canContainUndefs: false\n    };\n  }\n\n}\n\nexports.ActorQueryOperationPathAlt = ActorQueryOperationPathAlt;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-path-alt/lib/ActorQueryOperationPathAlt.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationPathAlt","actor_abstract_path_1","require","bus_query_operation_1","asynciterator_1","sparqlalgebrajs_1","ActorAbstractPath","constructor","args","Algebra","types","ALT","runOperation","path","context","predicate","subOperations","Promise","all","mediatorQueryOperation","mediate","operation","FACTORY","createPath","subject","left","object","graph","right","map","op","ActorQueryOperation","getSafeBindings","bindingsStream","UnionIterator","autoStart","variables","concat","apply","type","Set","canContainUndefs"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,0BAAR,GAAqC,KAAK,CAA1C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,+BAAD,CAArC;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,eAAD,CAA/B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,iBAAD,CAAjC;AACA;AACA;AACA;;;AACA,MAAMF,0BAAN,SAAyCC,qBAAqB,CAACK,iBAA/D,CAAiF;AAC7EC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN,EAAYH,iBAAiB,CAACI,OAAlB,CAA0BC,KAA1B,CAAgCC,GAA5C;AACH;;AACiB,QAAZC,YAAY,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC9B,UAAMC,SAAS,GAAGF,IAAI,CAACE,SAAvB;AACA,UAAMC,aAAa,GAAG,CAAC,MAAMC,OAAO,CAACC,GAAR,CAAY,CACrC,KAAKC,sBAAL,CAA4BC,OAA5B,CAAoC;AAChCN,MAAAA,OADgC;AAEhCO,MAAAA,SAAS,EAAEpB,qBAAqB,CAACK,iBAAtB,CAAwCgB,OAAxC,CAAgDC,UAAhD,CAA2DV,IAAI,CAACW,OAAhE,EAAyET,SAAS,CAACU,IAAnF,EAAyFZ,IAAI,CAACa,MAA9F,EAAsGb,IAAI,CAACc,KAA3G;AAFqB,KAApC,CADqC,EAKrC,KAAKR,sBAAL,CAA4BC,OAA5B,CAAoC;AAChCN,MAAAA,OADgC;AAEhCO,MAAAA,SAAS,EAAEpB,qBAAqB,CAACK,iBAAtB,CAAwCgB,OAAxC,CAAgDC,UAAhD,CAA2DV,IAAI,CAACW,OAAhE,EAAyET,SAAS,CAACa,KAAnF,EAA0Ff,IAAI,CAACa,MAA/F,EAAuGb,IAAI,CAACc,KAA5G;AAFqB,KAApC,CALqC,CAAZ,CAAP,EASlBE,GATkB,CASdC,EAAE,IAAI3B,qBAAqB,CAAC4B,mBAAtB,CAA0CC,eAA1C,CAA0DF,EAA1D,CATQ,CAAtB;AAUA,UAAMG,cAAc,GAAG,IAAI7B,eAAe,CAAC8B,aAApB,CAAkClB,aAAa,CAACa,GAAd,CAAkBC,EAAE,IAAIA,EAAE,CAACG,cAA3B,CAAlC,EAA8E;AAAEE,MAAAA,SAAS,EAAE;AAAb,KAA9E,CAAvB;AACA,UAAMC,SAAS,GAAG,GAAGC,MAAH,CACbC,KADa,CACP,EADO,EACHtB,aAAa,CAACa,GAAd,CAAkBC,EAAE,IAAIA,EAAE,CAACM,SAA3B,CADG,CAAlB;AAEA,WAAO;AAAEG,MAAAA,IAAI,EAAE,UAAR;AAAoBN,MAAAA,cAApB;AAAoCG,MAAAA,SAAS,EAAE,CAAC,GAAG,IAAII,GAAJ,CAAQJ,SAAR,CAAJ,CAA/C;AAAwEK,MAAAA,gBAAgB,EAAE;AAA1F,KAAP;AACH;;AApB4E;;AAsBjF3C,OAAO,CAACE,0BAAR,GAAqCA,0BAArC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationPathAlt = void 0;\nconst actor_abstract_path_1 = require(\"@comunica/actor-abstract-path\");\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst asynciterator_1 = require(\"asynciterator\");\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n/**\n * A comunica Path Alt Query Operation Actor.\n */\nclass ActorQueryOperationPathAlt extends actor_abstract_path_1.ActorAbstractPath {\n    constructor(args) {\n        super(args, sparqlalgebrajs_1.Algebra.types.ALT);\n    }\n    async runOperation(path, context) {\n        const predicate = path.predicate;\n        const subOperations = (await Promise.all([\n            this.mediatorQueryOperation.mediate({\n                context,\n                operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.left, path.object, path.graph),\n            }),\n            this.mediatorQueryOperation.mediate({\n                context,\n                operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(path.subject, predicate.right, path.object, path.graph),\n            }),\n        ])).map(op => bus_query_operation_1.ActorQueryOperation.getSafeBindings(op));\n        const bindingsStream = new asynciterator_1.UnionIterator(subOperations.map(op => op.bindingsStream), { autoStart: false });\n        const variables = [].concat\n            .apply([], subOperations.map(op => op.variables));\n        return { type: 'bindings', bindingsStream, variables: [...new Set(variables)], canContainUndefs: false };\n    }\n}\nexports.ActorQueryOperationPathAlt = ActorQueryOperationPathAlt;\n//# sourceMappingURL=ActorQueryOperationPathAlt.js.map"]},"metadata":{},"sourceType":"script"}