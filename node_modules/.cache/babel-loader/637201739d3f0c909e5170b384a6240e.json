{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MediatorAll = void 0;\n\nconst core_1 = require(\"@comunica/core\");\n/**\n * A comunica mediator that runs all actors that resolve their test.\n * This mediator will always resolve to the first actor's output.\n */\n\n\nclass MediatorAll extends core_1.Mediator {\n  constructor(args) {\n    super(args);\n  }\n\n  async mediate(action) {\n    // Collect all actors that resolve their test\n    const validActors = [];\n    let testResults;\n\n    try {\n      testResults = this.publish(action);\n    } catch (_a) {\n      testResults = [];\n    }\n\n    for (const testResult of testResults) {\n      try {\n        await testResult.reply;\n        validActors.push(testResult.actor);\n      } catch (_b) {// Ignore errors\n      }\n    } // Send action to all valid actors\n\n\n    const outputs = await Promise.all(validActors.map(actor => actor.runObservable(action)));\n    return outputs[0];\n  }\n\n  async mediateWith() {\n    throw new Error('Unsupported operation: MediatorAll#mediateWith');\n  }\n\n}\n\nexports.MediatorAll = MediatorAll;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/mediator-all/lib/MediatorAll.js"],"names":["Object","defineProperty","exports","value","MediatorAll","core_1","require","Mediator","constructor","args","mediate","action","validActors","testResults","publish","_a","testResult","reply","push","actor","_b","outputs","Promise","all","map","runObservable","mediateWith","Error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;AACA;;;AACA,MAAMF,WAAN,SAA0BC,MAAM,CAACE,QAAjC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACH;;AACY,QAAPC,OAAO,CAACC,MAAD,EAAS;AAClB;AACA,UAAMC,WAAW,GAAG,EAApB;AACA,QAAIC,WAAJ;;AACA,QAAI;AACAA,MAAAA,WAAW,GAAG,KAAKC,OAAL,CAAaH,MAAb,CAAd;AACH,KAFD,CAGA,OAAOI,EAAP,EAAW;AACPF,MAAAA,WAAW,GAAG,EAAd;AACH;;AACD,SAAK,MAAMG,UAAX,IAAyBH,WAAzB,EAAsC;AAClC,UAAI;AACA,cAAMG,UAAU,CAACC,KAAjB;AACAL,QAAAA,WAAW,CAACM,IAAZ,CAAiBF,UAAU,CAACG,KAA5B;AACH,OAHD,CAIA,OAAOC,EAAP,EAAW,CACP;AACH;AACJ,KAlBiB,CAmBlB;;;AACA,UAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYX,WAAW,CAACY,GAAZ,CAAgBL,KAAK,IAAIA,KAAK,CAACM,aAAN,CAAoBd,MAApB,CAAzB,CAAZ,CAAtB;AACA,WAAOU,OAAO,CAAC,CAAD,CAAd;AACH;;AACgB,QAAXK,WAAW,GAAG;AAChB,UAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AA7BqC;;AA+B1CzB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MediatorAll = void 0;\nconst core_1 = require(\"@comunica/core\");\n/**\n * A comunica mediator that runs all actors that resolve their test.\n * This mediator will always resolve to the first actor's output.\n */\nclass MediatorAll extends core_1.Mediator {\n    constructor(args) {\n        super(args);\n    }\n    async mediate(action) {\n        // Collect all actors that resolve their test\n        const validActors = [];\n        let testResults;\n        try {\n            testResults = this.publish(action);\n        }\n        catch (_a) {\n            testResults = [];\n        }\n        for (const testResult of testResults) {\n            try {\n                await testResult.reply;\n                validActors.push(testResult.actor);\n            }\n            catch (_b) {\n                // Ignore errors\n            }\n        }\n        // Send action to all valid actors\n        const outputs = await Promise.all(validActors.map(actor => actor.runObservable(action)));\n        return outputs[0];\n    }\n    async mediateWith() {\n        throw new Error('Unsupported operation: MediatorAll#mediateWith');\n    }\n}\nexports.MediatorAll = MediatorAll;\n//# sourceMappingURL=MediatorAll.js.map"]},"metadata":{},"sourceType":"script"}