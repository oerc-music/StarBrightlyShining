{"ast":null,"code":"/**\n * Resolves to the given item in the path data.\n * For example, new DataHandler({}, 'foo', 'bar')\n * will return pathData.foo.bar.\n *\n * Resolution can optionally be async,\n * and/or be behind a function call.\n */\nexport default class DataHandler {\n  constructor(options, ...dataProperties) {\n    this._isAsync = options.async;\n    this._isFunction = options.function;\n    this._dataProperties = dataProperties;\n  }\n\n  static sync(...dataProperties) {\n    return new DataHandler({\n      async: false\n    }, ...dataProperties);\n  }\n\n  static syncFunction(...dataProperties) {\n    return new DataHandler({\n      async: false,\n      function: true\n    }, ...dataProperties);\n  }\n\n  static async(...dataProperties) {\n    return new DataHandler({\n      async: true\n    }, ...dataProperties);\n  }\n\n  static asyncFunction(...dataProperties) {\n    return new DataHandler({\n      async: true,\n      function: true\n    }, ...dataProperties);\n  } // Resolves the data path, or returns a function that does so\n\n\n  handle(pathData) {\n    return !this._isFunction ? this._resolveDataPath(pathData) : () => this._resolveDataPath(pathData);\n  } // Resolves the data path\n\n\n  _resolveDataPath(data) {\n    return !this._isAsync ? this._resolveSyncDataPath(data) : this._resolveAsyncDataPath(data);\n  } // Resolves synchronous property access\n\n\n  _resolveSyncDataPath(data) {\n    for (const property of this._dataProperties) data = data && data[property];\n\n    return data;\n  } // Resolves asynchronous property access\n\n\n  async _resolveAsyncDataPath(data) {\n    for (const property of this._dataProperties) data = data && (await data[property]);\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/ldflex/module/DataHandler.js"],"names":["DataHandler","constructor","options","dataProperties","_isAsync","async","_isFunction","function","_dataProperties","sync","syncFunction","asyncFunction","handle","pathData","_resolveDataPath","data","_resolveSyncDataPath","_resolveAsyncDataPath","property"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,WAAN,CAAkB;AAC/BC,EAAAA,WAAW,CAACC,OAAD,EAAU,GAAGC,cAAb,EAA6B;AACtC,SAAKC,QAAL,GAAgBF,OAAO,CAACG,KAAxB;AACA,SAAKC,WAAL,GAAmBJ,OAAO,CAACK,QAA3B;AACA,SAAKC,eAAL,GAAuBL,cAAvB;AACD;;AAEU,SAAJM,IAAI,CAAC,GAAGN,cAAJ,EAAoB;AAC7B,WAAO,IAAIH,WAAJ,CAAgB;AACrBK,MAAAA,KAAK,EAAE;AADc,KAAhB,EAEJ,GAAGF,cAFC,CAAP;AAGD;;AAEkB,SAAZO,YAAY,CAAC,GAAGP,cAAJ,EAAoB;AACrC,WAAO,IAAIH,WAAJ,CAAgB;AACrBK,MAAAA,KAAK,EAAE,KADc;AAErBE,MAAAA,QAAQ,EAAE;AAFW,KAAhB,EAGJ,GAAGJ,cAHC,CAAP;AAID;;AAEW,SAALE,KAAK,CAAC,GAAGF,cAAJ,EAAoB;AAC9B,WAAO,IAAIH,WAAJ,CAAgB;AACrBK,MAAAA,KAAK,EAAE;AADc,KAAhB,EAEJ,GAAGF,cAFC,CAAP;AAGD;;AAEmB,SAAbQ,aAAa,CAAC,GAAGR,cAAJ,EAAoB;AACtC,WAAO,IAAIH,WAAJ,CAAgB;AACrBK,MAAAA,KAAK,EAAE,IADc;AAErBE,MAAAA,QAAQ,EAAE;AAFW,KAAhB,EAGJ,GAAGJ,cAHC,CAAP;AAID,GA/B8B,CA+B7B;;;AAGFS,EAAAA,MAAM,CAACC,QAAD,EAAW;AACf,WAAO,CAAC,KAAKP,WAAN,GAAoB,KAAKQ,gBAAL,CAAsBD,QAAtB,CAApB,GAAsD,MAAM,KAAKC,gBAAL,CAAsBD,QAAtB,CAAnE;AACD,GApC8B,CAoC7B;;;AAGFC,EAAAA,gBAAgB,CAACC,IAAD,EAAO;AACrB,WAAO,CAAC,KAAKX,QAAN,GAAiB,KAAKY,oBAAL,CAA0BD,IAA1B,CAAjB,GAAmD,KAAKE,qBAAL,CAA2BF,IAA3B,CAA1D;AACD,GAzC8B,CAyC7B;;;AAGFC,EAAAA,oBAAoB,CAACD,IAAD,EAAO;AACzB,SAAK,MAAMG,QAAX,IAAuB,KAAKV,eAA5B,EAA6CO,IAAI,GAAGA,IAAI,IAAIA,IAAI,CAACG,QAAD,CAAnB;;AAE7C,WAAOH,IAAP;AACD,GAhD8B,CAgD7B;;;AAGyB,QAArBE,qBAAqB,CAACF,IAAD,EAAO;AAChC,SAAK,MAAMG,QAAX,IAAuB,KAAKV,eAA5B,EAA6CO,IAAI,GAAGA,IAAI,KAAK,MAAMA,IAAI,CAACG,QAAD,CAAf,CAAX;;AAE7C,WAAOH,IAAP;AACD;;AAvD8B","sourcesContent":["/**\n * Resolves to the given item in the path data.\n * For example, new DataHandler({}, 'foo', 'bar')\n * will return pathData.foo.bar.\n *\n * Resolution can optionally be async,\n * and/or be behind a function call.\n */\nexport default class DataHandler {\n  constructor(options, ...dataProperties) {\n    this._isAsync = options.async;\n    this._isFunction = options.function;\n    this._dataProperties = dataProperties;\n  }\n\n  static sync(...dataProperties) {\n    return new DataHandler({\n      async: false\n    }, ...dataProperties);\n  }\n\n  static syncFunction(...dataProperties) {\n    return new DataHandler({\n      async: false,\n      function: true\n    }, ...dataProperties);\n  }\n\n  static async(...dataProperties) {\n    return new DataHandler({\n      async: true\n    }, ...dataProperties);\n  }\n\n  static asyncFunction(...dataProperties) {\n    return new DataHandler({\n      async: true,\n      function: true\n    }, ...dataProperties);\n  } // Resolves the data path, or returns a function that does so\n\n\n  handle(pathData) {\n    return !this._isFunction ? this._resolveDataPath(pathData) : () => this._resolveDataPath(pathData);\n  } // Resolves the data path\n\n\n  _resolveDataPath(data) {\n    return !this._isAsync ? this._resolveSyncDataPath(data) : this._resolveAsyncDataPath(data);\n  } // Resolves synchronous property access\n\n\n  _resolveSyncDataPath(data) {\n    for (const property of this._dataProperties) data = data && data[property];\n\n    return data;\n  } // Resolves asynchronous property access\n\n\n  async _resolveAsyncDataPath(data) {\n    for (const property of this._dataProperties) data = data && (await data[property]);\n\n    return data;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}