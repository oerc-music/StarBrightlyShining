{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorAbstractMediaTypedFixed = void 0;\n\nconst ActorAbstractMediaTyped_1 = require(\"./ActorAbstractMediaTyped\");\n\nclass ActorAbstractMediaTypedFixed extends ActorAbstractMediaTyped_1.ActorAbstractMediaTyped {\n  constructor(args) {\n    super(args);\n    const scale = this.priorityScale || this.priorityScale === 0 ? this.priorityScale : 1;\n\n    if (this.mediaTypes) {\n      Object.entries(this.mediaTypes).forEach(([key, value], index) => {\n        this.mediaTypes[key] = scale * value;\n      });\n    }\n\n    this.mediaTypes = Object.freeze(this.mediaTypes);\n    this.mediaTypeFormats = Object.freeze(this.mediaTypeFormats);\n  }\n\n  async testHandle(action, mediaType, context) {\n    if (!(mediaType in this.mediaTypes)) {\n      throw new Error(`Unrecognized media type: ${mediaType}`);\n    }\n\n    return await this.testHandleChecked(action, context);\n  }\n\n  async testMediaType(context) {\n    return true;\n  }\n\n  async getMediaTypes(context) {\n    return this.mediaTypes;\n  }\n\n  async testMediaTypeFormats(context) {\n    return true;\n  }\n\n  async getMediaTypeFormats(context) {\n    return this.mediaTypeFormats;\n  }\n\n}\n\nexports.ActorAbstractMediaTypedFixed = ActorAbstractMediaTypedFixed;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTypedFixed.js"],"names":["Object","defineProperty","exports","value","ActorAbstractMediaTypedFixed","ActorAbstractMediaTyped_1","require","ActorAbstractMediaTyped","constructor","args","scale","priorityScale","mediaTypes","entries","forEach","key","index","freeze","mediaTypeFormats","testHandle","action","mediaType","context","Error","testHandleChecked","testMediaType","getMediaTypes","testMediaTypeFormats","getMediaTypeFormats"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,4BAAR,GAAuC,KAAK,CAA5C;;AACA,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,2BAAD,CAAzC;;AACA,MAAMF,4BAAN,SAA2CC,yBAAyB,CAACE,uBAArE,CAA6F;AACzFC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACA,UAAMC,KAAK,GAAG,KAAKC,aAAL,IAAsB,KAAKA,aAAL,KAAuB,CAA7C,GAAiD,KAAKA,aAAtD,GAAsE,CAApF;;AACA,QAAI,KAAKC,UAAT,EAAqB;AACjBZ,MAAAA,MAAM,CAACa,OAAP,CAAe,KAAKD,UAApB,EAAgCE,OAAhC,CAAwC,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,EAAea,KAAf,KAAyB;AAC7D,aAAKJ,UAAL,CAAgBG,GAAhB,IAAuBL,KAAK,GAAGP,KAA/B;AACH,OAFD;AAGH;;AACD,SAAKS,UAAL,GAAkBZ,MAAM,CAACiB,MAAP,CAAc,KAAKL,UAAnB,CAAlB;AACA,SAAKM,gBAAL,GAAwBlB,MAAM,CAACiB,MAAP,CAAc,KAAKC,gBAAnB,CAAxB;AACH;;AACe,QAAVC,UAAU,CAACC,MAAD,EAASC,SAAT,EAAoBC,OAApB,EAA6B;AACzC,QAAI,EAAED,SAAS,IAAI,KAAKT,UAApB,CAAJ,EAAqC;AACjC,YAAM,IAAIW,KAAJ,CAAW,4BAA2BF,SAAU,EAAhD,CAAN;AACH;;AACD,WAAO,MAAM,KAAKG,iBAAL,CAAuBJ,MAAvB,EAA+BE,OAA/B,CAAb;AACH;;AACkB,QAAbG,aAAa,CAACH,OAAD,EAAU;AACzB,WAAO,IAAP;AACH;;AACkB,QAAbI,aAAa,CAACJ,OAAD,EAAU;AACzB,WAAO,KAAKV,UAAZ;AACH;;AACyB,QAApBe,oBAAoB,CAACL,OAAD,EAAU;AAChC,WAAO,IAAP;AACH;;AACwB,QAAnBM,mBAAmB,CAACN,OAAD,EAAU;AAC/B,WAAO,KAAKJ,gBAAZ;AACH;;AA7BwF;;AA+B7FhB,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorAbstractMediaTypedFixed = void 0;\nconst ActorAbstractMediaTyped_1 = require(\"./ActorAbstractMediaTyped\");\nclass ActorAbstractMediaTypedFixed extends ActorAbstractMediaTyped_1.ActorAbstractMediaTyped {\n    constructor(args) {\n        super(args);\n        const scale = this.priorityScale || this.priorityScale === 0 ? this.priorityScale : 1;\n        if (this.mediaTypes) {\n            Object.entries(this.mediaTypes).forEach(([key, value], index) => {\n                this.mediaTypes[key] = scale * value;\n            });\n        }\n        this.mediaTypes = Object.freeze(this.mediaTypes);\n        this.mediaTypeFormats = Object.freeze(this.mediaTypeFormats);\n    }\n    async testHandle(action, mediaType, context) {\n        if (!(mediaType in this.mediaTypes)) {\n            throw new Error(`Unrecognized media type: ${mediaType}`);\n        }\n        return await this.testHandleChecked(action, context);\n    }\n    async testMediaType(context) {\n        return true;\n    }\n    async getMediaTypes(context) {\n        return this.mediaTypes;\n    }\n    async testMediaTypeFormats(context) {\n        return true;\n    }\n    async getMediaTypeFormats(context) {\n        return this.mediaTypeFormats;\n    }\n}\nexports.ActorAbstractMediaTypedFixed = ActorAbstractMediaTypedFixed;\n//# sourceMappingURL=ActorAbstractMediaTypedFixed.js.map"]},"metadata":{},"sourceType":"script"}