{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorSparqlSerializeJson = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\n\nconst RdfString = require(\"rdf-string\");\n/**\n * A comunica JSON SPARQL Serialize Actor.\n */\n\n\nclass ActorSparqlSerializeJson extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n  constructor(args) {\n    super(args);\n  }\n\n  async testHandleChecked(action, context) {\n    if (!['bindings', 'quads', 'boolean'].includes(action.type)) {\n      throw new Error('This actor can only handle bindings or quad streams.');\n    }\n\n    return true;\n  }\n\n  async runHandle(action, mediaType, context) {\n    const data = new stream_1.Readable();\n\n    data._read = () => {// Do nothing\n    };\n\n    let empty = true;\n\n    if (action.type === 'bindings') {\n      const resultStream = action.bindingsStream;\n      data.push('[');\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', element => {\n        data.push(empty ? '\\n' : ',\\n');\n        data.push(JSON.stringify(element.map(RdfString.termToString)));\n        empty = false;\n      });\n      resultStream.on('end', () => {\n        data.push(empty ? ']\\n' : '\\n]\\n');\n        data.push(null);\n      });\n    } else if (action.type === 'quads') {\n      const resultStream = action.quadStream;\n      data.push('[');\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', element => {\n        data.push(empty ? '\\n' : ',\\n');\n        data.push(JSON.stringify(RdfString.quadToStringQuad(element)));\n        empty = false;\n      });\n      resultStream.on('end', () => {\n        data.push(empty ? ']\\n' : '\\n]\\n');\n        data.push(null);\n      });\n    } else {\n      try {\n        data.push(`${JSON.stringify(await action.booleanResult)}\\n`);\n        data.push(null);\n      } catch (error) {\n        setImmediate(() => data.emit('error', error));\n      }\n    }\n\n    return {\n      data\n    };\n  }\n\n}\n\nexports.ActorSparqlSerializeJson = ActorSparqlSerializeJson;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-sparql-serialize-json/lib/ActorSparqlSerializeJson.js"],"names":["Object","defineProperty","exports","value","ActorSparqlSerializeJson","stream_1","require","bus_sparql_serialize_1","RdfString","ActorSparqlSerializeFixedMediaTypes","constructor","args","testHandleChecked","action","context","includes","type","Error","runHandle","mediaType","data","Readable","_read","empty","resultStream","bindingsStream","push","on","error","emit","element","JSON","stringify","map","termToString","quadStream","quadToStringQuad","booleanResult","setImmediate"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorSparqlSerializeJson = void 0;\nconst stream_1 = require(\"stream\");\nconst bus_sparql_serialize_1 = require(\"@comunica/bus-sparql-serialize\");\nconst RdfString = require(\"rdf-string\");\n/**\n * A comunica JSON SPARQL Serialize Actor.\n */\nclass ActorSparqlSerializeJson extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {\n    constructor(args) {\n        super(args);\n    }\n    async testHandleChecked(action, context) {\n        if (!['bindings', 'quads', 'boolean'].includes(action.type)) {\n            throw new Error('This actor can only handle bindings or quad streams.');\n        }\n        return true;\n    }\n    async runHandle(action, mediaType, context) {\n        const data = new stream_1.Readable();\n        data._read = () => {\n            // Do nothing\n        };\n        let empty = true;\n        if (action.type === 'bindings') {\n            const resultStream = action.bindingsStream;\n            data.push('[');\n            resultStream.on('error', error => data.emit('error', error));\n            resultStream.on('data', element => {\n                data.push(empty ? '\\n' : ',\\n');\n                data.push(JSON.stringify(element.map(RdfString.termToString)));\n                empty = false;\n            });\n            resultStream.on('end', () => {\n                data.push(empty ? ']\\n' : '\\n]\\n');\n                data.push(null);\n            });\n        }\n        else if (action.type === 'quads') {\n            const resultStream = action.quadStream;\n            data.push('[');\n            resultStream.on('error', error => data.emit('error', error));\n            resultStream.on('data', element => {\n                data.push(empty ? '\\n' : ',\\n');\n                data.push(JSON.stringify(RdfString.quadToStringQuad(element)));\n                empty = false;\n            });\n            resultStream.on('end', () => {\n                data.push(empty ? ']\\n' : '\\n]\\n');\n                data.push(null);\n            });\n        }\n        else {\n            try {\n                data.push(`${JSON.stringify(await action.booleanResult)}\\n`);\n                data.push(null);\n            }\n            catch (error) {\n                setImmediate(() => data.emit('error', error));\n            }\n        }\n        return { data };\n    }\n}\nexports.ActorSparqlSerializeJson = ActorSparqlSerializeJson;\n//# sourceMappingURL=ActorSparqlSerializeJson.js.map"]},"metadata":{},"sourceType":"script"}