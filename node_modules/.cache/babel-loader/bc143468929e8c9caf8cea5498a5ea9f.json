{"ast":null,"code":"let AsyncIterator = require('asynciterator');\n\nlet MultiTransformIterator = AsyncIterator.MultiTransformIterator;\nlet SimpleTransformIterator = AsyncIterator.SimpleTransformIterator; // Nested Loop Join, but the values of the inner loop are determined by each value of the outer loop, possibly reducing the number of necessary checks\n\nclass DynamicNestedLoopJoin extends MultiTransformIterator {\n  constructor(left, funRight, funJoin) {\n    super(left);\n    this.funRight = funRight;\n    this.funJoin = funJoin;\n  }\n\n  _createTransformer(leftItem) {\n    return new SimpleTransformIterator(this.funRight(leftItem), {\n      transform: (rightItem, done) => {\n        let result = this.funJoin(leftItem, rightItem);\n        if (result !== null) this._push(result);\n        done();\n      }\n    });\n  }\n\n}\n\nmodule.exports = DynamicNestedLoopJoin;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/asyncjoin/join/DynamicNestedLoopJoin.js"],"names":["AsyncIterator","require","MultiTransformIterator","SimpleTransformIterator","DynamicNestedLoopJoin","constructor","left","funRight","funJoin","_createTransformer","leftItem","transform","rightItem","done","result","_push","module","exports"],"mappings":"AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAIC,sBAAsB,GAAGF,aAAa,CAACE,sBAA3C;AACA,IAAIC,uBAAuB,GAAGH,aAAa,CAACG,uBAA5C,C,CAEA;;AACA,MAAMC,qBAAN,SAAoCF,sBAApC,CACA;AACIG,EAAAA,WAAW,CAAEC,IAAF,EAAQC,QAAR,EAAkBC,OAAlB,EACX;AACI,UAAMF,IAAN;AAEA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AAEDC,EAAAA,kBAAkB,CAAEC,QAAF,EAClB;AACI,WAAO,IAAIP,uBAAJ,CAA4B,KAAKI,QAAL,CAAcG,QAAd,CAA5B,EAAqD;AAAEC,MAAAA,SAAS,EAAE,CAACC,SAAD,EAAYC,IAAZ,KACzE;AACI,YAAIC,MAAM,GAAG,KAAKN,OAAL,CAAaE,QAAb,EAAuBE,SAAvB,CAAb;AACA,YAAIE,MAAM,KAAK,IAAf,EACI,KAAKC,KAAL,CAAWD,MAAX;AACJD,QAAAA,IAAI;AACP;AAN2D,KAArD,CAAP;AAOH;;AAlBL;;AAqBAG,MAAM,CAACC,OAAP,GAAiBb,qBAAjB","sourcesContent":["\nlet AsyncIterator = require('asynciterator');\nlet MultiTransformIterator = AsyncIterator.MultiTransformIterator;\nlet SimpleTransformIterator = AsyncIterator.SimpleTransformIterator;\n\n// Nested Loop Join, but the values of the inner loop are determined by each value of the outer loop, possibly reducing the number of necessary checks\nclass DynamicNestedLoopJoin extends MultiTransformIterator\n{\n    constructor (left, funRight, funJoin)\n    {\n        super(left);\n        \n        this.funRight = funRight;\n        this.funJoin = funJoin;\n    }\n    \n    _createTransformer (leftItem)\n    {\n        return new SimpleTransformIterator(this.funRight(leftItem), { transform: (rightItem, done) =>\n        {\n            let result = this.funJoin(leftItem, rightItem);\n            if (result !== null)\n                this._push(result);\n            done();\n        }});\n    }\n}\n\nmodule.exports = DynamicNestedLoopJoin;"]},"metadata":{},"sourceType":"script"}