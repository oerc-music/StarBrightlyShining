{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Translator_1 = require(\"../Translator\");\n/**\n * Translates dates.\n */\n\n\nclass TypeHandlerDate {\n  fromRdf(literal, validate) {\n    if (validate && !literal.value.match(TypeHandlerDate.VALIDATORS[literal.datatype.value.substr(33, literal.datatype.value.length)])) {\n      Translator_1.Translator.incorrectRdfDataType(literal);\n    }\n\n    switch (literal.datatype.value) {\n      case 'http://www.w3.org/2001/XMLSchema#gDay':\n        return new Date(0, 0, parseInt(literal.value, 10));\n\n      case 'http://www.w3.org/2001/XMLSchema#gMonthDay':\n        const partsMonthDay = literal.value.split('-');\n        return new Date(0, parseInt(partsMonthDay[0], 10) - 1, parseInt(partsMonthDay[1], 10));\n\n      case 'http://www.w3.org/2001/XMLSchema#gYear':\n        return new Date(literal.value + '-01-01');\n\n      case 'http://www.w3.org/2001/XMLSchema#gYearMonth':\n        return new Date(literal.value + '-01');\n\n      default:\n        return new Date(literal.value);\n    }\n  }\n\n  toRdf(value, {\n    datatype,\n    dataFactory\n  }) {\n    datatype = datatype || dataFactory.namedNode(TypeHandlerDate.TYPES[0]); // Assume date values\n\n    if (!(value instanceof Date)) {\n      return null;\n    }\n\n    const date = value;\n    let valueString;\n\n    switch (datatype.value) {\n      case 'http://www.w3.org/2001/XMLSchema#gDay':\n        valueString = String(date.getUTCDate());\n        break;\n\n      case 'http://www.w3.org/2001/XMLSchema#gMonthDay':\n        valueString = date.getUTCMonth() + 1 + '-' + date.getUTCDate();\n        break;\n\n      case 'http://www.w3.org/2001/XMLSchema#gYear':\n        valueString = String(date.getUTCFullYear());\n        break;\n\n      case 'http://www.w3.org/2001/XMLSchema#gYearMonth':\n        valueString = date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1);\n        break;\n\n      case 'http://www.w3.org/2001/XMLSchema#date':\n        valueString = date.toISOString().replace(/T.*$/, '');\n        break;\n\n      default:\n        valueString = date.toISOString();\n    }\n\n    return dataFactory.literal(valueString, datatype);\n  }\n\n}\n\nexports.TypeHandlerDate = TypeHandlerDate;\nTypeHandlerDate.TYPES = ['http://www.w3.org/2001/XMLSchema#dateTime', 'http://www.w3.org/2001/XMLSchema#date', 'http://www.w3.org/2001/XMLSchema#gDay', 'http://www.w3.org/2001/XMLSchema#gMonthDay', 'http://www.w3.org/2001/XMLSchema#gYear', 'http://www.w3.org/2001/XMLSchema#gYearMonth'];\nTypeHandlerDate.VALIDATORS = {\n  date: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/,\n  dateTime: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9][0-9][0-9])?((Z?)|([\\+-][0-9][0-9]:[0-9][0-9]))$/,\n  gDay: /^[0-9]+$/,\n  gMonthDay: /^[0-9]+-[0-9][0-9]$/,\n  gYear: /^[0-9]+$/,\n  gYearMonth: /^[0-9]+-[0-9][0-9]$/\n};","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/rdf-literal/lib/handler/TypeHandlerDate.js"],"names":["Object","defineProperty","exports","value","Translator_1","require","TypeHandlerDate","fromRdf","literal","validate","match","VALIDATORS","datatype","substr","length","Translator","incorrectRdfDataType","Date","parseInt","partsMonthDay","split","toRdf","dataFactory","namedNode","TYPES","date","valueString","String","getUTCDate","getUTCMonth","getUTCFullYear","toISOString","replace","dateTime","gDay","gMonthDay","gYear","gYearMonth"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Translator_1 = require(\"../Translator\");\n/**\n * Translates dates.\n */\nclass TypeHandlerDate {\n    fromRdf(literal, validate) {\n        if (validate && !literal.value.match(TypeHandlerDate\n            .VALIDATORS[literal.datatype.value.substr(33, literal.datatype.value.length)])) {\n            Translator_1.Translator.incorrectRdfDataType(literal);\n        }\n        switch (literal.datatype.value) {\n            case 'http://www.w3.org/2001/XMLSchema#gDay':\n                return new Date(0, 0, parseInt(literal.value, 10));\n            case 'http://www.w3.org/2001/XMLSchema#gMonthDay':\n                const partsMonthDay = literal.value.split('-');\n                return new Date(0, parseInt(partsMonthDay[0], 10) - 1, parseInt(partsMonthDay[1], 10));\n            case 'http://www.w3.org/2001/XMLSchema#gYear':\n                return new Date(literal.value + '-01-01');\n            case 'http://www.w3.org/2001/XMLSchema#gYearMonth':\n                return new Date(literal.value + '-01');\n            default:\n                return new Date(literal.value);\n        }\n    }\n    toRdf(value, { datatype, dataFactory }) {\n        datatype = datatype || dataFactory.namedNode(TypeHandlerDate.TYPES[0]);\n        // Assume date values\n        if (!(value instanceof Date)) {\n            return null;\n        }\n        const date = value;\n        let valueString;\n        switch (datatype.value) {\n            case 'http://www.w3.org/2001/XMLSchema#gDay':\n                valueString = String(date.getUTCDate());\n                break;\n            case 'http://www.w3.org/2001/XMLSchema#gMonthDay':\n                valueString = (date.getUTCMonth() + 1) + '-' + date.getUTCDate();\n                break;\n            case 'http://www.w3.org/2001/XMLSchema#gYear':\n                valueString = String(date.getUTCFullYear());\n                break;\n            case 'http://www.w3.org/2001/XMLSchema#gYearMonth':\n                valueString = date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1);\n                break;\n            case 'http://www.w3.org/2001/XMLSchema#date':\n                valueString = date.toISOString().replace(/T.*$/, '');\n                break;\n            default:\n                valueString = date.toISOString();\n        }\n        return dataFactory.literal(valueString, datatype);\n    }\n}\nexports.TypeHandlerDate = TypeHandlerDate;\nTypeHandlerDate.TYPES = [\n    'http://www.w3.org/2001/XMLSchema#dateTime',\n    'http://www.w3.org/2001/XMLSchema#date',\n    'http://www.w3.org/2001/XMLSchema#gDay',\n    'http://www.w3.org/2001/XMLSchema#gMonthDay',\n    'http://www.w3.org/2001/XMLSchema#gYear',\n    'http://www.w3.org/2001/XMLSchema#gYearMonth',\n];\nTypeHandlerDate.VALIDATORS = {\n    date: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/,\n    dateTime: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9][0-9][0-9])?((Z?)|([\\+-][0-9][0-9]:[0-9][0-9]))$/,\n    gDay: /^[0-9]+$/,\n    gMonthDay: /^[0-9]+-[0-9][0-9]$/,\n    gYear: /^[0-9]+$/,\n    gYearMonth: /^[0-9]+-[0-9][0-9]$/,\n};\n//# sourceMappingURL=TypeHandlerDate.js.map"]},"metadata":{},"sourceType":"script"}