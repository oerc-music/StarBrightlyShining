{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActorQueryOperationSlice = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n/**\n * A comunica Slice Query Operation Actor.\n */\n\n\nclass ActorQueryOperationSlice extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'slice');\n  }\n\n  async testOperation(pattern, context) {\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    // Resolve the input\n    const output = await this.mediatorQueryOperation.mediate({\n      operation: pattern.input,\n      context\n    });\n    const metadata = this.sliceMetadata(output, pattern);\n\n    if (output.type === 'bindings') {\n      const bindingsOutput = output;\n      const bindingsStream = this.sliceStream(bindingsOutput.bindingsStream, pattern);\n      return {\n        type: 'bindings',\n        bindingsStream,\n        metadata,\n        variables: bindingsOutput.variables,\n        canContainUndefs: bindingsOutput.canContainUndefs\n      };\n    }\n\n    if (output.type === 'quads') {\n      const quadOutput = output;\n      const quadStream = this.sliceStream(quadOutput.quadStream, pattern);\n      return {\n        type: 'quads',\n        quadStream,\n        metadata\n      };\n    }\n\n    throw new Error(`Invalid query output type: Expected 'bindings' or 'quads' but got '${output.type}'`);\n  } // Slice the stream based on the pattern values\n\n\n  sliceStream(stream, pattern) {\n    // eslint-disable-next-line unicorn/explicit-length-check\n    const hasLength = Boolean(pattern.length) || pattern.length === 0;\n    const {\n      start\n    } = pattern;\n    const end = hasLength ? pattern.start + pattern.length - 1 : Number.POSITIVE_INFINITY;\n    return stream.transform({\n      offset: start,\n      limit: Math.max(end - start + 1, 0),\n      autoStart: false\n    });\n  } // If we find metadata, apply slicing on the total number of items\n\n\n  sliceMetadata(output, pattern) {\n    // eslint-disable-next-line unicorn/explicit-length-check\n    const hasLength = Boolean(pattern.length) || pattern.length === 0;\n    return !output.metadata ? undefined : () => output.metadata().then(subMetadata => {\n      let {\n        totalItems\n      } = subMetadata;\n\n      if (Number.isFinite(totalItems)) {\n        totalItems = Math.max(0, totalItems - pattern.start);\n\n        if (hasLength) {\n          totalItems = Math.min(totalItems, pattern.length);\n        }\n      }\n\n      return Object.assign(Object.assign({}, subMetadata), {\n        totalItems\n      });\n    });\n  }\n\n}\n\nexports.ActorQueryOperationSlice = ActorQueryOperationSlice;","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-slice/lib/ActorQueryOperationSlice.js"],"names":["Object","defineProperty","exports","value","ActorQueryOperationSlice","bus_query_operation_1","require","ActorQueryOperationTypedMediated","constructor","args","testOperation","pattern","context","runOperation","output","mediatorQueryOperation","mediate","operation","input","metadata","sliceMetadata","type","bindingsOutput","bindingsStream","sliceStream","variables","canContainUndefs","quadOutput","quadStream","Error","stream","hasLength","Boolean","length","start","end","Number","POSITIVE_INFINITY","transform","offset","limit","Math","max","autoStart","undefined","then","subMetadata","totalItems","isFinite","min","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActorQueryOperationSlice = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n/**\n * A comunica Slice Query Operation Actor.\n */\nclass ActorQueryOperationSlice extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'slice');\n    }\n    async testOperation(pattern, context) {\n        return true;\n    }\n    async runOperation(pattern, context) {\n        // Resolve the input\n        const output = await this.mediatorQueryOperation\n            .mediate({ operation: pattern.input, context });\n        const metadata = this.sliceMetadata(output, pattern);\n        if (output.type === 'bindings') {\n            const bindingsOutput = output;\n            const bindingsStream = this.sliceStream(bindingsOutput.bindingsStream, pattern);\n            return {\n                type: 'bindings',\n                bindingsStream,\n                metadata,\n                variables: bindingsOutput.variables,\n                canContainUndefs: bindingsOutput.canContainUndefs,\n            };\n        }\n        if (output.type === 'quads') {\n            const quadOutput = output;\n            const quadStream = this.sliceStream(quadOutput.quadStream, pattern);\n            return { type: 'quads', quadStream, metadata };\n        }\n        throw new Error(`Invalid query output type: Expected 'bindings' or 'quads' but got '${output.type}'`);\n    }\n    // Slice the stream based on the pattern values\n    sliceStream(stream, pattern) {\n        // eslint-disable-next-line unicorn/explicit-length-check\n        const hasLength = Boolean(pattern.length) || pattern.length === 0;\n        const { start } = pattern;\n        const end = hasLength ? pattern.start + pattern.length - 1 : Number.POSITIVE_INFINITY;\n        return stream.transform({ offset: start, limit: Math.max(end - start + 1, 0), autoStart: false });\n    }\n    // If we find metadata, apply slicing on the total number of items\n    sliceMetadata(output, pattern) {\n        // eslint-disable-next-line unicorn/explicit-length-check\n        const hasLength = Boolean(pattern.length) || pattern.length === 0;\n        return !output.metadata ?\n            undefined :\n            () => output.metadata()\n                .then(subMetadata => {\n                let { totalItems } = subMetadata;\n                if (Number.isFinite(totalItems)) {\n                    totalItems = Math.max(0, totalItems - pattern.start);\n                    if (hasLength) {\n                        totalItems = Math.min(totalItems, pattern.length);\n                    }\n                }\n                return Object.assign(Object.assign({}, subMetadata), { totalItems });\n            });\n    }\n}\nexports.ActorQueryOperationSlice = ActorQueryOperationSlice;\n//# sourceMappingURL=ActorQueryOperationSlice.js.map"]},"metadata":{},"sourceType":"script"}