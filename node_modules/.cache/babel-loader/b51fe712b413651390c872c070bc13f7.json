{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeysRdfUpdateQuads = exports.KeysRdfResolveQuadPattern = exports.KeysRdfParseJsonLd = exports.KeysQueryOperation = exports.KeysInitSparql = exports.KeysHttpProxy = exports.KeysHttpMemento = exports.KeysHttp = exports.KeysCore = void 0;\nvar KeysCore;\n\n(function (KeysCore) {\n  /**\n   * @range {Logger} A logger instance.\n   */\n  KeysCore[\"log\"] = \"@comunica/core:log\";\n})(KeysCore = exports.KeysCore || (exports.KeysCore = {}));\n\nvar KeysHttp;\n\n(function (KeysHttp) {\n  /**\n   * @range {boolean} Include credentials flags.\n   */\n  KeysHttp[\"includeCredentials\"] = \"@comunica/bus-http:include-credentials\";\n  /**\n   * @range {string} Authentication for a source as a \"username:password\"-pair.\n   */\n\n  KeysHttp[\"auth\"] = \"@comunica/bus-http:auth\";\n})(KeysHttp = exports.KeysHttp || (exports.KeysHttp = {}));\n\nvar KeysHttpMemento;\n\n(function (KeysHttpMemento) {\n  /**\n   * @range {string} The desired datetime for Memento datetime-negotiation.\n   */\n  KeysHttpMemento[\"datetime\"] = \"@comunica/actor-http-memento:datetime\";\n})(KeysHttpMemento = exports.KeysHttpMemento || (exports.KeysHttpMemento = {}));\n\nvar KeysHttpProxy;\n\n(function (KeysHttpProxy) {\n  /**\n   * @range {IProxyHandler} A handler implementing the {@link IProxyHandler} interface.\n   */\n  KeysHttpProxy[\"httpProxyHandler\"] = \"@comunica/actor-http-proxy:httpProxyHandler\";\n})(KeysHttpProxy = exports.KeysHttpProxy || (exports.KeysHttpProxy = {}));\n\nvar KeysInitSparql;\n\n(function (KeysInitSparql) {\n  /**\n   * @range {Bindings} Variables that have to be pre-bound to values in the query.\n   */\n  KeysInitSparql[\"initialBindings\"] = \"@comunica/actor-init-sparql:initialBindings\";\n  /**\n   * @range {string} Name of the provided query's format.\n   */\n\n  KeysInitSparql[\"queryFormat\"] = \"@comunica/actor-init-sparql:queryFormat\";\n  /**\n   * @range {any} Which GraphQL bindings should be singularized.\n   */\n\n  KeysInitSparql[\"graphqlSingularizeVariables\"] = \"@comunica/actor-init-sparql:singularizeVariables\";\n  /**\n   * @range {boolean} If HTTP and parsing failures are ignored.\n   */\n\n  KeysInitSparql[\"lenient\"] = \"@comunica/actor-init-sparql:lenient\";\n  /**\n   * @range {Algebra.Operation} The original parsed query.\n   */\n\n  KeysInitSparql[\"query\"] = \"@comunica/actor-init-sparql:query\";\n  /**\n   * @range {string} The query's base IRI.\n   */\n\n  KeysInitSparql[\"baseIRI\"] = \"@comunica/actor-init-sparql:baseIRI\";\n  /**\n   * @range {Date} A timestamp representing the current time.\n   *                 This is required for certain SPARQL operations such as NOW().\n   */\n\n  KeysInitSparql[\"queryTimestamp\"] = \"@comunica/actor-init-sparql:queryTimestamp\";\n})(KeysInitSparql = exports.KeysInitSparql || (exports.KeysInitSparql = {}));\n\nvar KeysQueryOperation;\n\n(function (KeysQueryOperation) {\n  /**\n   * @range {string} Context entry for the current query operation.\n   */\n  KeysQueryOperation[\"operation\"] = \"@comunica/bus-query-operation:operation\";\n  /**\n   * @type {any} The current metadata.\n   *             I.e., the metadata that was used to determine the next BGP operation.\n   */\n\n  KeysQueryOperation[\"bgpCurrentMetadata\"] = \"@comunica/bus-query-operation:bgpCurrentMetadata\";\n  /**\n   * @range {any[]} An array of parent metadata.\n   *                I.e., an array of the metadata that was present before materializing the current BGP operations.\n   *                This can be passed in 'bgp' actions.\n   *                The array entries should correspond to the pattern entries in the BGP.\n   */\n\n  KeysQueryOperation[\"bgpParentMetadata\"] = \"@comunica/bus-query-operation:bgpParentMetadata\";\n  /**\n   * @range {IPatternBindings[]} Indicating which patterns were bound from variables.\n   *                             I.e., an array of the same length as the value of\n   *                             KeysQueryOperation.patternParentMetadata,\n   *                             where each array value corresponds to the pattern bindings\n   *                             for the corresponding pattern.\n   */\n\n  KeysQueryOperation[\"bgpPatternBindings\"] = \"@comunica/bus-query-operation:bgpPatternBindings\";\n  /**\n   * @range {any} Parent metadata hash.\n   *              I.e., the metadata that was present before materializing the current operation.\n   *              This can be passed in 'pattern' actions.\n   */\n\n  KeysQueryOperation[\"patternParentMetadata\"] = \"@comunica/bus-query-operation:patternParentMetadata\";\n  /**\n   * @range {boolean} Flag for indicating that only read operations are allowed, defaults to false.\n   */\n\n  KeysQueryOperation[\"readOnly\"] = \"@comunica/bus-query-operation:readOnly\";\n})(KeysQueryOperation = exports.KeysQueryOperation || (exports.KeysQueryOperation = {}));\n\nvar KeysRdfParseJsonLd;\n\n(function (KeysRdfParseJsonLd) {\n  /**\n   * @range {IDocumentLoader}\n   */\n  KeysRdfParseJsonLd[\"documentLoader\"] = \"@comunica/actor-rdf-parse-jsonld:documentLoader\";\n  /**\n   * @range {boolean}\n   */\n\n  KeysRdfParseJsonLd[\"strictValues\"] = \"@comunica/actor-rdf-parse-jsonld:strictValues\";\n  /**\n   * @range {Record<string, any>}\n   */\n\n  KeysRdfParseJsonLd[\"parserOptions\"] = \"@comunica/actor-rdf-parse-jsonld:parserOptions\";\n})(KeysRdfParseJsonLd = exports.KeysRdfParseJsonLd || (exports.KeysRdfParseJsonLd = {}));\n\nvar KeysRdfResolveQuadPattern;\n\n(function (KeysRdfResolveQuadPattern) {\n  /**\n   * @range {DataSources} Data sources.\n   */\n  KeysRdfResolveQuadPattern[\"sources\"] = \"@comunica/bus-rdf-resolve-quad-pattern:sources\";\n  /**\n   * @range {IDataSource} A data source.\n   */\n\n  KeysRdfResolveQuadPattern[\"source\"] = \"@comunica/bus-rdf-resolve-quad-pattern:source\";\n})(KeysRdfResolveQuadPattern = exports.KeysRdfResolveQuadPattern || (exports.KeysRdfResolveQuadPattern = {}));\n\nvar KeysRdfUpdateQuads;\n\n(function (KeysRdfUpdateQuads) {\n  /**\n   * @range {IDataDestination} A data destination.\n   */\n  KeysRdfUpdateQuads[\"destination\"] = \"@comunica/bus-rdf-update-quads:destination\";\n})(KeysRdfUpdateQuads = exports.KeysRdfUpdateQuads || (exports.KeysRdfUpdateQuads = {}));","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/context-entries/lib/Keys.js"],"names":["Object","defineProperty","exports","value","KeysRdfUpdateQuads","KeysRdfResolveQuadPattern","KeysRdfParseJsonLd","KeysQueryOperation","KeysInitSparql","KeysHttpProxy","KeysHttpMemento","KeysHttp","KeysCore"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeysRdfUpdateQuads = exports.KeysRdfResolveQuadPattern = exports.KeysRdfParseJsonLd = exports.KeysQueryOperation = exports.KeysInitSparql = exports.KeysHttpProxy = exports.KeysHttpMemento = exports.KeysHttp = exports.KeysCore = void 0;\nvar KeysCore;\n(function (KeysCore) {\n    /**\n     * @range {Logger} A logger instance.\n     */\n    KeysCore[\"log\"] = \"@comunica/core:log\";\n})(KeysCore = exports.KeysCore || (exports.KeysCore = {}));\nvar KeysHttp;\n(function (KeysHttp) {\n    /**\n     * @range {boolean} Include credentials flags.\n     */\n    KeysHttp[\"includeCredentials\"] = \"@comunica/bus-http:include-credentials\";\n    /**\n     * @range {string} Authentication for a source as a \"username:password\"-pair.\n     */\n    KeysHttp[\"auth\"] = \"@comunica/bus-http:auth\";\n})(KeysHttp = exports.KeysHttp || (exports.KeysHttp = {}));\nvar KeysHttpMemento;\n(function (KeysHttpMemento) {\n    /**\n     * @range {string} The desired datetime for Memento datetime-negotiation.\n     */\n    KeysHttpMemento[\"datetime\"] = \"@comunica/actor-http-memento:datetime\";\n})(KeysHttpMemento = exports.KeysHttpMemento || (exports.KeysHttpMemento = {}));\nvar KeysHttpProxy;\n(function (KeysHttpProxy) {\n    /**\n     * @range {IProxyHandler} A handler implementing the {@link IProxyHandler} interface.\n     */\n    KeysHttpProxy[\"httpProxyHandler\"] = \"@comunica/actor-http-proxy:httpProxyHandler\";\n})(KeysHttpProxy = exports.KeysHttpProxy || (exports.KeysHttpProxy = {}));\nvar KeysInitSparql;\n(function (KeysInitSparql) {\n    /**\n     * @range {Bindings} Variables that have to be pre-bound to values in the query.\n     */\n    KeysInitSparql[\"initialBindings\"] = \"@comunica/actor-init-sparql:initialBindings\";\n    /**\n     * @range {string} Name of the provided query's format.\n     */\n    KeysInitSparql[\"queryFormat\"] = \"@comunica/actor-init-sparql:queryFormat\";\n    /**\n     * @range {any} Which GraphQL bindings should be singularized.\n     */\n    KeysInitSparql[\"graphqlSingularizeVariables\"] = \"@comunica/actor-init-sparql:singularizeVariables\";\n    /**\n     * @range {boolean} If HTTP and parsing failures are ignored.\n     */\n    KeysInitSparql[\"lenient\"] = \"@comunica/actor-init-sparql:lenient\";\n    /**\n     * @range {Algebra.Operation} The original parsed query.\n     */\n    KeysInitSparql[\"query\"] = \"@comunica/actor-init-sparql:query\";\n    /**\n     * @range {string} The query's base IRI.\n     */\n    KeysInitSparql[\"baseIRI\"] = \"@comunica/actor-init-sparql:baseIRI\";\n    /**\n     * @range {Date} A timestamp representing the current time.\n     *                 This is required for certain SPARQL operations such as NOW().\n     */\n    KeysInitSparql[\"queryTimestamp\"] = \"@comunica/actor-init-sparql:queryTimestamp\";\n})(KeysInitSparql = exports.KeysInitSparql || (exports.KeysInitSparql = {}));\nvar KeysQueryOperation;\n(function (KeysQueryOperation) {\n    /**\n     * @range {string} Context entry for the current query operation.\n     */\n    KeysQueryOperation[\"operation\"] = \"@comunica/bus-query-operation:operation\";\n    /**\n     * @type {any} The current metadata.\n     *             I.e., the metadata that was used to determine the next BGP operation.\n     */\n    KeysQueryOperation[\"bgpCurrentMetadata\"] = \"@comunica/bus-query-operation:bgpCurrentMetadata\";\n    /**\n     * @range {any[]} An array of parent metadata.\n     *                I.e., an array of the metadata that was present before materializing the current BGP operations.\n     *                This can be passed in 'bgp' actions.\n     *                The array entries should correspond to the pattern entries in the BGP.\n     */\n    KeysQueryOperation[\"bgpParentMetadata\"] = \"@comunica/bus-query-operation:bgpParentMetadata\";\n    /**\n     * @range {IPatternBindings[]} Indicating which patterns were bound from variables.\n     *                             I.e., an array of the same length as the value of\n     *                             KeysQueryOperation.patternParentMetadata,\n     *                             where each array value corresponds to the pattern bindings\n     *                             for the corresponding pattern.\n     */\n    KeysQueryOperation[\"bgpPatternBindings\"] = \"@comunica/bus-query-operation:bgpPatternBindings\";\n    /**\n     * @range {any} Parent metadata hash.\n     *              I.e., the metadata that was present before materializing the current operation.\n     *              This can be passed in 'pattern' actions.\n     */\n    KeysQueryOperation[\"patternParentMetadata\"] = \"@comunica/bus-query-operation:patternParentMetadata\";\n    /**\n     * @range {boolean} Flag for indicating that only read operations are allowed, defaults to false.\n     */\n    KeysQueryOperation[\"readOnly\"] = \"@comunica/bus-query-operation:readOnly\";\n})(KeysQueryOperation = exports.KeysQueryOperation || (exports.KeysQueryOperation = {}));\nvar KeysRdfParseJsonLd;\n(function (KeysRdfParseJsonLd) {\n    /**\n     * @range {IDocumentLoader}\n     */\n    KeysRdfParseJsonLd[\"documentLoader\"] = \"@comunica/actor-rdf-parse-jsonld:documentLoader\";\n    /**\n     * @range {boolean}\n     */\n    KeysRdfParseJsonLd[\"strictValues\"] = \"@comunica/actor-rdf-parse-jsonld:strictValues\";\n    /**\n     * @range {Record<string, any>}\n     */\n    KeysRdfParseJsonLd[\"parserOptions\"] = \"@comunica/actor-rdf-parse-jsonld:parserOptions\";\n})(KeysRdfParseJsonLd = exports.KeysRdfParseJsonLd || (exports.KeysRdfParseJsonLd = {}));\nvar KeysRdfResolveQuadPattern;\n(function (KeysRdfResolveQuadPattern) {\n    /**\n     * @range {DataSources} Data sources.\n     */\n    KeysRdfResolveQuadPattern[\"sources\"] = \"@comunica/bus-rdf-resolve-quad-pattern:sources\";\n    /**\n     * @range {IDataSource} A data source.\n     */\n    KeysRdfResolveQuadPattern[\"source\"] = \"@comunica/bus-rdf-resolve-quad-pattern:source\";\n})(KeysRdfResolveQuadPattern = exports.KeysRdfResolveQuadPattern || (exports.KeysRdfResolveQuadPattern = {}));\nvar KeysRdfUpdateQuads;\n(function (KeysRdfUpdateQuads) {\n    /**\n     * @range {IDataDestination} A data destination.\n     */\n    KeysRdfUpdateQuads[\"destination\"] = \"@comunica/bus-rdf-update-quads:destination\";\n})(KeysRdfUpdateQuads = exports.KeysRdfUpdateQuads || (exports.KeysRdfUpdateQuads = {}));\n//# sourceMappingURL=Keys.js.map"]},"metadata":{},"sourceType":"script"}