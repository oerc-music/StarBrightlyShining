{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KEY_CONTEXT_LENIENT = exports.KEY_CONTEXT_SOURCES = exports.ActorQueryOperationLoad = void 0;\n\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\n\nconst core_1 = require(\"@comunica/core\");\n\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\n\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\n\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL load operations.\n */\n\nclass ActorQueryOperationLoad extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n  constructor(args) {\n    super(args, 'load');\n    this.factory = new sparqlalgebrajs_1.Factory();\n    this.constructOperation = this.factory.createConstruct(this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o')), [this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'))]);\n  }\n\n  async testOperation(pattern, context) {\n    bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  async runOperation(pattern, context) {\n    // Create CONSTRUCT query on the given source\n    if (!context) {\n      context = core_1.ActionContext({});\n    }\n\n    let subContext = context.set(exports.KEY_CONTEXT_SOURCES, [pattern.source.value]);\n\n    if (pattern.silent) {\n      subContext = subContext.set(exports.KEY_CONTEXT_LENIENT, true);\n    }\n\n    const output = ActorQueryOperationLoad.getSafeQuads(await this.mediatorQueryOperation.mediate({\n      operation: this.constructOperation,\n      context: subContext\n    })); // Determine quad stream to insert\n\n    let quadStream = output.quadStream;\n\n    if (pattern.destination) {\n      quadStream = quadStream.map(quad => DF.quad(quad.subject, quad.predicate, quad.object, pattern.destination));\n    } // Insert quad stream\n\n\n    const {\n      updateResult\n    } = await this.mediatorUpdateQuads.mediate({\n      quadStreamInsert: quadStream,\n      context\n    });\n    return {\n      type: 'update',\n      updateResult\n    };\n  }\n\n}\n\nexports.ActorQueryOperationLoad = ActorQueryOperationLoad;\nexports.KEY_CONTEXT_SOURCES = '@comunica/bus-rdf-resolve-quad-pattern:sources';\nexports.KEY_CONTEXT_LENIENT = '@comunica/actor-init-sparql:lenient';","map":{"version":3,"sources":["/Users/mark/localRepos/StarBrightlyShining/node_modules/@comunica/actor-query-operation-update-load/lib/ActorQueryOperationLoad.js"],"names":["Object","defineProperty","exports","value","KEY_CONTEXT_LENIENT","KEY_CONTEXT_SOURCES","ActorQueryOperationLoad","bus_query_operation_1","require","core_1","rdf_data_factory_1","sparqlalgebrajs_1","DF","DataFactory","ActorQueryOperationTypedMediated","constructor","args","factory","Factory","constructOperation","createConstruct","createPattern","variable","testOperation","pattern","context","ActorQueryOperation","throwOnReadOnly","runOperation","ActionContext","subContext","set","source","silent","output","getSafeQuads","mediatorQueryOperation","mediate","operation","quadStream","destination","map","quad","subject","predicate","object","updateResult","mediatorUpdateQuads","quadStreamInsert","type"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY_CONTEXT_LENIENT = exports.KEY_CONTEXT_SOURCES = exports.ActorQueryOperationLoad = void 0;\nconst bus_query_operation_1 = require(\"@comunica/bus-query-operation\");\nconst core_1 = require(\"@comunica/core\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst sparqlalgebrajs_1 = require(\"sparqlalgebrajs\");\nconst DF = new rdf_data_factory_1.DataFactory();\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL load operations.\n */\nclass ActorQueryOperationLoad extends bus_query_operation_1.ActorQueryOperationTypedMediated {\n    constructor(args) {\n        super(args, 'load');\n        this.factory = new sparqlalgebrajs_1.Factory();\n        this.constructOperation = this.factory.createConstruct(this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o')), [this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'))]);\n    }\n    async testOperation(pattern, context) {\n        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);\n        return true;\n    }\n    async runOperation(pattern, context) {\n        // Create CONSTRUCT query on the given source\n        if (!context) {\n            context = core_1.ActionContext({});\n        }\n        let subContext = context.set(exports.KEY_CONTEXT_SOURCES, [pattern.source.value]);\n        if (pattern.silent) {\n            subContext = subContext.set(exports.KEY_CONTEXT_LENIENT, true);\n        }\n        const output = ActorQueryOperationLoad.getSafeQuads(await this.mediatorQueryOperation.mediate({\n            operation: this.constructOperation,\n            context: subContext,\n        }));\n        // Determine quad stream to insert\n        let quadStream = output.quadStream;\n        if (pattern.destination) {\n            quadStream = quadStream.map(quad => DF.quad(quad.subject, quad.predicate, quad.object, pattern.destination));\n        }\n        // Insert quad stream\n        const { updateResult } = await this.mediatorUpdateQuads.mediate({\n            quadStreamInsert: quadStream,\n            context,\n        });\n        return {\n            type: 'update',\n            updateResult,\n        };\n    }\n}\nexports.ActorQueryOperationLoad = ActorQueryOperationLoad;\nexports.KEY_CONTEXT_SOURCES = '@comunica/bus-rdf-resolve-quad-pattern:sources';\nexports.KEY_CONTEXT_LENIENT = '@comunica/actor-init-sparql:lenient';\n//# sourceMappingURL=ActorQueryOperationLoad.js.map"]},"metadata":{},"sourceType":"script"}