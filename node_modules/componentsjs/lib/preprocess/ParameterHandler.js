"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterHandler = void 0;
const ParameterPropertyHandlerDefault_1 = require("./parameterproperty/ParameterPropertyHandlerDefault");
const ParameterPropertyHandlerDefaultScoped_1 = require("./parameterproperty/ParameterPropertyHandlerDefaultScoped");
const ParameterPropertyHandlerFixed_1 = require("./parameterproperty/ParameterPropertyHandlerFixed");
const ParameterPropertyHandlerLazy_1 = require("./parameterproperty/ParameterPropertyHandlerLazy");
const ParameterPropertyHandlerRange_1 = require("./parameterproperty/ParameterPropertyHandlerRange");
const ParameterPropertyHandlerRequired_1 = require("./parameterproperty/ParameterPropertyHandlerRequired");
const ParameterPropertyHandlerUnique_1 = require("./parameterproperty/ParameterPropertyHandlerUnique");
/**
 * Handles component parameters in the context of a config.
 */
class ParameterHandler {
    constructor(options) {
        this.objectLoader = options.objectLoader;
        this.parameterPropertyHandlers = [
            new ParameterPropertyHandlerDefaultScoped_1.ParameterPropertyHandlerDefaultScoped(this.objectLoader),
            new ParameterPropertyHandlerDefault_1.ParameterPropertyHandlerDefault(),
            new ParameterPropertyHandlerRequired_1.ParameterPropertyHandlerRequired(this.objectLoader),
            new ParameterPropertyHandlerFixed_1.ParameterPropertyHandlerFixed(),
            new ParameterPropertyHandlerUnique_1.ParameterPropertyHandlerUnique(this.objectLoader),
            new ParameterPropertyHandlerRange_1.ParameterPropertyHandlerRange(this.objectLoader),
            new ParameterPropertyHandlerLazy_1.ParameterPropertyHandlerLazy(),
        ];
    }
    /**
     * Obtain the values of the given parameter in the context of the given config.
     * @param configRoot The root config resource that we are working in.
     * @param parameter The parameter resource to get the value for.
     * @param configElement Part of the config resource to look for parameter instantiations as predicates.
     * @return The parameter value(s)
     */
    applyParameterValues(configRoot, parameter, configElement) {
        // Obtain the parameter's value in the given config, and flatten RDF lists
        let value = [];
        for (const element of configElement.properties[parameter.value]) {
            if (element.list) {
                for (const subElement of element.list) {
                    value.push(subElement);
                }
            }
            else {
                value.push(element);
            }
        }
        // Run the value through all applicable parameters property handlers.
        for (const handler of this.parameterPropertyHandlers) {
            if (handler.canHandle(value, configRoot, parameter, configElement)) {
                value = handler.handle(value, configRoot, parameter, configElement);
            }
        }
        return value;
    }
}
exports.ParameterHandler = ParameterHandler;
//# sourceMappingURL=ParameterHandler.js.map