"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterPropertyHandlerUnique = void 0;
const rdf_object_1 = require("rdf-object");
/**
 * If the value is singular, and the value should be unique, transform to a single element.
 */
class ParameterPropertyHandlerUnique {
    constructor(objectLoader) {
        this.objectLoader = objectLoader;
    }
    canHandle(value, configRoot, parameter, configElement) {
        return Boolean(parameter.property.unique && parameter.property.unique.value === 'true' && value.length > 0);
    }
    handle(value, configRoot, parameter, configElement) {
        value = [value[0]];
        // !!!Hack incoming!!!
        // We make a manual resource to ensure uniqueness from other resources.
        // This is needed because literals may occur different times in param values.
        // This ensures that the unique label is only applied to the current occurrence, instead of all occurrences.
        // TODO: improve this
        const newValue = new rdf_object_1.Resource({ term: value[0].term, context: this.objectLoader.contextResolved });
        for (const key of Object.keys(value[0].properties)) {
            for (const subValue of value[0].properties[key]) {
                newValue.properties[key].push(subValue);
            }
        }
        value = [newValue];
        value[0].property.unique = parameter.property.unique;
        return value;
    }
}
exports.ParameterPropertyHandlerUnique = ParameterPropertyHandlerUnique;
//# sourceMappingURL=ParameterPropertyHandlerUnique.js.map