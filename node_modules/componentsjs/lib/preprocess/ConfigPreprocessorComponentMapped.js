"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigPreprocessorComponentMapped = void 0;
const Iris_1 = require("../rdf/Iris");
const ConfigPreprocessorComponent_1 = require("./ConfigPreprocessorComponent");
const ConstructorArgumentsElementMappingHandlerCollectEntries_1 = require("./constructorargumentsmapping/ConstructorArgumentsElementMappingHandlerCollectEntries");
const ConstructorArgumentsElementMappingHandlerElements_1 = require("./constructorargumentsmapping/ConstructorArgumentsElementMappingHandlerElements");
const ConstructorArgumentsElementMappingHandlerFields_1 = require("./constructorargumentsmapping/ConstructorArgumentsElementMappingHandlerFields");
const ConstructorArgumentsElementMappingHandlerKeyValue_1 = require("./constructorargumentsmapping/ConstructorArgumentsElementMappingHandlerKeyValue");
const ConstructorArgumentsElementMappingHandlerList_1 = require("./constructorargumentsmapping/ConstructorArgumentsElementMappingHandlerList");
/**
 * Handles config that refer to a component as type.
 * The component may have parameters that can be applied on the config.
 * Additionally, the component applies a custom constructor arguments mapping for its parameters.
 */
class ConfigPreprocessorComponentMapped extends ConfigPreprocessorComponent_1.ConfigPreprocessorComponent {
    constructor() {
        super(...arguments);
        this.mappingHandlers = [
            new ConstructorArgumentsElementMappingHandlerKeyValue_1.ConstructorArgumentsElementMappingHandlerKeyValue(),
            new ConstructorArgumentsElementMappingHandlerCollectEntries_1.ConstructorArgumentsElementMappingHandlerCollectEntries(this.parameterHandler),
            new ConstructorArgumentsElementMappingHandlerFields_1.ConstructorArgumentsElementMappingHandlerFields(),
            new ConstructorArgumentsElementMappingHandlerElements_1.ConstructorArgumentsElementMappingHandlerElements(),
            new ConstructorArgumentsElementMappingHandlerList_1.ConstructorArgumentsElementMappingHandlerList(),
        ];
    }
    canHandle(config) {
        const handleResponse = super.canHandle(config);
        if (handleResponse && !handleResponse.component.property.constructorArguments) {
            return;
        }
        return handleResponse;
    }
    transformConstructorArguments(config, handleResponse) {
        const constructorArgs = handleResponse.component.property.constructorArguments;
        return this.applyConstructorArgumentsParameters(config, constructorArgs, config);
    }
    applyConstructorArgumentsParameters(configRoot, constructorArgs, configElement) {
        // Check if this constructor args resource can be handled by one of the built-in handlers.
        for (const handler of this.mappingHandlers) {
            if (handler.canHandle(configRoot, constructorArgs, configElement, this)) {
                return handler.handle(configRoot, constructorArgs, configElement, this);
            }
        }
        // Fallback to original constructor args
        return [constructorArgs];
    }
    getParameterValue(configRoot, parameter, configElement, rawValue) {
        var _a;
        let valueOut;
        if (parameter.type === 'NamedNode' && parameter.value === Iris_1.IRIS_RDF.subject) {
            valueOut = [this.objectLoader.createCompactedResource(`"${configElement.value}"`)];
            valueOut[0].property.unique = this.objectLoader.createCompactedResource('"true"');
        }
        else if (parameter.type === 'NamedNode') {
            valueOut = this.parameterHandler.applyParameterValues(configRoot, parameter, configElement);
        }
        else {
            valueOut = this.applyConstructorArgumentsParameters(configRoot, parameter, configElement);
        }
        // If the referenced IRI should become a plain string
        if (rawValue) {
            const unique = ((_a = valueOut[0].property.unique) === null || _a === void 0 ? void 0 : _a.value) === 'true';
            valueOut = [this.objectLoader.createCompactedResource(`"${valueOut[0].value}"`)];
            // Make sure to inherit the original param's unique flag
            if (unique) {
                valueOut[0].property.unique = this.objectLoader.createCompactedResource('"true"');
            }
        }
        return valueOut;
    }
}
exports.ConfigPreprocessorComponentMapped = ConfigPreprocessorComponentMapped;
//# sourceMappingURL=ConfigPreprocessorComponentMapped.js.map