"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructorArgumentsElementMappingHandlerList = void 0;
/**
 * Handler for an RDF list.
 */
class ConstructorArgumentsElementMappingHandlerList {
    canHandle(configRoot, constructorArgs, configElement, mapper) {
        return Boolean(constructorArgs.list);
    }
    handle(configRoot, constructorArgs, configElement, mapper) {
        var _a;
        // Recursively handle all field values.
        const ret = mapper.objectLoader.createCompactedResource({});
        ret.list = [];
        for (const argument of constructorArgs.list) {
            if (argument.property.fields || argument.property.elements) {
                for (const mapped of mapper.applyConstructorArgumentsParameters(configRoot, argument, configElement)) {
                    ret.list.push(mapped);
                }
            }
            else {
                const mappeds = mapper.getParameterValue(configRoot, argument, configElement, false);
                if (mappeds.length > 0) {
                    if (((_a = mappeds[0].property.unique) === null || _a === void 0 ? void 0 : _a.value) === 'true') {
                        // Only add a single value if param was unique
                        ret.list.push(mappeds[0]);
                    }
                    else {
                        // Add all values as an array if param was not unique
                        ret.list.push(mapper.objectLoader.createCompactedResource({
                            elements: mappeds.map(value => mapper.objectLoader.createCompactedResource({ value })),
                        }));
                    }
                }
                else {
                    // Explicitly pass a single undefined value if no param value was set
                    ret.list.push(mapper.objectLoader.createCompactedResource({
                        undefined: true,
                    }));
                }
            }
        }
        return [ret];
    }
}
exports.ConstructorArgumentsElementMappingHandlerList = ConstructorArgumentsElementMappingHandlerList;
//# sourceMappingURL=ConstructorArgumentsElementMappingHandlerList.js.map